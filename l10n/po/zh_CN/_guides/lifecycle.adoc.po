# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:52+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/lifecycle.adoc:6
#, fuzzy, no-wrap
msgid "Application Initialization and Termination"
msgstr "应用程序的初始化和终止"

#. type: Plain text
#: upstream/_guides/lifecycle.adoc:12
#, fuzzy
msgid "You often need to execute custom actions when the application starts and clean up everything when the application stops.  This guide explains how to:"
msgstr "你经常需要在应用程序启动时执行自定义动作，并在应用程序停止时清理一切。本指南解释了如何。"

#. type: Plain text
#: upstream/_guides/lifecycle.adoc:14
#, fuzzy
msgid "Write a Quarkus application with a main method"
msgstr "编写一个带有主方法的Quarkus应用程序"

#. type: Plain text
#: upstream/_guides/lifecycle.adoc:15
#, fuzzy
msgid "Write command mode applications that run a task and then terminate"
msgstr "编写命令模式的应用程序，运行一个任务，然后终止"

#. type: Plain text
#: upstream/_guides/lifecycle.adoc:16
#, fuzzy
msgid "Be notified when the application starts"
msgstr "应用开始时得到通知"

#. type: Plain text
#: upstream/_guides/lifecycle.adoc:17
#, fuzzy
msgid "Be notified when the application stops"
msgstr "当应用程序停止时被通知"

#. type: Title ==
#: upstream/_guides/lifecycle.adoc:18
#, fuzzy, no-wrap
msgid "Prerequisites"
msgstr "先决条件"

#. type: Title ==
#: upstream/_guides/lifecycle.adoc:22
#, fuzzy, no-wrap
msgid "Solution"
msgstr "解决方案"

#. type: Plain text
#: upstream/_guides/lifecycle.adoc:26
#, fuzzy
msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can go right to the completed example."
msgstr "我们建议你按照下面几节的说明，一步一步地创建应用程序。然而，你可以直接进入已完成的例子。"

#. type: Plain text
#: upstream/_guides/lifecycle.adoc:28
#, fuzzy
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "克隆 Git 仓库。 `git clone {quickstarts-clone-url}` ，或者下载一个{quickstarts-archive-url}[存档]。"

#. type: Plain text
#: upstream/_guides/lifecycle.adoc:30
#, fuzzy
msgid "The solution is located in the `lifecycle-quickstart` {quickstarts-tree-url}/lifecycle-quickstart[directory]."
msgstr "该解决方案位于 `lifecycle-quickstart` {quickstarts-tree-url}/lifecycle-quickstart[目录]中。"

#. type: Title ==
#: upstream/_guides/lifecycle.adoc:31
#, fuzzy, no-wrap
msgid "Creating the Maven project"
msgstr "创建Maven项目"

#. type: Plain text
#: upstream/_guides/lifecycle.adoc:34
#, fuzzy
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "首先，我们需要一个新的项目。用以下命令创建一个新项目。"

#. type: Plain text
#: upstream/_guides/lifecycle.adoc:39
#, fuzzy
msgid "It generates:"
msgstr "它产生了。"

#. type: Plain text
#: upstream/_guides/lifecycle.adoc:41
#, fuzzy
msgid "the Maven structure"
msgstr "Maven的结构"

#. type: Plain text
#: upstream/_guides/lifecycle.adoc:42
#, fuzzy
msgid "example `Dockerfile` files for both `native` and `jvm` modes"
msgstr "示例 `Dockerfile` 文件，用于 `native` 和 `jvm` 模式。"

#. type: Plain text
#: upstream/_guides/lifecycle.adoc:43
#, fuzzy
msgid "the application configuration file"
msgstr "应用程序的配置文件"

#. type: Title ==
#: upstream/_guides/lifecycle.adoc:44
#, fuzzy, no-wrap
msgid "The main method"
msgstr "主要方法"

#. type: Plain text
#: upstream/_guides/lifecycle.adoc:48
#, fuzzy
msgid "By default Quarkus will automatically generate a main method, that will bootstrap Quarkus and then just wait for shutdown to be initiated. Let's provide our own main method:"
msgstr "默认情况下，Quarkus会自动生成一个main方法，它将启动Quarkus，然后只需等待关机的启动。让我们提供我们自己的主方法。"

#. type: delimited block -
#: upstream/_guides/lifecycle.adoc:51 upstream/_guides/lifecycle.adoc:87
#, no-wrap
msgid "package com.acme;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/lifecycle.adoc:54
#, no-wrap
msgid ""
"import io.quarkus.runtime.annotations.QuarkusMain;\n"
"import io.quarkus.runtime.Quarkus;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/lifecycle.adoc:57
#, no-wrap
msgid ""
"@QuarkusMain  <1>\n"
"public class Main {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/lifecycle.adoc:63
#, no-wrap
msgid ""
"    public static void main(String ... args) {\n"
"        System.out.println(\"Running main method\");\n"
"        Quarkus.run(args); <2>\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/lifecycle.adoc:65
#, fuzzy
msgid "This annotation tells Quarkus to use this as the main method, unless it is overridden in the config"
msgstr "这个注解告诉Quarkus使用这个方法作为主方法，除非它在配置中被重写。"

#. type: Plain text
#: upstream/_guides/lifecycle.adoc:66
#, fuzzy
msgid "This launches Quarkus"
msgstr "这启动了Quarkus"

#. type: Plain text
#: upstream/_guides/lifecycle.adoc:70
#, fuzzy
msgid "This main class will bootstrap Quarkus and run it until it stops. This is no different to the automatically generated main class, but has the advantage that you can just launch it directly from the IDE without needing to run a Maven or Gradle command."
msgstr "这个主类将启动Quarkus并运行它，直到它停止。这与自动生成的主类没有区别，但好处是你可以直接从IDE中启动它，而不需要运行Maven或Gradle命令。"

#. type: Plain text
#: upstream/_guides/lifecycle.adoc:74
#, fuzzy
msgid "It is not recommenced to do any business logic in this main method, as Quarkus has not been set up yet, and Quarkus may run in a different ClassLoader. If you want to perform logic on startup use an `io.quarkus.runtime.QuarkusApplication` as described below."
msgstr "不建议在这个主方法中做任何业务逻辑，因为Quarkus还没有被设置好，而且Quarkus可能在不同的ClassLoader中运行。如果你想在启动时执行逻辑，请使用下面描述的 `io.quarkus.runtime.QuarkusApplication` 。"

#. type: Plain text
#: upstream/_guides/lifecycle.adoc:78
#, fuzzy
msgid "If we want to actually perform business logic on startup (or write applications that complete a task and then exit)  we need to supply a `io.quarkus.runtime.QuarkusApplication` class to the run method. After Quarkus has been started the `run` method of the application will be invoked. When this method returns the Quarkus application will exit."
msgstr "如果我们想在启动时实际执行业务逻辑（或编写完成一个任务后退出的应用程序），我们需要向run方法提供一个 `io.quarkus.runtime.QuarkusApplication` 。在Quarkus被启动后，应用程序的 `run` 方法将被调用。当这个方法返回时，Quarkus应用程序将退出。"

#. type: Plain text
#: upstream/_guides/lifecycle.adoc:81
#, fuzzy
msgid "If you want to perform logic on startup you should call `Quarkus.waitForExit()`, this method will wait until a shutdown is requested (either from an external signal like when you press `Ctrl+C` or because a thread has called `Quarkus.asyncExit()`)."
msgstr "如果你想在启动时执行逻辑，你应该调用 `Quarkus.waitForExit()` ，这个方法将等待，直到请求关闭（要么来自外部信号，如你按下 `Ctrl+C` ，要么是因为一个线程调用了 `Quarkus.asyncExit()` ）。"

#. type: Plain text
#: upstream/_guides/lifecycle.adoc:83
#, fuzzy
msgid "An example of what this looks like is below:"
msgstr "下面是一个例子，说明这看起来像什么。"

#. type: delimited block -
#: upstream/_guides/lifecycle.adoc:91
#, no-wrap
msgid ""
"import io.quarkus.runtime.Quarkus;\n"
"import io.quarkus.runtime.QuarkusApplication;\n"
"import io.quarkus.runtime.annotations.QuarkusMain;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/lifecycle.adoc:97
#, no-wrap
msgid ""
"@QuarkusMain\n"
"public class Main {\n"
"    public static void main(String... args) {\n"
"        Quarkus.run(MyApp.class, args);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/lifecycle.adoc:99
#, no-wrap
msgid "    public static class MyApp implements QuarkusApplication {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/lifecycle.adoc:108
#, no-wrap
msgid ""
"        @Override\n"
"        public int run(String... args) throws Exception {\n"
"            System.out.println(\"Do startup logic here\");\n"
"            Quarkus.waitForExit();\n"
"            return 0;\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/lifecycle.adoc:110
#, fuzzy, no-wrap
msgid "Injecting the command line arguments"
msgstr "注入命令行参数"

#. type: Plain text
#: upstream/_guides/lifecycle.adoc:113
#, fuzzy
msgid "It is possible to inject the arguments that were passed in on the command line:"
msgstr "有可能注入命令行上传入的参数。"

#. type: delimited block -
#: upstream/_guides/lifecycle.adoc:119
#, no-wrap
msgid ""
"@Inject\n"
"@CommandLineArguments\n"
"String[] args;\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/lifecycle.adoc:122
#, fuzzy
msgid "Command line arguments can be passed to the application through the `-D` flag with the property `quarkus.args`:"
msgstr "命令行参数可以通过 `-D` 标志传递给应用程序，其属性为 `quarkus.args` 。"

#. type: Plain text
#: upstream/_guides/lifecycle.adoc:128
#, fuzzy
msgid "For Quarkus dev mode:"
msgstr "对于Quarkus开发模式。"

#. type: Plain text
#: upstream/_guides/lifecycle.adoc:132
#, fuzzy
msgid "For a runner jar: `java -Dquarkus.args=<cmd-args> -jar target/quarkus-app/quarkus-run.jar`"
msgstr "对于一个跑马灯的瓶子。 `java -Dquarkus.args=<cmd-args> -jar target/quarkus-app/quarkus-run.jar` "

#. type: Plain text
#: upstream/_guides/lifecycle.adoc:133
#, fuzzy
msgid "For a native executable: `./target/lifecycle-quickstart-1.0-SNAPSHOT-runner -Dquarkus.args=<cmd-args>`"
msgstr "对于一个本地可执行文件。 `./target/lifecycle-quickstart-1.0-SNAPSHOT-runner -Dquarkus.args=<cmd-args>` "

#. type: Title ==
#: upstream/_guides/lifecycle.adoc:137
#, fuzzy, no-wrap
msgid "Listening for startup and shutdown events"
msgstr "倾听启动和关闭事件"

#. type: Plain text
#: upstream/_guides/lifecycle.adoc:141
#, fuzzy
msgid "Create a new class named `AppLifecycleBean` (or pick another name) in the `org.acme.lifecycle` package, and copy the following content:"
msgstr "在 `org.acme.lifecycle` 包中创建一个新的类，命名为 `AppLifecycleBean` （或选择其他名称），并复制以下内容。"

#. type: delimited block -
#: upstream/_guides/lifecycle.adoc:145 upstream/_guides/lifecycle.adoc:191
#, no-wrap
msgid "package org.acme.lifecycle;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/lifecycle.adoc:148
#, no-wrap
msgid ""
"import javax.enterprise.context.ApplicationScoped;\n"
"import javax.enterprise.event.Observes;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/lifecycle.adoc:152
#, no-wrap
msgid ""
"import io.quarkus.runtime.ShutdownEvent;\n"
"import io.quarkus.runtime.StartupEvent;\n"
"import org.jboss.logging.Logger;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/lifecycle.adoc:155
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class AppLifecycleBean {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/lifecycle.adoc:157
#, no-wrap
msgid "    private static final Logger LOGGER = Logger.getLogger(\"ListenerBean\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/lifecycle.adoc:161
#, no-wrap
msgid ""
"    void onStart(@Observes StartupEvent ev) {               // <1>\n"
"        LOGGER.info(\"The application is starting...\");\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/lifecycle.adoc:165
#, no-wrap
msgid ""
"    void onStop(@Observes ShutdownEvent ev) {               // <2>\n"
"        LOGGER.info(\"The application is stopping...\");\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/lifecycle.adoc:167
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/lifecycle.adoc:169
#, fuzzy
msgid "Method called when the application is starting"
msgstr "应用程序启动时调用的方法"

#. type: Plain text
#: upstream/_guides/lifecycle.adoc:170
#, fuzzy
msgid "Method called when the application is terminating"
msgstr "应用程序终止时调用的方法"

#. type: Plain text
#: upstream/_guides/lifecycle.adoc:172
#, fuzzy
msgid "The events are also called in _dev mode_ between each redeployment."
msgstr "在每次重新部署之间，也会在 _开发模式_ 下调用这些事件。"

#. type: Plain text
#: upstream/_guides/lifecycle.adoc:174
#, fuzzy
msgid "The methods can access injected beans. Check the {quickstarts-blob-url}/lifecycle-quickstart/src/main/java/org/acme/lifecycle/AppLifecycleBean.java[AppLifecycleBean.java] class for details."
msgstr "这些方法可以访问注入的Bean。请查看{quickstarts-blob-url}/lifecycle-quickstart/src/main/java/org/acme/lifecycle/AppLifecycleBean.java[AppLifecycleBean.java]类的详细信息。"

#. type: Title ===
#: upstream/_guides/lifecycle.adoc:175
#, fuzzy, no-wrap
msgid "What is the difference from `@Initialized(ApplicationScoped.class)` and `@Destroyed(ApplicationScoped.class)`"
msgstr "与 `@Initialized(ApplicationScoped.class)` 和的区别是什么？ `@Destroyed(ApplicationScoped.class)` "

#. type: Plain text
#: upstream/_guides/lifecycle.adoc:180
#, fuzzy
msgid "In the JVM mode, there is no real difference, except that `StartupEvent` is always fired *after* `@Initialized(ApplicationScoped.class)` and `ShutdownEvent` is fired *before* `@Destroyed(ApplicationScoped.class)`.  For a native executable build, however, `@Initialized(ApplicationScoped.class)` is fired as *part of the native build process*, whereas `StartupEvent` is fired when the native image is executed.  See xref:writing-extensions.adoc#bootstrap-three-phases[Three Phases of Bootstrap and Quarkus Philosophy] for more details."
msgstr "在JVM模式下，除了 `StartupEvent` 总是 *在* `@Initialized(ApplicationScoped.class)` *之后* 启动， `ShutdownEvent` *在* `@Destroyed(ApplicationScoped.class)` *之前* 启动之外，并没有真正的区别。然而，对于本地可执行构建， `@Initialized(ApplicationScoped.class)` 是作为 *本地构建过程的一部分* 被触发的，而 `StartupEvent` 是在本地镜像被执行时被触发的。更多细节请参见 link:writing-extensions.html#bootstrap-three-phases[Bootstrap的三个阶段和Quarkus哲学] 。"

#. type: Plain text
#: upstream/_guides/lifecycle.adoc:182
#, fuzzy
msgid "In CDI applications, an event with qualifier `@Initialized(ApplicationScoped.class)` is fired when the application context is initialized. See https://jakarta.ee/specifications/cdi/2.0/cdi-spec-2.0.html#application_context[the spec, window=\"_blank\"] for more info."
msgstr "在CDI应用程序中，当应用程序上下文被初始化时，一个带有限定词 `@Initialized(ApplicationScoped.class)` 的事件被触发。更多信息请参见 link:https://jakarta.ee/specifications/cdi/2.0/cdi-spec-2.0.html#application_context[规范, target=\"_blank\"] 。"

#. type: Title ===
#: upstream/_guides/lifecycle.adoc:184
#, fuzzy, no-wrap
msgid "Using `@Startup` to initialize a CDI bean at application startup"
msgstr "使用 `@Startup` ，在应用程序启动时初始化一个CDI bean"

#. type: Plain text
#: upstream/_guides/lifecycle.adoc:187
#, fuzzy
msgid "A bean represented by a class, producer method or field annotated with `@Startup` is initialized at application startup:"
msgstr "一个由类、生产者方法或字段注解的Bean代表的 `@Startup` ，在应用程序启动时被初始化。"

#. type: delimited block -
#: upstream/_guides/lifecycle.adoc:193
#, no-wrap
msgid "import javax.enterprise.context.ApplicationScoped;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/lifecycle.adoc:197
#, no-wrap
msgid ""
"@Startup // <1> \n"
"@ApplicationScoped\n"
"public class EagerAppBean {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/lifecycle.adoc:199
#, no-wrap
msgid "   private final String name;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/lifecycle.adoc:204
#, no-wrap
msgid ""
"   EagerAppBean(NameGenerator generator) { // <2>\n"
"     this.name = generator.createName();\n"
"   }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/lifecycle.adoc:206
#, fuzzy
msgid "For each bean annotated with `@Startup` a synthetic observer of `StartupEvent` is generated. The default priority is used."
msgstr "对于每个用 `@Startup` 注释的Bean，会生成一个 `StartupEvent` 的合成观察者。使用的是默认的优先级。"

#. type: Plain text
#: upstream/_guides/lifecycle.adoc:207
#, fuzzy
msgid "The bean constructor is called when the application starts and the resulting contextual instance is stored in the application context."
msgstr "当应用程序启动时，Bean构造函数被调用，产生的上下文实例被存储在应用程序上下文中。"

#. type: Plain text
#: upstream/_guides/lifecycle.adoc:209
#, fuzzy
msgid "`@Dependent` beans are destroyed immediately afterwards to follow the behavior of observers declared on `@Dependent` beans."
msgstr " `@Dependent` beans之后立即被销毁，以遵循在 beans上声明的观察员的行为。 `@Dependent` "

#. type: Plain text
#: upstream/_guides/lifecycle.adoc:211
#, fuzzy
msgid "If a class is annotated with `@Startup` but with no scope annotation then `@ApplicationScoped` is added automatically."
msgstr "如果一个类被注解了 `@Startup` ，但没有范围注解，那么 `@ApplicationScoped` ，就会被自动添加。"

#. type: Title ==
#: upstream/_guides/lifecycle.adoc:212
#, fuzzy, no-wrap
msgid "Package and run the application"
msgstr "包装和运行应用程序"

#. type: Plain text
#: upstream/_guides/lifecycle.adoc:215
#, fuzzy
msgid "Run the application with:"
msgstr "用以下方式运行应用程序。"

#. type: Plain text
#: upstream/_guides/lifecycle.adoc:220
#, fuzzy
msgid "The logged message is printed.  When the application is stopped, the second log message is printed."
msgstr "被记录的消息被打印出来。当应用程序被停止时，第二条日志信息被打印出来。"

#. type: Plain text
#: upstream/_guides/lifecycle.adoc:222
#, fuzzy
msgid "As usual, the application can be packaged using:"
msgstr "像往常一样，该应用程序可以用以下方式打包。"

#. type: Plain text
#: upstream/_guides/lifecycle.adoc:226
#, fuzzy
msgid "and executed using `java -jar target/quarkus-app/quarkus-run.jar`."
msgstr "并使用 `java -jar target/quarkus-app/quarkus-run.jar` 来执行。"

#. type: Plain text
#: upstream/_guides/lifecycle.adoc:228
#, fuzzy
msgid "You can also generate the native executable using:"
msgstr "你也可以用以下方法生成本地可执行文件。"

#. type: Title ==
#: upstream/_guides/lifecycle.adoc:231
#, fuzzy, no-wrap
msgid "Launch Modes"
msgstr "发射模式"

#. type: Plain text
#: upstream/_guides/lifecycle.adoc:235
#, fuzzy
msgid "Quarkus has 3 different launch modes, `NORMAL` (i.e. production), `DEVELOPMENT` and `TEST`. If you are running `quarkus:dev` then the mode will be `DEVELOPMENT`, if you are running a JUnit test it will be `TEST`, otherwise it will be `NORMAL`."
msgstr "Quarkus有3种不同的启动模式， `NORMAL` （即生产模式）， `DEVELOPMENT` 和 `TEST` 。如果你正在运行 `quarkus:dev` ，那么模式将是 `DEVELOPMENT` ，如果你正在运行JUnit测试，将是 `TEST` ，否则将是 `NORMAL` 。"

#. type: Plain text
#: upstream/_guides/lifecycle.adoc:238
#, fuzzy
msgid "Your application can get the launch mode by injecting the `io.quarkus.runtime.LaunchMode` enum into a CDI bean, or by invoking the static method `io.quarkus.runtime.LaunchMode.current()`."
msgstr "你的应用程序可以通过将 `io.quarkus.runtime.LaunchMode` 枚举注入到CDI Bean中，或者通过调用静态方法 `io.quarkus.runtime.LaunchMode.current()` 来获得启动模式。"

#. type: Title ==
#: upstream/_guides/lifecycle.adoc:239
#, fuzzy, no-wrap
msgid "Graceful Shutdown"
msgstr "优雅的关机"

#. type: Plain text
#: upstream/_guides/lifecycle.adoc:246
msgid "Quarkus includes support for graceful shutdown, this allows Quarkus to wait for running requests to finish, up till a set timeout. By default this is disabled, however you can configure this by setting the `quarkus.shutdown.timeout` config property. When this is set shutdown will not happen until all running requests have completed, or until this timeout has elapsed. This config property is a duration, and can be set using the standard `java.time.Duration` format, if only a number is specified it is interpreted as seconds."
msgstr ""

#. type: Plain text
#: upstream/_guides/lifecycle.adoc:248
msgid "Extensions that accept requests need to add support for this on an individual basis. At the moment only the HTTP extension supports this, so shutdown may still happen when messaging requests are active."
msgstr ""
