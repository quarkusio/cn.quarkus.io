# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-10-25 13:13+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: _guides/funqy-knative-events.adoc
#, fuzzy, no-wrap
msgid "Funqy Knative Events Binding"
msgstr "Funqy Knative事件绑定"

#: _guides/funqy-knative-events.adoc
msgid ""
"Quarkus Funqy link:https://knative.dev/docs/eventing[Knative Events] builds off of the xref:funqy-http.adoc[Funqy HTTP] extension to allow you to\n"
"route and process Knative Events within a Funqy function."
msgstr ""

#: _guides/funqy-knative-events.adoc
msgid ""
"The guide walks through quickstart code to show you how you can deploy and invoke on Funqy functions\n"
"with Knative Events."
msgstr ""

#. type: Title ==
#: _guides/funqy-knative-events.adoc
#, fuzzy, no-wrap
msgid "Prerequisites"
msgstr "先决条件"

#. type: Plain text
#: _guides/funqy-knative-events.adoc
#, fuzzy
msgid "Read about xref:funqy.adoc[Funqy Basics].  This is a short read!"
msgstr "阅读关于 link:funqy.html[Funqy基础知识] 。这是一个简短的阅读!"

#. type: Plain text
#: _guides/funqy-knative-events.adoc
#, fuzzy
msgid "Have gone through the link:https://redhat-developer-demos.github.io/knative-tutorial/knative-tutorial/index.html[Knative Tutorial], specifically link:https://redhat-developer-demos.github.io/knative-tutorial/knative-tutorial/eventing/eventing-trigger-broker.html[Brokers and Triggers]"
msgstr "已经通过了 link:https://redhat-developer-demos.github.io/knative-tutorial/knative-tutorial/index.html[Knative教程] ，特别是 link:https://redhat-developer-demos.github.io/knative-tutorial/knative-tutorial-eventing/eventing-trigger-broker.html[经纪人和触发器]"

#. type: Title ==
#: _guides/funqy-knative-events.adoc
#, fuzzy, no-wrap
msgid "Setting up Knative"
msgstr "设置Knative"

#: _guides/funqy-knative-events.adoc
msgid ""
"Setting up Knative locally in a Minikube environment is beyond the scope of this guide.  It is advised\n"
"to follow  https://redhat-developer-demos.github.io/knative-tutorial/knative-tutorial/index.html[this] Knative Tutorial\n"
"put together by Red Hat.  It walks through how to set up Knative on Minikube or OpenShift in a local environment."
msgstr ""

#: _guides/funqy-knative-events.adoc
msgid ""
"Specifically you should run the link:https://redhat-developer-demos.github.io/knative-tutorial/knative-tutorial/eventing/eventing-trigger-broker.html[Brokers and Triggers]\n"
"tutorial as this guide requires that you can invoke on a Broker to trigger the quickstart code."
msgstr ""

#. type: Title ==
#: _guides/funqy-knative-events.adoc
#, fuzzy, no-wrap
msgid "Read about Cloud Events"
msgstr "阅读关于云计算活动"

#. type: Plain text
#: _guides/funqy-knative-events.adoc
#, fuzzy
msgid "The Cloud Event link:https://cloudevents.io/[specification] is a good read to give you an even greater understanding of Knative Events."
msgstr "云事件 link:https://cloudevents.io/[规范] 是一个很好的读物，让你对Knative事件有更多的了解。"

#. type: Title ==
#: _guides/funqy-knative-events.adoc
#, fuzzy, no-wrap
msgid "The Quickstart"
msgstr "快速入门"

#. type: Plain text
#: _guides/funqy-knative-events.adoc
#, fuzzy
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "克隆 Git 仓库。 `git clone {quickstarts-clone-url}` ，或者下载一个 {quickstarts-archive-url}[存档] 。"

#. type: Plain text
#: _guides/funqy-knative-events.adoc
#, fuzzy
msgid "The solution is located in the `funqy-knative-events-quickstart` link:{quickstarts-tree-url}/funqy-quickstarts/funqy-knative-events-quickstart[directory]."
msgstr "该解决方案位于 `funqy-knative-events-quickstart` {quickstarts-tree-url}/funqy-quickstarts/funqy-knative-events-quickstart[目录]中。"

#. type: Title ==
#: _guides/funqy-knative-events.adoc
#, fuzzy, no-wrap
msgid "The Quickstart Flow"
msgstr "快速启动流程"

#: _guides/funqy-knative-events.adoc
msgid ""
"The quickstart works by manually sending an HTTP request containing a Cloud Event to the Knative Broker using `curl`.\n"
"The Knative Broker receives the request and triggers the startup of the Funqy container built by the quickstart.\n"
"The event triggers the invocation of a chain of Funqy functions.  The output of one function triggers the\n"
"invocation of another Funqy function."
msgstr ""

#. type: Title ==
#: _guides/funqy-knative-events.adoc
#, fuzzy, no-wrap
msgid "Funqy and Cloud Events"
msgstr "Funqy和云活动"

#: _guides/funqy-knative-events.adoc
msgid ""
"When living within a Knative Events environment, Funqy functions are triggered by a specific\n"
"Cloud Event type.  You can have multiple Funqy functions within a single application/deployment,\n"
"but they must be triggered by a specific Cloud Event Type.  The exception to this rule is if there is\n"
"only one Funqy function in the application.  In that case, the event is pushed to that function irregardless\n"
"of the Cloud Event type."
msgstr ""

#: _guides/funqy-knative-events.adoc
msgid ""
"Currently, Funqy can only consume JSON-based data.  It supports both Binary and Structured mode of execution,\n"
"but the data component of the Cloud Event message must be JSON.  This JSON must also be marshallable to and from the\n"
"Java parameters and return types of your functions."
msgstr ""

#. type: Title ==
#: _guides/funqy-knative-events.adoc
#, fuzzy, no-wrap
msgid "The Code"
msgstr "准则"

#: _guides/funqy-knative-events.adoc
msgid ""
"Let's start looking at our quickstart code so that you can understand how Knative Events map to Funqy.\n"
"Open up link:{quickstarts-tree-url}/funqy-quickstarts/funqy-knative-events-quickstart/src/main/java/org/acme/funqy/SimpleFunctionChain.java[SimpleFunctionChain.java]"
msgstr ""

#. type: Plain text
#: _guides/funqy-knative-events.adoc
#, fuzzy
msgid "The first function we'll look at is `defaultChain`."
msgstr "我们要看的第一个函数是 `defaultChain` 。"

#: _guides/funqy-knative-events.adoc
msgid ""
"As is, a Funqy function has a default Cloud Event mapping.  By default, the Cloud Event type must match\n"
"the function name for the function to trigger.  If the function returns output,\n"
"the response is converted into a Cloud Event and returned to the Broker to be routed to other triggers.\n"
"The default Cloud Event type for this response is the function name + `.output`.  The default Cloud Event source is the function name."
msgstr ""

#: _guides/funqy-knative-events.adoc
msgid ""
"So, for the `defaultChain` function, the Cloud Event type that triggers the function is `defaultChain`.  It generates\n"
"a response that triggers a new Cloud Event whose type is `defaultChain.output` and the event source is `defaultChain`."
msgstr ""

#: _guides/funqy-knative-events.adoc
msgid ""
"While the default mapping is simple, it might not always be feasible.  You can change this default mapping\n"
"through configuration.  Let's look at the next function:"
msgstr ""

#. type: Plain text
#: _guides/funqy-knative-events.adoc
#, fuzzy
msgid "The `configChain` function has its Cloud Event mapping changed by configuration within link:{quickstarts-tree-url}/funqy-quickstarts/funqy-knative-events-quickstart/src/main/resources/application.properties[application.properties]."
msgstr " `configChain` 函数的云事件映射通过{quickstarts-tree-url}/funqy-quickstarts/funqy-knative-events-quickstart/src/main/resources/application.properties[应用.属性]内的配置来改变。"

#: _guides/funqy-knative-events.adoc
msgid ""
"In this case, the configuration maps the incoming Cloud Event type `defaultChain.output` to the `configChain` function.\n"
"The `configChain` function maps its response to the `annotated` Cloud Event type, and the Cloud Event source `configChain`."
msgstr ""

#. type: Plain text
#: _guides/funqy-knative-events.adoc
#, fuzzy
msgid "`quarkus.funqy.knative-events.mapping.{function name}.trigger` sets the Cloud Event type that triggers a specific function. It is possible to use the special value `*` as a catch-all value. The function will in this case be used for all event types."
msgstr " `quarkus.funqy.knative-events.mapping.{function name}.trigger` 设置触发一个特定函数的云事件类型。可以使用特殊值 ，作为一个总括性的值。在这种情况下，该函数将被用于所有事件类型。 `*` "

#. type: Plain text
#: _guides/funqy-knative-events.adoc
#, fuzzy
msgid "`quarkus.funqy.knative-events.mapping.{function name}.response-type` sets the Cloud Event type of the response"
msgstr " `quarkus.funqy.knative-events.mapping.{function name}.response-type` 设置响应的云事件类型"

#. type: Plain text
#: _guides/funqy-knative-events.adoc
#, fuzzy
msgid "`quarkus.funqy.knative-events.mapping.{function name}.resource-source` sets the Cloud Event source of the response"
msgstr " `quarkus.funqy.knative-events.mapping.{function name}.resource-source` 设置响应的云事件来源"

#: _guides/funqy-knative-events.adoc
msgid ""
"The Funqy Knative Events extension also has annotations to do this Cloud Event mapping to your functions.  Take a look at the\n"
"`annotatedChain` method"
msgstr ""

#: _guides/funqy-knative-events.adoc
msgid ""
"If you use the `@CloudEventMapping` annotation on your function you can map the Cloud Event type trigger\n"
"and the Cloud Event response.  In this example the `annotatedChain` function will be triggered\n"
"by the `annotated` Cloud Event type and the response will be mapped to a `lastChainLink` type\n"
"and `annotated` Cloud Event source."
msgstr ""

#: _guides/funqy-knative-events.adoc
msgid ""
"So, if you look at all the functions defined within `SimpleFunctionChain` you'll notice that one function triggers the next.\n"
"The last function that is triggered is `lastChainLink`."
msgstr ""

#: _guides/funqy-knative-events.adoc
msgid ""
"There are two things to notice about this function.  One, it has no output.  Your functions are not\n"
"required to return output.  Second, there is an additional `event` parameter to the function."
msgstr ""

#: _guides/funqy-knative-events.adoc
msgid ""
"If you want to know additional information about the incoming Cloud Event, you can inject the\n"
"`io.quarkus.funqy.knative.events.CloudEvent` interface using the Funqy `@Context` annotation.  The `CloudEvent` interface exposes information\n"
"about the triggering event."
msgstr ""

#. type: Title ==
#: _guides/funqy-knative-events.adoc
#, fuzzy, no-wrap
msgid "Maven"
msgstr "雯雯"

#: _guides/funqy-knative-events.adoc
msgid ""
"If you look at the link:{quickstarts-tree-url}/funqy-quickstarts/funqy-knative-events-quickstart/pom.xml[POM],\n"
"you'll see that it is a typical Quarkus POM that pulls in one Funqy dependency:"
msgstr ""

#. type: Title ==
#: _guides/funqy-knative-events.adoc
#, fuzzy, no-wrap
msgid "Dev mode and Testing"
msgstr "开发模式和测试"

#: _guides/funqy-knative-events.adoc
msgid ""
"Funqy Knative Events support dev mode and unit testing using RestAssured.  You can invoke on Funqy Knative Events functions\n"
"using the same invocation model as\n"
"xref:funqy-http.adoc[Funqy HTTP] using normal HTTP requests, or Cloud Event Binary mode, or Structured Mode.  All\n"
"invocation modes are supported at the same time."
msgstr ""

#: _guides/funqy-knative-events.adoc
msgid ""
"So, if you open up the unit test code in link:{quickstarts-tree-url}/funqy-quickstarts/funqy-knative-events-quickstart/src/test/java/org/acme/funqy/FunqyTest.java[FunqyTest.java]\n"
"you'll see that its simply using RestAssured to make HTTP invocations to test the functions."
msgstr ""

#. type: Plain text
#: _guides/funqy-knative-events.adoc
#, fuzzy
msgid "Funqy also works with Quarkus Dev mode!"
msgstr "Funqy还可以与Quarkus开发模式一起使用!"

#. type: Title ==
#: _guides/funqy-knative-events.adoc
#, fuzzy, no-wrap
msgid "Build the Project"
msgstr "构建项目"

#. type: Plain text
#: _guides/funqy-knative-events.adoc
#, fuzzy
msgid "First build the Java artifacts:"
msgstr "首先构建Java构件。"

#. type: Plain text
#: _guides/funqy-knative-events.adoc
#, fuzzy
msgid "Next, a docker image is required by Knative, so you'll need to build that next:"
msgstr "接下来，Knative需要一个docker镜像，所以接下来你需要构建这个镜像。"

#: _guides/funqy-knative-events.adoc
msgid ""
"Make sure to replace `yourAccountName` with your docker or quay account name when you run `docker build`.  The\n"
"Dockerfile is a standard Quarkus dockerfile.  No special Knative magic."
msgstr ""

#. type: Plain text
#: _guides/funqy-knative-events.adoc
#, fuzzy
msgid "Push your image to docker hub or quay"
msgstr "将你的镜像推送到docker hub或quay上"

#. type: Plain text
#: _guides/funqy-knative-events.adoc
#, fuzzy
msgid "Again, make sure to replace `yourAccountName` with your docker or quay account name when you run `docker push`."
msgstr "同样，确保在运行 `docker push` ，用你的docker或quay账户名替换 `yourAccountName` 。"

#. type: Title ==
#: _guides/funqy-knative-events.adoc
#, fuzzy, no-wrap
msgid "Deploy to Kubernetes/OpenShift"
msgstr "部署到Kubernetes/OpenShift上"

#: _guides/funqy-knative-events.adoc
msgid ""
"The first step is to set up the broker in our namespace.\n"
"Following is an example command from the Knative cli."
msgstr ""

#: _guides/funqy-knative-events.adoc
msgid ""
"The broker we have created is called `default`, this broker will receive the cloud events.\n"
"The broker is also referenced in the function YAML files."
msgstr ""

#: _guides/funqy-knative-events.adoc
msgid ""
"The second step is to define a Kubernetes/OpenShift service to point to the Docker image you created and pushed\n"
"during build. Take a look at link:{quickstarts-tree-url}/funqy-quickstarts/funqy-knative-events-quickstart/src/main/k8s/funqy-service.yaml[funqy-service.yaml]"
msgstr ""

#. type: Plain text
#: _guides/funqy-knative-events.adoc
#, fuzzy
msgid "This is a standard Kubernetes service definition YAML file."
msgstr "这是一个标准的Kubernetes服务定义YAML文件。"

#. type: Plain text
#: _guides/funqy-knative-events.adoc
#, fuzzy
msgid "Make sure you change the image URL to point to the image you built and pushed earlier!"
msgstr "请确保你改变图像的URL，以指向你先前建立和推送的图像"

#: _guides/funqy-knative-events.adoc
msgid ""
"For our quickstart, one Kubernetes service will contain all functions. There's no reason you couldn't break up this\n"
"quickstart into multiple different projects and deploy a service for each function.  For simplicity, and to show that you\n"
"don't have to have a deployment per function, the quickstart combines everything into one project, image, and service."
msgstr ""

#. type: Plain text
#: _guides/funqy-knative-events.adoc
#, fuzzy
msgid "Deploy the service:"
msgstr "部署服务。"

#: _guides/funqy-knative-events.adoc
msgid ""
"The next step is to deploy Knative Event triggers for each of the event types. As noted in the code section, each\n"
"Funqy function is mapped to a specific Cloud Event type.  You must create Knative Event triggers that map a Cloud Event\n"
"and route it to a specific Kubernetes service.  We have 4 different triggers."
msgstr ""

#. type: Plain text
#: _guides/funqy-knative-events.adoc
#, fuzzy
msgid "{quickstarts-tree-url}/funqy-quickstarts/funqy-knative-events-quickstart/src/main/k8s/defaultChain-trigger.yaml[defaultChain-trigger.yaml]"
msgstr "{quickstarts-tree-url}/funqy-quickstarts/funqy-knative-events-quickstart/src/main/k8s/defaultChain-trigger.yaml[defaultChain-trigger.yaml]"

#: _guides/funqy-knative-events.adoc
msgid ""
"The `spec:filter:attributes:type` maps a Cloud Event type to the Kubernetes service defined in `spec:subscriber:ref`.\n"
"When a Cloud Event is pushed to the Broker, it will trigger the spin up of the service mapped to that event."
msgstr ""

#. type: Plain text
#: _guides/funqy-knative-events.adoc
#, fuzzy
msgid "There's a trigger YAML file for each of our 4 Funqy functions.  Deploy them all:"
msgstr "我们的4个Funqy函数都有一个触发YAML文件。把它们都部署起来。"

#. type: Title ==
#: _guides/funqy-knative-events.adoc
#, fuzzy, no-wrap
msgid "Run the demo"
msgstr "运行演示"

#: _guides/funqy-knative-events.adoc
msgid ""
"You'll need two different terminal windows.  One to do a curl request to the Broker, the other to watch the pod log\n"
"files, so you can see the messages flowing through the Funqy function event chain."
msgstr ""

#: _guides/funqy-knative-events.adoc
msgid ""
"Make sure you have the `stern` tool installed.  See the Knative Tutorial setup for information on that.  Run stern\n"
"to look for logs outputted by our Funqy deployment"
msgstr ""

#. type: Plain text
#: _guides/funqy-knative-events.adoc
#, fuzzy
msgid "Open a separate terminal.  You'll first need to learn the URL of the broker.  Execute this command to find it."
msgstr "打开一个单独的终端。你首先需要了解经纪人的URL。执行这个命令来找到它。"

#. type: Plain text
#: _guides/funqy-knative-events.adoc
#, fuzzy
msgid "This will provide you a URL similar to e.g.: `http://broker-ingress.knative-eventing.svc.cluster.local/knativetutorial/default`. Remember this URL."
msgstr "这将为你提供一个类似的URL，例如。 `<a href=\"http://broker-ingress.knative-eventing.svc.cluster.local/knativetutorial/default\" class=\"bare\">http://broker-ingress.knative-eventing.svc.cluster.local/knativetutorial/default</a>` .记住这个URL。"

#: _guides/funqy-knative-events.adoc
msgid ""
"Next thing we need to do is ssh into our Kubernetes cluster so that we can send a curl request to our broker.\n"
"The following command will create a simple OS pod so we can curl into our functions."
msgstr ""

#. type: Plain text
#: _guides/funqy-knative-events.adoc
#, fuzzy
msgid "You might need to wait a couple of seconds until the curler pod comes up. Run the following to get bash access to the curler pod:"
msgstr "你可能需要等待几秒钟，直到curler pod出现。运行下面的程序来获得bash对curler pod的访问权。"

#. type: Plain text
#: _guides/funqy-knative-events.adoc
#, fuzzy
msgid "You will now be in a shell within the Kubernetes cluster.  Within the shell, execute this curl command , the broker address is an example and might differ based on your project or broker name."
msgstr "现在你将进入Kubernetes集群中的一个shell。在shell中，执行这个curl命令，经纪商地址是一个例子，可能会根据你的项目或经纪商名称而有所不同。"

#: _guides/funqy-knative-events.adoc
msgid ""
"This posts a Knative Event to the broker, which will trigger the `defaultChain` function.  As discussed earlier, the output\n"
"of `defaultChain` triggers an event that is posted to `configChain` which triggers an event posted to `annotatedChain` then\n"
"finally to the `lastChainLink` function.  You can see this flow in your `stern` window.  Something like this should\n"
"be outputted."
msgstr ""
