# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-17 15:04+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/funqy-knative-events.adoc:6
#, fuzzy, no-wrap
msgid "Funqy Knative Events Binding"
msgstr "Funqy Knative事件绑定"

#. type: Plain text
#: upstream/_guides/funqy-knative-events.adoc:14
#, fuzzy
msgid "Quarkus Funqy link:https://knative.dev/docs/eventing[Knative Events] builds off of the xref:funqy-http.adoc[Funqy HTTP] extension to allow you to route and process Knative Events within a Funqy function."
msgstr "Quarkus Funqy link:https://knative.dev/docs/eventing[Knative Events] 建立在 link:funqy-http.html[Funqy HTTP] 扩展的基础上，允许你在Funqy函数中路由和处理Knative事件。"

#. type: Plain text
#: upstream/_guides/funqy-knative-events.adoc:17
#, fuzzy
msgid "The guide walks through quickstart code to show you how you can deploy and invoke on Funqy functions with Knative Events."
msgstr "本指南通过快速入门代码向您展示如何使用Knative Events部署和调用Funqy函数。"

#. type: Title ==
#: upstream/_guides/funqy-knative-events.adoc:18
#, fuzzy, no-wrap
msgid "Prerequisites"
msgstr "先决条件"

#. type: Plain text
#: upstream/_guides/funqy-knative-events.adoc:24
#, fuzzy
msgid "Read about xref:funqy.adoc[Funqy Basics].  This is a short read!"
msgstr "阅读关于 link:funqy.html[Funqy基础知识] 。这是一个简短的阅读!"

#. type: Plain text
#: upstream/_guides/funqy-knative-events.adoc:25
#, fuzzy
msgid "Have gone through the link:https://redhat-developer-demos.github.io/knative-tutorial/knative-tutorial/index.html[Knative Tutorial], specifically link:https://redhat-developer-demos.github.io/knative-tutorial/knative-tutorial/eventing/eventing-trigger-broker.html[Brokers and Triggers]"
msgstr "已经通过了 link:https://redhat-developer-demos.github.io/knative-tutorial/knative-tutorial/index.html[Knative教程] ，特别是 link:https://redhat-developer-demos.github.io/knative-tutorial/knative-tutorial-eventing/eventing-trigger-broker.html[经纪人和触发器]"

#. type: Title ==
#: upstream/_guides/funqy-knative-events.adoc:26
#, fuzzy, no-wrap
msgid "Setting up Knative"
msgstr "设置Knative"

#. type: Plain text
#: upstream/_guides/funqy-knative-events.adoc:31
#, fuzzy
msgid "Setting up Knative locally in a Minikube environment is beyond the scope of this guide.  It is advised to follow https://redhat-developer-demos.github.io/knative-tutorial/knative-tutorial/index.html[this] Knative Tutorial put together by Red Hat.  It walks through how to set up Knative on Minikube or OpenShift in a local environment."
msgstr "在Minikube环境中本地设置Knative已经超出了本指南的范围。建议遵循红帽公司编写 link:https://redhat-developer-demos.github.io/knative-tutorial/knative-tutorial/index.html[的] Knative教程。它讲述了如何在本地环境中的Minikube或OpenShift上设置Knative。"

#. type: Plain text
#: upstream/_guides/funqy-knative-events.adoc:34
#, fuzzy
msgid "Specifically you should run the link:https://redhat-developer-demos.github.io/knative-tutorial/knative-tutorial/eventing/eventing-trigger-broker.html[Brokers and Triggers] tutorial as this guide requires that you can invoke on a Broker to trigger the quickstart code."
msgstr "具体来说，你应该运行 link:https://redhat-developer-demos.github.io/knative-tutorial/knative-tutorial-eventing/eventing-trigger-broker.html[Broker和Triggers] 教程，因为本指南要求你可以在Broker上调用来触发快速启动代码。"

#. type: Title ==
#: upstream/_guides/funqy-knative-events.adoc:35
#, fuzzy, no-wrap
msgid "Read about Cloud Events"
msgstr "阅读关于云计算活动"

#. type: Plain text
#: upstream/_guides/funqy-knative-events.adoc:38
#, fuzzy
msgid "The Cloud Event link:https://cloudevents.io/[specification] is a good read to give you an even greater understanding of Knative Events."
msgstr "云事件 link:https://cloudevents.io/[规范] 是一个很好的读物，让你对Knative事件有更多的了解。"

#. type: Title ==
#: upstream/_guides/funqy-knative-events.adoc:39
#, fuzzy, no-wrap
msgid "The Quickstart"
msgstr "快速入门"

#. type: Plain text
#: upstream/_guides/funqy-knative-events.adoc:42
#, fuzzy
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "克隆 Git 仓库。 `git clone {quickstarts-clone-url}` ，或者下载一个{quickstarts-archive-url}[存档]。"

#. type: Plain text
#: upstream/_guides/funqy-knative-events.adoc:44
#, fuzzy
msgid "The solution is located in the `funqy-knative-events-quickstart` {quickstarts-tree-url}/funqy-quickstarts/funqy-knative-events-quickstart[directory]."
msgstr "该解决方案位于 `funqy-knative-events-quickstart` {quickstarts-treeurl}/funqy-quickstarts/funqy-knative-events-quickstart[目录]中。"

#. type: Title ==
#: upstream/_guides/funqy-knative-events.adoc:45
#, fuzzy, no-wrap
msgid "The Quickstart Flow"
msgstr "快速启动流程"

#. type: Plain text
#: upstream/_guides/funqy-knative-events.adoc:51
#, fuzzy
msgid "The quickstart works by manually sending an HTTP request containing a Cloud Event to the Knative Broker using `curl`.  The Knative Broker receives the request and triggers the startup of the Funqy container built by the quickstart.  The event triggers the invocation of a chain of Funqy functions.  The output of one function triggers the invocation of another Funqy function."
msgstr "快速启动的工作方式是使用 `curl` ，手动向Knative Broker发送包含云事件的HTTP请求。Knative Broker收到请求后会触发快速启动所构建的Funqy容器的启动。该事件触发了一连串Funqy函数的调用。一个函数的输出会触发另一个Funqy函数的调用。"

#. type: Title ==
#: upstream/_guides/funqy-knative-events.adoc:52
#, fuzzy, no-wrap
msgid "Funqy and Cloud Events"
msgstr "Funqy和云活动"

#. type: Plain text
#: upstream/_guides/funqy-knative-events.adoc:59
#, fuzzy
msgid "When living within a Knative Events environment, Funqy functions are triggered by a specific Cloud Event type.  You can have multiple Funqy functions within a single application/deployment, but they must be triggered by a specific Cloud Event Type.  The exception to this rule is if there is only one Funqy function in the application.  In that case, the event is pushed to that function irregardless of the Cloud Event type."
msgstr "当生活在Knative Events环境中时，Funqy功能是由一个特定的云事件类型触发的。你可以在一个应用程序/部署中拥有多个Funqy函数，但它们必须由一个特定的云事件类型触发。这一规则的例外情况是，如果应用程序中只有一个Funqy函数。在这种情况下，无论云事件类型如何，事件都会被推送到该函数。"

#. type: Plain text
#: upstream/_guides/funqy-knative-events.adoc:63
#, fuzzy
msgid "Currently, Funqy can only consume JSON-based data.  It supports both Binary and Structured mode of execution, but the data component of the Cloud Event message must be JSON.  This JSON must also be marshallable to and from the Java parameters and return types of your functions."
msgstr "目前，Funqy只能消费基于JSON的数据。它同时支持二进制和结构化的执行模式，但云事件消息的数据部分必须是JSON。这个JSON也必须可以与你的函数的Java参数和返回类型进行marshall。"

#. type: Title ==
#: upstream/_guides/funqy-knative-events.adoc:64
#, fuzzy, no-wrap
msgid "The Code"
msgstr "准则"

#. type: Plain text
#: upstream/_guides/funqy-knative-events.adoc:68
#, fuzzy
msgid "Let's start looking at our quickstart code so that you can understand how Knative Events map to Funqy.  Open up {quickstarts-tree-url}/funqy-quickstarts/funqy-knative-events-quickstart/src/main/java/org/acme/funqy/SimpleFunctionChain.java[SimpleFunctionChain.java]"
msgstr "让我们开始看看我们的快速启动代码，这样你就能理解Knative Events如何映射到Funqy。打开{quickstarts-treeurl}/funqy-quickstarts/funqy-knative-events-quickstart/src/main/java/org/acme/funqy/SimpleFunctionChain.java[SimpleFunctionChain.java]"

#. type: Plain text
#: upstream/_guides/funqy-knative-events.adoc:70
#, fuzzy
msgid "The first function we'll look at is `defaultChain`."
msgstr "我们要看的第一个函数是 `defaultChain` 。"

#. type: delimited block -
#: upstream/_guides/funqy-knative-events.adoc:74
#: upstream/_guides/funqy-knative-events.adoc:97
#, no-wrap
msgid "import io.quarkus.funqy.Funq;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/funqy-knative-events.adoc:81
#, no-wrap
msgid ""
"public class SimpleFunctionChain {\n"
"    @Funq\n"
"    public String defaultChain(String input) {\n"
"        log.info(\"*** defaultChain ***\");\n"
"        return input + \"::\" + \"defaultChain\";\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/funqy-knative-events.adoc:87
#, fuzzy
msgid "As is, a Funqy function has a default Cloud Event mapping.  By default, the Cloud Event type must match the function name for the function to trigger.  If the function returns output, the response is converted into a Cloud Event and returned to the Broker to be routed to other triggers.  The default Cloud Event type for this response is the function name + `.output`.  The default Cloud Event source is the function name."
msgstr "就像现在，一个Funqy函数有一个默认的云事件映射。默认情况下，云事件类型必须与函数名称相匹配，才能触发该函数。如果函数返回输出，该响应将被转换为云事件，并返回到经纪人，以便被路由到其他触发器。该响应的默认云事件类型是函数名称+ `.output` 。默认的云事件来源是函数名称。"

#. type: Plain text
#: upstream/_guides/funqy-knative-events.adoc:90
#, fuzzy
msgid "So, for the `defaultChain` function, the Cloud Event type that triggers the function is `defaultChain`.  It generates a response that triggers a new Cloud Event whose type is `defaultChain.output` and the event source is `defaultChain`."
msgstr "因此，对于 `defaultChain` 函数，触发该函数的云事件类型是 `defaultChain` 。它产生一个响应，触发一个新的云事件，其类型是 `defaultChain.output` ，事件源是 `defaultChain` 。"

#. type: Plain text
#: upstream/_guides/funqy-knative-events.adoc:93
#, fuzzy
msgid "While the default mapping is simple, it might not always be feasible.  You can change this default mapping through configuration.  Let's look at the next function:"
msgstr "虽然默认映射很简单，但它可能并不总是可行的。你可以通过配置来改变这种默认的映射。让我们来看看下一个函数。"

#. type: delimited block -
#: upstream/_guides/funqy-knative-events.adoc:104
#, no-wrap
msgid ""
"public class SimpleFunctionChain {\n"
"    @Funq\n"
"    public String configChain(String input) {\n"
"        log.info(\"*** configChain ***\");\n"
"        return input + \"::\" + \"configChain\";\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/funqy-knative-events.adoc:107
#, fuzzy
msgid "The `configChain` function has its Cloud Event mapping changed by configuration within {quickstarts-tree-url}/funqy-quickstarts/funqy-knative-events-quickstart/src/main/resources/application.properties[application.properties]."
msgstr " `configChain` 函数的云事件映射通过{quickstarts-tree-url}/funqy-quickstarts/funqy-knative-events-quickstart/src/main/resources/application.properties[应用.属性]内的配置来改变。"

#. type: delimited block -
#: upstream/_guides/funqy-knative-events.adoc:114
#, no-wrap
msgid ""
"quarkus.funqy.knative-events.mapping.configChain.trigger=defaultChain.output\n"
"quarkus.funqy.knative-events.mapping.configChain.response-type=annotated\n"
"quarkus.funqy.knative-events.mapping.configChain.response-source=configChain\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/funqy-knative-events.adoc:118
#, fuzzy
msgid "In this case, the configuration maps the incoming Cloud Event type `defaultChain.output` to the `configChain` function.  The `configChain` function maps its response to the `annotated` Cloud Event type, and the Cloud Event source `configChain`."
msgstr "在这种情况下，配置将传入的云事件类型 `defaultChain.output` 映射到 `configChain` 函数。 `configChain` 函数将其响应映射到 `annotated` 云事件类型，以及云事件源 `configChain` 。"

#. type: Plain text
#: upstream/_guides/funqy-knative-events.adoc:120
#, fuzzy
msgid "`quarkus.funqy.knative-events.mapping.{function name}.trigger` sets the Cloud Event type that triggers a specific function. It is possible to use the special value `*` as a catch-all value. The function will in this case be used for all event types."
msgstr " `quarkus.funqy.knative-events.mapping.{function name}.trigger` 设置触发一个特定函数的云事件类型。可以使用特殊值 ，作为一个总括性的值。在这种情况下，该函数将被用于所有事件类型。 `*` "

#. type: Plain text
#: upstream/_guides/funqy-knative-events.adoc:121
#, fuzzy
msgid "`quarkus.funqy.knative-events.mapping.{function name}.response-type` sets the Cloud Event type of the response"
msgstr " `quarkus.funqy.knative-events.mapping.{function name}.response-type` 设置响应的云事件类型"

#. type: Plain text
#: upstream/_guides/funqy-knative-events.adoc:122
#, fuzzy
msgid "`quarkus.funqy.knative-events.mapping.{function name}.resource-source` sets the Cloud Event source of the response"
msgstr " `quarkus.funqy.knative-events.mapping.{function name}.resource-source` 设置响应的云事件来源"

#. type: Plain text
#: upstream/_guides/funqy-knative-events.adoc:125
#, fuzzy
msgid "The Funqy Knative Events extension also has annotations to do this Cloud Event mapping to your functions.  Take a look at the `annotatedChain` method"
msgstr "Funqy Knative Events扩展也有注解，可以为你的函数做这种云事件映射。看一下 `annotatedChain` 方法"

#. type: delimited block -
#: upstream/_guides/funqy-knative-events.adoc:130
#, no-wrap
msgid ""
"import io.quarkus.funqy.Funq;\n"
"import io.quarkus.funqy.knative.events.CloudEventMapping;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/funqy-knative-events.adoc:138
#, no-wrap
msgid ""
"public class SimpleFunctionChain {\n"
"    @Funq\n"
"    @CloudEventMapping(trigger = \"annotated\", responseSource = \"annotated\", responseType = \"lastChainLink\")\n"
"    public String annotatedChain(String input) {\n"
"        log.info(\"*** annotatedChain ***\");\n"
"        return input + \"::\" + \"annotatedChain\";\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/funqy-knative-events.adoc:144
#, fuzzy
msgid "If you use the `@CloudEventMapping` annotation on your function you can map the Cloud Event type trigger and the Cloud Event response.  In this example the `annotatedChain` function will be triggered by the `annotated` Cloud Event type and the response will be mapped to a `lastChainLink` type and `annotated` Cloud Event source."
msgstr "如果您在您的函数上使用 `@CloudEventMapping` 注释，您可以映射云事件类型触发和云事件响应。在这个例子中， `annotatedChain` 函数将被 `annotated` 云事件类型触发，响应将被映射到 `lastChainLink` 类型和 `annotated` 云事件源。"

#. type: Plain text
#: upstream/_guides/funqy-knative-events.adoc:147
#, fuzzy
msgid "So, if look at all the functions defined within `SimpleFunctionChain` you'll notice that one function triggers the next.  The last function that is triggered is `lastChainLink`."
msgstr "因此，如果看一下 `SimpleFunctionChain` 内定义的所有函数，你会发现一个函数会触发下一个函数。最后一个被触发的函数是 `lastChainLink` 。"

#. type: delimited block -
#: upstream/_guides/funqy-knative-events.adoc:152
#, no-wrap
msgid ""
"import io.quarkus.funqy.Context;\n"
"import io.quarkus.funqy.Funq;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/funqy-knative-events.adoc:160
#, no-wrap
msgid ""
"public class SimpleFunctionChain {\n"
"    @Funq\n"
"    public void lastChainLink(String input, @Context CloudEvent event) {\n"
"        log.info(\"*** lastChainLink ***\");\n"
"        log.info(input + \"::\" + \"lastChainLink\");\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/funqy-knative-events.adoc:164
#, fuzzy
msgid "There are two things to notice about this function.  One, it has no output.  Your functions are not required to return output.  Second, there is an additional `event` parameter to the function."
msgstr "关于这个函数有两点需要注意。第一，它没有输出。你的函数是不需要返回输出的。第二，该函数有一个额外的 `event` 参数。"

#. type: Plain text
#: upstream/_guides/funqy-knative-events.adoc:168
#, fuzzy
msgid "If you want to know additional information about the incoming Cloud Event, you can inject the `io.quarkus.funqy.knative.events.CloudEvent` interface using the Funqy `@Context` annotation.  The `CloudEvent` interface exposes information about the triggering event."
msgstr "如果你想知道关于传入的云事件的额外信息，你可以使用Funqy `@Context` 注解注入 `io.quarkus.funqy.knative.events.CloudEvent` 接口。 `CloudEvent` 接口暴露了关于触发事件的信息。"

#. type: delimited block -
#: upstream/_guides/funqy-knative-events.adoc:178
#, no-wrap
msgid ""
"public interface CloudEvent {\n"
"    String id();\n"
"    String specVersion();\n"
"    String source();\n"
"    String subject();\n"
"    OffsetDateTime time();\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/funqy-knative-events.adoc:180
#, fuzzy, no-wrap
msgid "Maven"
msgstr "雯雯"

#. type: Plain text
#: upstream/_guides/funqy-knative-events.adoc:184
#, fuzzy
msgid "If you look at the {quickstarts-tree-url}/funqy-quickstarts/funqy-knative-events-quickstart/pom.xml[POM], you'll see that it is a typical Quarkus POM that pulls in one Funqy dependency:"
msgstr "如果你看一下{quickstarts-tree-url}/funqy-quickstarts/funqy-knative-events-quickstart/pom.xml[POM]，你会发现它是一个典型的Quarkus POM，拉入一个Funqy依赖。"

#. type: delimited block -
#: upstream/_guides/funqy-knative-events.adoc:191
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-funqy-knative-events</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/funqy-knative-events.adoc:193
#, fuzzy, no-wrap
msgid "Dev mode and Testing"
msgstr "开发模式和测试"

#. type: Plain text
#: upstream/_guides/funqy-knative-events.adoc:199
#, fuzzy
msgid "Funqy Knative Events support dev mode and unit testing using RestAssured.  You can invoke on Funqy Knative Events functions using the same invocation model as xref:funqy-http.adoc[Funqy HTTP] using normal HTTP requests, or Cloud Event Binary mode, or Structured Mode.  All invocation modes are supported at the same time."
msgstr "Funqy Knative Events支持开发模式和使用RestAssured进行单元测试。你可以使用与 link:funqy-http.html[Funqy HTTP] 相同的调用模式，使用正常的HTTP请求，或云事件二进制模式，或结构化模式，对Funqy Knative Events函数进行调用。所有的调用模式都同时支持。"

#. type: Plain text
#: upstream/_guides/funqy-knative-events.adoc:202
#, fuzzy
msgid "So, if you open up the unit test code in {quickstarts-tree-url}/funqy-quickstarts/funqy-knative-events-quickstart/src/test/java/org/acme/funqy/FunqyTest.java[FunqyTest.java] you'll see that its simply using RestAssured to make HTTP invocations to test the functions."
msgstr "因此，如果你打开{quickstarts-tree-url}/funqy-quickstarts/funqy-knative-events-quickstart/src/test/java/org/acme/funqy/FunqyTest.java[FunqyTest.java]中的单元测试代码，你会看到它只是使用RestAssured进行HTTP调用来测试功能。"

#. type: Plain text
#: upstream/_guides/funqy-knative-events.adoc:204
#, fuzzy
msgid "Funqy also works with Quarkus Dev mode!"
msgstr "Funqy还可以与Quarkus开发模式一起使用!"

#. type: Title ==
#: upstream/_guides/funqy-knative-events.adoc:205
#, fuzzy, no-wrap
msgid "Build the Project"
msgstr "构建项目"

#. type: Plain text
#: upstream/_guides/funqy-knative-events.adoc:208
#, fuzzy
msgid "First build the Java artifacts:"
msgstr "首先构建Java构件。"

#. type: Plain text
#: upstream/_guides/funqy-knative-events.adoc:212
#, fuzzy
msgid "Next, a docker image is required by Knative, so you'll need to build that next:"
msgstr "接下来，Knative需要一个docker镜像，所以接下来你需要构建这个镜像。"

#. type: delimited block -
#: upstream/_guides/funqy-knative-events.adoc:216
#, no-wrap
msgid "docker build -f src/main/docker/Dockerfile.jvm -t yourAccountName/funqy-knative-events-quickstart .\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/funqy-knative-events.adoc:220
#, fuzzy
msgid "Make sure to replace `yourAccountName` with your docker or quay account name when you run `docker build`.  The Dockerfile is a standard Quarkus dockerfile.  No special Knative magic."
msgstr "当你运行 `docker build` ，请确保用你的docker或quay账户名替换 `yourAccountName` 。这个Docker文件是一个标准的Quarkus docker文件。没有特殊的Knative魔法。"

#. type: Plain text
#: upstream/_guides/funqy-knative-events.adoc:222
#, fuzzy
msgid "Push your image to docker hub or quay"
msgstr "将你的镜像推送到docker hub或quay上"

#. type: delimited block -
#: upstream/_guides/funqy-knative-events.adoc:226
#, no-wrap
msgid "docker push yourAccountName/funqy-knative-events-quickstart\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/funqy-knative-events.adoc:229
#, fuzzy
msgid "Again, make sure to replace `yourAccountName` with your docker or quay account name when you run `docker push`."
msgstr "同样，确保在运行 `docker push` ，用你的docker或quay账户名替换 `yourAccountName` 。"

#. type: Title ==
#: upstream/_guides/funqy-knative-events.adoc:230
#, fuzzy, no-wrap
msgid "Deploy to Kubernetes/OpenShift"
msgstr "部署到Kubernetes/OpenShift上"

#. type: Plain text
#: upstream/_guides/funqy-knative-events.adoc:234
#, fuzzy
msgid "The first step is to set up the broker in our namespace.  Following is an example command from the the Knative cli."
msgstr "第一步是在我们的命名空间中设置代理。下面是一个来自Knative cli的命令示例。"

#. type: delimited block -
#: upstream/_guides/funqy-knative-events.adoc:239
#, no-wrap
msgid ""
"kn broker create default \\\n"
"  --namespace knativetutorial\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/funqy-knative-events.adoc:243
#, fuzzy
msgid "The broker we have created is called `default`, this broker will receive the cloud events.  The broker is also referenced in the function YAML files."
msgstr "我们创建的代理被称为 `default` ，这个代理将接收云事件。在功能YAML文件中也引用了该代理。"

#. type: Plain text
#: upstream/_guides/funqy-knative-events.adoc:246
#, fuzzy
msgid "The second step is to define a Kubernetes/OpenShift service to point to the Docker image you created and pushed during build. Take a look at {quickstarts-tree-url}/funqy-quickstarts/funqy-knative-events-quickstart/src/main/k8s/funqy-service.yaml[funqy-service.yaml]"
msgstr "第二步是定义一个Kubernetes/OpenShift服务，指向你在构建过程中创建并推送的Docker镜像。看看{quickstarts-tree-url}/funqy-quickstarts/funqy-knative-events-quickstart/src/main/k8s/funqy-service.yaml[funqy-service.yaml] 。"

#. type: delimited block -
#: upstream/_guides/funqy-knative-events.adoc:262
#, no-wrap
msgid ""
"apiVersion: serving.knative.dev/v1\n"
"kind: Service\n"
"metadata:\n"
"  name: funqy-knative-events-quickstart\n"
"spec:\n"
"  template:\n"
"    metadata:\n"
"      name: funqy-knative-events-quickstart-v1\n"
"      annotations:\n"
"        autoscaling.knative.dev/target: \"1\"\n"
"    spec:\n"
"      containers:\n"
"        - image: docker.io/yourAccountName/funqy-knative-events-quickstart\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/funqy-knative-events.adoc:265
#, fuzzy
msgid "This is a standard Kubernetes service definition YAML file."
msgstr "这是一个标准的Kubernetes服务定义YAML文件。"

#. type: Plain text
#: upstream/_guides/funqy-knative-events.adoc:267
#, fuzzy
msgid "Make sure you change the image URL to point to the image you built and pushed earlier!"
msgstr "请确保你改变图像的URL，以指向你先前建立和推送的图像"

#. type: Plain text
#: upstream/_guides/funqy-knative-events.adoc:271
#, fuzzy
msgid "For our quickstart, one Kubernetes service will contain all functions. There's no reason you couldn't break up this quickstart into multiple different projects and deploy a service for each function.  For simplicity, and to show that you don't have to have a deployment per function, the quickstart combines everything into one project, image, and service."
msgstr "对于我们的快速启动，一个Kubernetes服务将包含所有功能。你没有理由不把这个快速启动分成多个不同的项目，为每个功能部署一个服务。为了简单起见，也为了说明你不必为每个功能进行部署，这个快速启动把所有东西都合并到一个项目、图像和服务中。"

#. type: Plain text
#: upstream/_guides/funqy-knative-events.adoc:273
#, fuzzy
msgid "Deploy the service:"
msgstr "部署服务。"

#. type: delimited block -
#: upstream/_guides/funqy-knative-events.adoc:277
#, no-wrap
msgid "kubectl apply -n knativetutorial -f src/main/k8s/funqy-service.yaml\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/funqy-knative-events.adoc:282
#, fuzzy
msgid "The next step is to deploy Knative Event triggers for each of the event types. As noted in the code section, each Funqy function is mapped to a specific Cloud Event type.  You must create Knative Event triggers that map a Cloud Event and route it to a specific Kubernetes service.  We have 4 different triggers."
msgstr "下一步是为每个事件类型部署Knative事件触发器。如代码部分所述，每个Funqy函数都被映射到一个特定的云事件类型。你必须创建Knative事件触发器，映射云事件并将其路由到特定的Kubernetes服务。我们有4个不同的触发器。"

#. type: Plain text
#: upstream/_guides/funqy-knative-events.adoc:285
#, fuzzy
msgid "{quickstarts-tree-url}/funqy-quickstarts/funqy-knative-events-quickstart/src/main/k8s/defaultChain-trigger.yaml[defaultChain-trigger.yaml]"
msgstr "{quickstarts-treeurl}/funqy-quickstarts/funqy-knative-events-quickstart/src/main/k8s/defaultChain-trigger.yaml[defaultChain-trigger.yaml]"

#. type: delimited block -
#: upstream/_guides/funqy-knative-events.adoc:301
#, no-wrap
msgid ""
"apiVersion: eventing.knative.dev/v1alpha1\n"
"kind: Trigger\n"
"metadata:\n"
"  name: defaultchain\n"
"spec:\n"
"  broker: default\n"
"  filter:\n"
"    attributes:\n"
"      type: defaultChain\n"
"  subscriber:\n"
"    ref:\n"
"      apiVersion: serving.knative.dev/v1\n"
"      kind: Service\n"
"      name: funqy-knative-events-quickstart\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/funqy-knative-events.adoc:305
#, fuzzy
msgid "The `spec:filter:attributes:type` maps a Cloud Event type to the Kubernetes service defined in `spec:subscriber:ref`.  When a Cloud Event is pushed to the Broker, it will trigger the spin up of the service mapped to that event."
msgstr " `spec:filter:attributes:type` 将云事件类型映射到 `spec:subscriber:ref` 中定义的Kubernetes服务。当一个云事件被推送到代理处时，它将触发映射到该事件的服务的旋转。"

#. type: Plain text
#: upstream/_guides/funqy-knative-events.adoc:307
#, fuzzy
msgid "There's a trigger YAML file for each of our 4 Funqy functions.  Deploy them all:"
msgstr "我们的4个Funqy函数都有一个触发YAML文件。把它们都部署起来。"

#. type: delimited block -
#: upstream/_guides/funqy-knative-events.adoc:314
#, no-wrap
msgid ""
"kubectl apply -n knativetutorial -f src/main/k8s/defaultChain-trigger.yaml\n"
"kubectl apply -n knativetutorial -f src/main/k8s/configChain-trigger.yaml\n"
"kubectl apply -n knativetutorial -f src/main/k8s/annotatedChain-trigger.yaml\n"
"kubectl apply -n knativetutorial -f src/main/k8s/lastChainLink-trigger.yaml\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/funqy-knative-events.adoc:316
#, fuzzy, no-wrap
msgid "Run the demo"
msgstr "运行演示"

#. type: Plain text
#: upstream/_guides/funqy-knative-events.adoc:320
#, fuzzy
msgid "You'll need two different terminal windows.  One to do a curl request to the Broker, the other to watch the pod log files so you can see the messages flowing through the Funqy function event chain."
msgstr "你将需要两个不同的终端窗口。一个用来向Broker做curl请求，另一个用来观察pod日志文件，这样你就可以看到流经Funqy函数事件链的消息。"

#. type: Plain text
#: upstream/_guides/funqy-knative-events.adoc:323
#, fuzzy
msgid "Make sure you have the `stern` tool installed.  See the Knative Tutorial setup for information on that.  Run stern to look for logs outputted by our Funqy deployment"
msgstr "确保你安装了 `stern` 工具。参见Knative教程的设置，了解相关信息。运行stern来寻找我们的Funqy部署所输出的日志"

#. type: delimited block -
#: upstream/_guides/funqy-knative-events.adoc:327
#, no-wrap
msgid "stern funq user-container\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/funqy-knative-events.adoc:330
#, fuzzy
msgid "Open a separate terminal.  You'll first need to learn the URL of the broker.  Execute this command to find it."
msgstr "打开一个单独的终端。你首先需要了解经纪人的URL。执行这个命令来找到它。"

#. type: delimited block -
#: upstream/_guides/funqy-knative-events.adoc:334
#, no-wrap
msgid "kubectl get broker default -o jsonpath='{.status.address.url}'\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/funqy-knative-events.adoc:337
#, fuzzy
msgid "This will provide you a URL similar to e.g.: `http://broker-ingress.knative-eventing.svc.cluster.local/knativetutorial/default`. Remember this URL."
msgstr "这将为你提供一个类似的URL，例如。 `<a href=\"http://broker-ingress.knative-eventing.svc.cluster.local/knativetutorial/default\" class=\"bare\">http://broker-ingress.knative-eventing.svc.cluster.local/knativetutorial/default</a>` .记住这个URL。"

#. type: Plain text
#: upstream/_guides/funqy-knative-events.adoc:340
#, fuzzy
msgid "Next thing we need to do is ssh into our Kubernetes cluster so that we can send a curl request to our broker.  Following command will create a simple OS pod so we can curl into our functions."
msgstr "接下来，我们需要做的是ssh进入我们的Kubernetes集群，这样我们就可以向我们的经纪人发送一个curl请求。下面的命令将创建一个简单的OS pod，这样我们就可以curl到我们的功能。"

#. type: delimited block -
#: upstream/_guides/funqy-knative-events.adoc:344
#, no-wrap
msgid "kubectl -n knativetutorial apply -f src/main/k8s/curler.yaml\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/funqy-knative-events.adoc:347
#, fuzzy
msgid "You might need to wait a couple of seconds until the curler pod comes up. Run the following to get bash access to the curler pod:"
msgstr "你可能需要等待几秒钟，直到curler pod出现。运行下面的程序来获得bash对curler pod的访问权。"

#. type: delimited block -
#: upstream/_guides/funqy-knative-events.adoc:351
#, no-wrap
msgid "kubectl -n knativetutorial exec -it curler -- /bin/bash\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/funqy-knative-events.adoc:355
#, fuzzy
msgid "You will now be in a shell within the Kubernetes cluster.  Within the shell, execute this curl command , the broker address is an example and might differ based on your project or broker name."
msgstr "现在你将进入Kubernetes集群中的一个shell。在shell中，执行这个curl命令，经纪商地址是一个例子，可能会根据你的项目或经纪商名称而有所不同。"

#. type: delimited block -
#: upstream/_guides/funqy-knative-events.adoc:366
#, no-wrap
msgid ""
"curl -v \"http://default-broker.knativetutorial.svc.cluster.local\" \\\n"
"-X POST \\\n"
"-H \"Ce-Id: 1234\" \\\n"
"-H \"Ce-Specversion: 1.0\" \\\n"
"-H \"Ce-Type: defaultChain\" \\\n"
"-H \"Ce-Source: curl\" \\\n"
"-H \"Content-Type: application/json\" \\\n"
"-d '\"Start\"'\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/funqy-knative-events.adoc:372
msgid "This posts a Knative Event to the broker, which will trigger the `defaultChain` function.  As discussed earlier, the output of `defaultChain` triggers an event that is posted to `configChain` which triggers an event posted to `annotatedChain` then finally to the `lastChainLink` function.  You can see this flow in your `stern` window.  Something like this should be outputted."
msgstr ""

#. type: delimited block -
#: upstream/_guides/funqy-knative-events.adoc:380
#, no-wrap
msgid ""
"funqy-knative-events-quickstart-v1-deployment-59bb88bcf4-9jwdx user-container 2020-05-12 13:44:02,256 INFO  [org.acm.fun.SimpleFunctionChain] (executor-thread-1) *** defaultChain ***\n"
"funqy-knative-events-quickstart-v1-deployment-59bb88bcf4-9jwdx user-container 2020-05-12 13:44:02,365 INFO  [org.acm.fun.SimpleFunctionChain] (executor-thread-2) *** configChain ***\n"
"funqy-knative-events-quickstart-v1-deployment-59bb88bcf4-9jwdx user-container 2020-05-12 13:44:02,394 INFO  [org.acm.fun.SimpleFunctionChain] (executor-thread-1) *** annotatedChain ***\n"
"funqy-knative-events-quickstart-v1-deployment-59bb88bcf4-9jwdx user-container 2020-05-12 13:44:02,466 INFO  [org.acm.fun.SimpleFunctionChain] (executor-thread-2) *** lastChainLink ***\n"
"funqy-knative-events-quickstart-v1-deployment-59bb88bcf4-9jwdx user-container 2020-05-12 13:44:02,467 INFO  [org.acm.fun.SimpleFunctionChain] (executor-thread-2) Start::defaultChain::configChain::annotatedChain::lastChainLink\n"
msgstr ""
