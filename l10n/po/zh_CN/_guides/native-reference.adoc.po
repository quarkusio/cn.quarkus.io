# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-12-12 16:07+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title =
#: _guides/native-reference.adoc
#, fuzzy, no-wrap
msgid "Native Reference Guide"
msgstr "本地参考指南"

#: _guides/native-reference.adoc
msgid ""
"This guide is a companion to the\n"
"xref:building-native-image.adoc[Building a Native Executable],\n"
"xref:native-and-ssl.adoc[Using SSL With Native Images],\n"
"and xref:writing-native-applications-tips.adoc[Writing Native Applications],\n"
"guides.\n"
"It explores advanced topics that help users diagnose issues,\n"
"increase the reliability and improve the runtime performance of native executables.\n"
"These are the high level sections to be found in this guide:"
msgstr ""

#. type: Plain text
#: _guides/native-reference.adoc
#, fuzzy
msgid "xref:native-memory-management[Native Memory Management]"
msgstr "link:#native-memory-management[本地内存管理]"

#. type: Plain text
#: _guides/native-reference.adoc
#, fuzzy
msgid "xref:inspecting-and-debugging[Inspecting and Debugging Native Executables]"
msgstr "link:#inspecting-and-debugging[检查和调试本地可执行文件]"

#. type: Plain text
#: _guides/native-reference.adoc
#, fuzzy
msgid "xref:native-faq[Frequently Asked Questions]"
msgstr "常见问题"

#. type: Title ==
#: _guides/native-reference.adoc
#, fuzzy, no-wrap
msgid "Native Memory Management"
msgstr "本地内存管理"

#. type: Plain text
#: _guides/native-reference.adoc
msgid "Memory management for Quarkus native executables is enabled by GraalVM’s SubstrateVM runtime system."
msgstr ""

#. type: Plain text
#: _guides/native-reference.adoc
#, fuzzy
msgid "For detailed explanations about the memory management component in GraalVM, see the link:https://www.graalvm.org/{graalvm-docs-version}/reference-manual/native-image/optimizations-and-performance/MemoryManagement[GraalVM Memory Management] guide."
msgstr "Quarkus本地可执行文件的内存管理由GraalVM的SubstrateVM运行时系统启用。GraalVM中的内存管理组件在 link:https://www.graalvm.org/{graalvm-version}/reference-manual/native-image/optimizations-and-performance/MemoryManagement[这里] 有详细解释。本指南补充了GraalVM网站上的信息，特别是与Quarkus应用程序相关的进一步观察。"

#. type: Plain text
#: _guides/native-reference.adoc
msgid "This guide complements the information available in the GraalVM website with further observations particularly relevant to Quarkus applications."
msgstr ""

#. type: Title ===
#: _guides/native-reference.adoc
#, fuzzy, no-wrap
msgid "Garbage Collectors"
msgstr "垃圾收集器"

#. type: Plain text
#: _guides/native-reference.adoc
#, fuzzy
msgid "The garbage collectors available for Quarkus users are currently Serial GC and Epsilon GC."
msgstr "目前Quarkus用户可用的垃圾收集器是Serial GC和Epsilon GC。"

#. type: Title ====
#: _guides/native-reference.adoc
#, fuzzy, no-wrap
msgid "Serial GC"
msgstr "串行GC"

#: _guides/native-reference.adoc
msgid ""
"Serial GC, the default option in GraalVM and Quarkus, is a single-threaded non-concurrent GC, just like HotSpot’s Serial GC.\n"
"The implementation in GraalVM however is different from the HotSpot one,\n"
"and there can be significant differences in the runtime behavior."
msgstr ""

#: _guides/native-reference.adoc
msgid ""
"One of the key differences between HotSpot’s Serial GC and GraalVM’s Serial GC is the way they perform full GC cycles.\n"
"In HotSpot the algorithm used is mark-sweep-compact whereas in GraalVM it is mark-copy.\n"
"Both need to traverse all live objects,\n"
"but in mark-copy this traversal is also used to copy live objects to a secondary space or semi-space.\n"
"As objects are copied from one semi-space to another they’re also compacted.\n"
"In mark-sweep-compact, the compacting requires a second pass on the live objects.\n"
"This makes full GCs in mark-copy more time efficient (in terms of time spent in each GC cycle) than mark-sweep-compact.\n"
"The tradeoff mark-copy makes in order to make individual full GC cycles shorter is space.\n"
"The use of semi-spaces means that for an application to maintain the same GC performance that mark-sweep achieves (in terms of allocated MB per second),\n"
"it requires double the amount of memory."
msgstr ""

#. type: Title =====
#: _guides/native-reference.adoc
#, fuzzy, no-wrap
msgid "GC Collection Policy"
msgstr "采集政策"

#. type: Plain text
#: _guides/native-reference.adoc
#, fuzzy
msgid "GraalVM's Serial GC implementation offers a choice between two different collection policies, the default is called \"adaptive\" and the alternative is called \"space/time\"."
msgstr "GraalVM的串行GC实现提供了两种不同的收集策略的选择，默认的是 \"自适应\"，另一种是 \"空间/时间\"。"

#: _guides/native-reference.adoc
msgid ""
"The “adaptive” collection policy is based on HotSpot's ParallelGC adaptive size policy.\n"
"The main difference with HotSpot is GraalVM's focus on memory footprint.\n"
"This means that GraalVM’s adaptive GC policy tries to aggressively trigger GCs in order to keep memory consumption down."
msgstr ""

#: _guides/native-reference.adoc
msgid ""
"Up to version 2.13, Quarkus used the “space/time” GC collection policy by default,\n"
"but starting with version 2.14, it switched to using the “adaptive” policy instead.\n"
"The reason why Quarkus initially chose to use \"space/time\" is because at that time it had considerable performance improvements over \"adaptive\".\n"
"Recent performance experiments, however, indicate that the \"space/time\" policy can result in worse out-of-the-box experience compared to the \"adaptive\" policy,\n"
"while at the same time the benefits it used to offer have diminished considerably after improvements made to the \"adaptive\" policy.\n"
"As a result, the \"adaptive\" policy appears to be the best option for most, if not all, Quarkus applications.\n"
"Full details on this switch can be read in link:https://github.com/quarkusio/quarkus/issues/28267[this issue]."
msgstr ""

#: _guides/native-reference.adoc
msgid ""
"It is still possible to change the GC collection policy using GraalVM’s `-H:InitialCollectionPolicy` flag.\n"
"Switching to the \"space/time\" policy can be done by passing the following via command line:"
msgstr ""

#. type: Plain text
#: _guides/native-reference.adoc
#, fuzzy
msgid "Or adding this to the `application.properties` file:"
msgstr "或将此添加到 `application.properties` 文件中。"

#: _guides/native-reference.adoc
msgid ""
"Escaping the `$` character is required to configure the \"space/time\" GC collection policy if passing via command line in Bash.\n"
"Other command line environments might have similar requirements."
msgstr ""

#. type: Title ====
#: _guides/native-reference.adoc
#, fuzzy, no-wrap
msgid "Epsilon GC"
msgstr "怡思乐GC"

#: _guides/native-reference.adoc
msgid ""
"Epsilon GC is a no-op garbage collector which does not do any memory reclamation.\n"
"From a Quarkus perspective, some of the most relevant use cases for this garbage collector are extremely short-lived jobs, e.g. serverless functions.\n"
"To build Quarkus native with epsilon GC, pass the following argument at build time:"
msgstr ""

#. type: Title ===
#: _guides/native-reference.adoc
#, fuzzy, no-wrap
msgid "Memory Management Options"
msgstr "内存管理选项"

#: _guides/native-reference.adoc
msgid ""
"For information about options to control maximum heap size, young space, and other typical use cases found in the JVM, see the link:https://www.graalvm.org/{graalvm-docs-version}/reference-manual/native-image/optimizations-and-performance/MemoryManagement[GraalVM Memory Management] guide.\n"
"Setting the maximum heap size, either as a percentage or an explicit value, is generally recommended."
msgstr ""

#. type: Title ===
#: _guides/native-reference.adoc
#, fuzzy, no-wrap
msgid "GC Logging"
msgstr "GC记录"

#: _guides/native-reference.adoc
msgid ""
"Multiple options exist to print information about garbage collection cycles, depending on the level of detail required.\n"
"The minimum detail is provided `-XX:+PrintGC`, which prints a message for each GC cycle that occurs:"
msgstr ""

#: _guides/native-reference.adoc
msgid ""
"When you combine this option with `-XX:+VerboseGC` you still get a message per GC cycle,\n"
"but it contains extra information.\n"
"Also, adding this option shows the sizing decisions made by the GC algorithm at startup:"
msgstr ""

#. type: Plain text
#: _guides/native-reference.adoc
#, fuzzy
msgid "Beyond these two options, `-XX:+PrintHeapShape` and `-XX:+TraceHeapChunks` provide even lower level details about memory chunks on top of which the different memory regions are constructed."
msgstr "在这两个选项之外， `-XX:+PrintHeapShape` 和 `-XX:+TraceHeapChunks` 提供了关于内存块的更低层次的细节，不同的内存区域在此基础上被构建。"

#. type: Plain text
#: _guides/native-reference.adoc
#, fuzzy
msgid "The most up-to-date information on GC logging flags can be obtained by printing the list of flags that can be passed to native executables:"
msgstr "关于GC日志标志的最新信息，可以通过打印可传递给本地可执行文件的标志列表来获得。"

#. type: Title ===
#: _guides/native-reference.adoc
#, fuzzy, no-wrap
msgid "Resident Set Size (RSS)"
msgstr "驻地集尺寸（RSS）"

#: _guides/native-reference.adoc
msgid ""
"As described in the\n"
"xref:performance-measure.adoc[Measuring Performance guide],\n"
"the footprint of Quarkus applications is measured using the resident set size (RSS).\n"
"This is also applicable to native applications,\n"
"but the runtime engine that manages the footprint in this case is built in the native executable itself rather than the JVM."
msgstr ""

#: _guides/native-reference.adoc
msgid ""
"The reporting techniques specified in the\n"
"xref:performance-measure.adoc[Measuring Performance guide]\n"
"are applicable to native applications too,\n"
"but what causes the RSS to be higher or lower is specific to how the generated native executables work."
msgstr ""

#: _guides/native-reference.adoc
msgid ""
"When the RSS is higher in one native version of the application versus another,\n"
"the following checks should be carried out first:"
msgstr ""

#: _guides/native-reference.adoc
msgid ""
"Check the xref:native-reports[native build time reports]\n"
"and see if there are big discrepancies in the number of used packages, used classes or used methods.\n"
"A bigger universe will result in bigger memory footprint."
msgstr ""

#: _guides/native-reference.adoc
msgid ""
"Check the size of the binary for differences.\n"
"Using `readelf` you can observe the size of different sections and compare them.\n"
"The `.text` section where code lives,\n"
"and the `.svm_heap` section where heap produced at build time lives,\n"
"are particularly interesting."
msgstr ""

#. type: Plain text
#: _guides/native-reference.adoc
#, fuzzy
msgid "Generate xref:heap-dumps[heap dumps] and inspect them with tools such as VisualVM or Eclipse MAT."
msgstr "生成 link:#heap-dumps[堆转储] 并使用VisualVM或Eclipse MAT等工具进行检查。"

#: _guides/native-reference.adoc
msgid ""
"Often profiling, instrumenting or tracing applications is the best way to figure out how things work.\n"
"In the case of RSS and native applications,\n"
"the techniques that Brendan Gregg explains in the\n"
"https://www.brendangregg.com/FlameGraphs/memoryflamegraphs.html[\"Memory Leak (and Growth) Flame Graphs\"] guide are particularly useful.\n"
"This section will apply the information in that article to show how to use `perf` and\n"
"https://github.com/iovisor/bcc[bcc/eBPF]\n"
"to understand what causes Quarkus native executables to consume memory on startup."
msgstr ""

#. type: Title ====
#: _guides/native-reference.adoc
#, fuzzy, no-wrap
msgid "Perf"
msgstr "灌胶"

#: _guides/native-reference.adoc
msgid ""
"`perf` works in older Linux systems, whereas eBPF requires a newer Linux kernel.\n"
"The overhead of `perf` is higher than eBPF,\n"
"but it can understand stack traces generated with DWARF debug symbols, which eBPF can't."
msgstr ""

#: _guides/native-reference.adoc
msgid ""
"In the context of GraalVM,\n"
"DWARF stack traces contain more detail and are easier to understand than those generated with frame pointers.\n"
"As first step, build a Quarkus native executable with debug info enabled and a couple of extra flags.\n"
"One flag to disable optimizations,\n"
"and another to avoid inlined methods being omitted from the stack traces.\n"
"These two flags have been added to obtain stack traces that contain as much information as possible."
msgstr ""

#: _guides/native-reference.adoc
msgid ""
"Disabling optimizations makes it easier to learn how to use `perf`\n"
"and get as detailed stack traces as possible,\n"
"because it shows more info about what gets called where.\n"
"However, doing so might lead to more allocations happening which would not happen if optimizations would have been applied.\n"
"In other words, passing in `-O0` will change the allocation pattens for many applications,\n"
"because it disables optimizations such as escape analysis or dead code elimination.\n"
"To properly assess the allocations made by an application deployed in production,\n"
"run with default optimizations (`-O2`).\n"
"With default optimizations the stack traces obtained with `perf` maybe be harder to decipher."
msgstr ""

#. type: Plain text
#: _guides/native-reference.adoc
#, fuzzy
msgid "Let's measure how much RSS a Quarkus native executable takes on startup on this particular environment:"
msgstr "让我们测量一下Quarkus本地可执行文件在这个特定环境下启动时需要多少RSS："

#: _guides/native-reference.adoc
msgid ""
"How come this Quarkus native executable consumes ~35MB RSS on startup?\n"
"To get an understanding of this number, this section will use `perf` to trace calls to `syscalls:sys_enter_mmap`.\n"
"Assuming the default link:https://www.graalvm.org/{graalvm-docs-version}/reference-manual/native-image/optimizations-and-performance/MemoryManagement/#serial-garbage-collector[GraalVM Serial Garbage Collector] is in use, this system call is particularly interesting for native executables generated by GraalVM's `native-image` because of how it allocates heap.\n"
"In native executables generated by GraalVM's `native-image`, the heap is allocated using either aligned or unaligned heap chunks.\n"
"All non-array objects get allocated in thread local aligned chunks.\n"
"Each of these are 1MB in size by default.\n"
"For arrays, if they are bigger than 1/8 of the aligned chunk size,\n"
"they will be allocated in unaligned heap chunks which have a size dependant on the object itself.\n"
"The very first time a thread allocates an object or small array,\n"
"it will request an aligned heap chunk that it will use exclusively until it has run out of space in that chunk,\n"
"in which case it will request another aligned heap chunk.\n"
"So by tracing these system calls,\n"
"the code paths that end up requesting new aligned or unaligned heap chunks will be recorded.\n"
"Next, run the Quarkus native executable through `perf record` tracing the `mmap` system call:"
msgstr ""

#: _guides/native-reference.adoc
msgid ""
"The size of the aligned heap chunks can be changed during native build time.\n"
"A custom value (in number of bytes) can be passed via the `-H:AlignedHeapChunkSize` flag.\n"
"One caveat is that this value needs to be multiple of 4096 (4KB)."
msgstr ""

#. type: Plain text
#: _guides/native-reference.adoc
#, fuzzy
msgid "Once the startup completes, stop the process and generate the stacks:"
msgstr "一旦启动完成，停止进程并生成堆栈："

#: _guides/native-reference.adoc
msgid ""
"As a final step, generate a\n"
"https://github.com/brendangregg/FlameGraph[flamegraph]\n"
"with the generated stacks:"
msgstr ""

#. type: Plain text
#: _guides/native-reference.adoc
#, fuzzy
msgid "The flamegraph should look similar to this:"
msgstr "火焰图应该与此相似："

#. type: Plain text
#: _guides/native-reference.adoc
#, fuzzy
msgid "There are several things of interest to notice there:"
msgstr "那里有几件值得注意的事情："

#: _guides/native-reference.adoc
msgid ""
"First, the stack traces that contain method calls to `com.oracle.svm.core.genscavenge.ThreadLocalAllocation` are related to aligned or unaligned heap chunk allocations explained above.\n"
"As noted earlier,\n"
"for the majority of allocations these chunks will be 1MB by default,\n"
"so they're interesting because each allocated chunk has a considerable effect on the RSS consumption."
msgstr ""

#: _guides/native-reference.adoc
msgid ""
"Second, of the thread allocation stacks,\n"
"the ones under `start_thread` are particularly revealing.\n"
"In this environment, taking into account the `-Xmx` value passed in,\n"
"Quarkus creates 12 event loop threads.\n"
"Aside from those, there are 6 extra threads.\n"
"The names of all those 18 threads exceed 16 characters.\n"
"This can be observed via the `ps` command:"
msgstr ""

#: _guides/native-reference.adoc
msgid ""
"The very first allocation that all these threads do is taking the thread name and trimming it so that it can fall within the character limit enforced by kernels.\n"
"For each of those allocations,\n"
"there are 2 `mmap` calls,\n"
"one to reserve the memory and the other to commit it.\n"
"When recording `syscalls:sys_enter_mmap` system call,\n"
"the `perf` implementation tracks calls to `__GI___mmap64`.\n"
"But this glibc `__GI___mmap64` implementation makes another call into `__GI___mmap64`:"
msgstr ""

#: _guides/native-reference.adoc
msgid ""
"Setting `set scheduler-locking step` when the Quarkus native executable is running through `gdb` makes it easier to debug multi-threaded applications.\n"
"It optimizes for single-stepping by stopping other threads from \"seizing the prompt\" by preempting the current thread is being stepped through."
msgstr ""

#: _guides/native-reference.adoc
msgid ""
"This is how the above flamegraph shows a total of 72 calls to `__GI___mmap64` for the thread name abbreviation stack trace,\n"
"given that Quarkus native executable runs 18 threads."
msgstr ""

#: _guides/native-reference.adoc
msgid ""
"A third, and final observation,\n"
"is that if you capture the `syscalls:sys_enter_munmmap` event,\n"
"you might observe that some allocations also result in calls to `munmap`.\n"
"When calculating the size to reserve,\n"
"the requested size to allocate can be rounded up to the page size.\n"
"The maintain alignment,\n"
"1MB in case of aligned chunks or 1 byte for unaligned chunks,\n"
"some of the reserved memory might be unreserved.\n"
"That is where these `munmap` calls would come from."
msgstr ""

#: _guides/native-reference.adoc
msgid ""
"Just by looking at the flamegraph and counting the number of `mmap` calls that originate in thread local allocations,\n"
"an approximate estimation can be made on the RSS a Quarkus native executable uses on startup.\n"
"This estimation can't be fully precise because for unaligned heap chunks, the stack trace doesn't record the size of the chunk.\n"
"Also, if the additional build args are removed,\n"
"inlining optimizations might obscure the type of array allocation chunk requested,\n"
"so it might not be possible to decipher if the allocation is for an aligned or unaligned chunk."
msgstr ""

#. type: Title ====
#: _guides/native-reference.adoc
#, fuzzy, no-wrap
msgid "bcc/eBPF"
msgstr "bcc/eBPF"

#: _guides/native-reference.adoc
msgid ""
"A version of\n"
"https://github.com/iovisor/bcc[bcc]/\n"
"https://ebpf.io/[eBPF]\n"
"that can do stack traces is only available from Linux kernel 4.8 onwards.\n"
"It can do in-kernel summaries,\n"
"which makes it more efficient and has lower overhead.\n"
"Unfortunately it doesn't understand DWARF debug symbols,\n"
"so the information obtained might be harder to read and contain less detail."
msgstr ""

#: _guides/native-reference.adoc
msgid ""
"bcc/eBPF is very extensible so it's easier to tailor make scripts to track specific metrics.\n"
"The `bcc` project contains a `stackcount` program that can be used to count stack traces in similar way to what `perf` did in the previous section.\n"
"But in some cases, it might be more useful to have other metrics other than number of calls to a system call.\n"
"`malloc` is one such example.\n"
"The number of `malloc` calls is not so important,\n"
"but rather the size of the allocations.\n"
"So rather than having a flamegraph showing sample counts,\n"
"a flamegraph can be generated that shows bytes allocated."
msgstr ""

#: _guides/native-reference.adoc
msgid ""
"Aside from `mmap`,\n"
"`malloc` system calls are also present in native executables generated by GraalVM.\n"
"Let's put bcc/eBPF in action to generate a flamegraph of bytes allocated using `malloc`."
msgstr ""

#: _guides/native-reference.adoc
msgid ""
"To do this,\n"
"first re-generate a Quarkus native executable removing debug info,\n"
"which bcc/eBPF does not understand,\n"
"and instead use frame pointer with local symbols to get the stack traces:"
msgstr ""

#: _guides/native-reference.adoc
msgid ""
"The link:mallocstacks.py[mallocstacks.py]\n"
"bcc/eBPF script will be used to capture the `malloc` stacktraces with their allocated size.\n"
"This script, and other typical bcc/eBPF scripts (e.g. `stackcount`), need to be given a process ID (PID).\n"
"This makes a bit tricky when you want to trace startup,\n"
"but you can use `gdb`\n"
"(even if you haven't enabled debug info)\n"
"to get around this obstacle because it allows you to stop the application at the first instruction.\n"
"Let's start by running the native executable via `gdb`:"
msgstr ""

#. type: Plain text
#: _guides/native-reference.adoc
#, fuzzy
msgid "`starti` is a `gdb` command that sets a temporary breakpoint at the very first instruction of the program's execution."
msgstr " `starti` 是一条 ，在程序执行的第一条指令上设置一个临时断点。 `gdb` "

#: _guides/native-reference.adoc
msgid ""
"Next invoke the bcc/eBPF script giving it the PID of the Quarkus process,\n"
"so that it can track the `malloc` calls,\n"
"capture stack traces and dump them to a file for post-processing:"
msgstr ""

#. type: Plain text
#: _guides/native-reference.adoc
#, fuzzy
msgid "Then go back to the `gdb` shell and instruct it to continue the startup procedure after hitting the first instruction:"
msgstr "然后回到 `gdb` shell，指示它在点击第一个指令后继续启动程序："

#: _guides/native-reference.adoc
msgid ""
"Once the startup has complete,\n"
"press `Ctrl-C` on the `stackcount` shell."
msgstr ""

#: _guides/native-reference.adoc
msgid ""
"Then process the stacks file as a flamegraph.\n"
"Note that the stacks generated by this script are already collapsed,\n"
"so the flamegraph can be generated just like this:"
msgstr ""

#. type: Plain text
#: _guides/native-reference.adoc
#, fuzzy
msgid "The flamegraph produced should look something like this:"
msgstr "产生的火焰图应该看起来像这样："

#: _guides/native-reference.adoc
msgid ""
"This shows that most of the memory requested using `malloc` comes from epoll in Java NIO,\n"
"but the overall amount allocated via `malloc` is barely 268KB.\n"
"This amount of 274,269 bytes can be observed by hovering on top of `all` at the bottom of flamegraph\n"
"(you might need to ask the browser to open the flamegraph in a different tab or window to observe this).\n"
"This is very small compared with the amount allocated for the heap with `mmap`."
msgstr ""

#: _guides/native-reference.adoc
msgid ""
"Finally, just a brief mention about other bcc/eBPF commands,\n"
"and how to transform them into flamegraphs."
msgstr ""

#: _guides/native-reference.adoc
msgid ""
"Stacks produced by `stackcount` need to be collapsed before they can be transformed into flamegraphs.\n"
"For example:"
msgstr ""

#. type: Title ==
#: _guides/native-reference.adoc
#, fuzzy, no-wrap
msgid "Inspecting and Debugging Native Executables"
msgstr "检查本地可执行文件"

#. type: Plain text
#: _guides/native-reference.adoc
#, fuzzy
msgid "This debugging guide provides further details on debugging issues in Quarkus native executables that might arise during development or production."
msgstr "本调试指南提供了关于调试Quarkus本地可执行文件中可能在开发或生产中出现的问题的进一步细节。"

#: _guides/native-reference.adoc
msgid ""
"It takes as input the application developed in the xref:getting-started.adoc[Getting Started Guide].\n"
"You can find instructions on how to quickly set up this application in this guide."
msgstr ""

#. type: Title ===
#: _guides/native-reference.adoc
#, fuzzy, no-wrap
msgid "Requirements and Assumptions"
msgstr "要求和假设"

#. type: Plain text
#: _guides/native-reference.adoc
#, fuzzy
msgid "This debugging guide has the following requirements:"
msgstr "本指南有以下要求。"

#. type: Plain text
#: _guides/native-reference.adoc
#, fuzzy
msgid "JDK 11 installed with `JAVA_HOME` configured appropriately"
msgstr "安装了JDK 11，并适当配置了 `JAVA_HOME` "

#. type: Plain text
#: _guides/native-reference.adoc
#, fuzzy
msgid "Apache Maven {maven-version}"
msgstr "Apache Maven {maven-version}"

#. type: Plain text
#: _guides/native-reference.adoc
#, fuzzy
msgid "A working container runtime (Docker, podman)"
msgstr "一个工作的容器运行时间（Docker，podman）。"

#: _guides/native-reference.adoc
msgid ""
"This guide builds and executes Quarkus native executables within a Linux environment.\n"
"To offer a homogeneous experience across all environments,\n"
"the guide relies on a container runtime environment to build and run the native executables.\n"
"The instructions below use Docker as example, but very similar commands should work on alternative container runtimes, e.g. podman."
msgstr ""

#: _guides/native-reference.adoc
msgid ""
"Building native executables is an expensive process,\n"
"so make sure the container runtime has enough CPU and memory to do this.\n"
"A minimum of 4 CPUs and 4GB of memory is required."
msgstr ""

#: _guides/native-reference.adoc
msgid ""
"Finally, this guide assumes the use of the link:https://github.com/graalvm/mandrel[Mandrel distribution] of GraalVM for building native executables,\n"
"and these are built within a container so there is no need for installing Mandrel on the host."
msgstr ""

#. type: Title ===
#: _guides/native-reference.adoc
#, fuzzy, no-wrap
msgid "Bootstrapping the project"
msgstr "引导项目"

#: _guides/native-reference.adoc
msgid ""
"Start by creating a new Quarkus project.\n"
"Open a terminal and run the following command:"
msgstr ""

#. type: Plain text
#: _guides/native-reference.adoc
#, fuzzy
msgid "For Linux & MacOS users"
msgstr "针对Linux和MacOS用户"

#. type: Plain text
#: _guides/native-reference.adoc
#, fuzzy
msgid "For Windows users"
msgstr "对于Windows用户"

#. type: Plain text
#: _guides/native-reference.adoc
#, fuzzy
msgid "If using cmd , (don't use backward slash `\\` and put everything on the same line)"
msgstr "如果使用cmd ，（不要使用反斜线 `\\` ，并将所有内容放在同一行）"

#. type: Plain text
#: _guides/native-reference.adoc
#, fuzzy
msgid "If using Powershell , wrap `-D` parameters in double quotes e.g. `\"-DprojectArtifactId=debugging-native\"`"
msgstr "如果使用Powershell，用双引号包住 `-D` 参数，例如： `\"-DprojectArtifactId=debugging-native\"` "

#. type: Title ===
#: _guides/native-reference.adoc
#, fuzzy, no-wrap
msgid "Configure Quarkus properties"
msgstr "配置Quarkus属性"

#: _guides/native-reference.adoc
msgid ""
"Some Quarkus configuration options will be used constantly throughout this debugging guide,\n"
"so to help declutter command line invocations,\n"
"it's recommended to add these options to the `application.properties` file.\n"
"So, go ahead and add the following options to that file:"
msgstr ""

#: _guides/native-reference.adoc
msgid ""
"Starting with 22.3, Mandrel does not provide a `-java11` version anymore.\n"
"Note, however,  that this doesn't mean that you may no longer produce native executables with Mandrel for Java 11 projects.\n"
"You can still compile your Java 11 projects using OpenJDK 11 and produce native executables from the resulting Java 11 bytecode using the `-java17` Mandrel builder images."
msgstr ""

#. type: Title ===
#: _guides/native-reference.adoc
#, fuzzy, no-wrap
msgid "First Debugging Steps"
msgstr "第一个调试步骤"

#. type: Plain text
#: _guides/native-reference.adoc
#, fuzzy
msgid "As a first step, change to the project directory and build the native executable for the application:"
msgstr "作为第一步，改变到项目目录，建立应用程序的本地可执行文件。"

#. type: Plain text
#: _guides/native-reference.adoc
#, fuzzy
msgid "Run the application to verify it works as expected. In one terminal:"
msgstr "运行该应用程序，以验证它是否按预期工作。在一个终端中"

#. type: Plain text
#: _guides/native-reference.adoc
#, fuzzy
msgid "In another:"
msgstr "在另一个。"

#: _guides/native-reference.adoc
msgid ""
"The rest of this section explores ways to build the native executable with extra information,\n"
"but first, stop the running application.\n"
"We can obtain this information while building the native executable by adding additional native-image build options using `-Dquarkus.native.additional-build-args`, e.g."
msgstr ""

#. type: Plain text
#: _guides/native-reference.adoc
#, fuzzy
msgid "Executing that will produce additional output lines like this:"
msgstr "执行这句话将产生额外的输出行，像这样。"

#: _guides/native-reference.adoc
msgid ""
"Note that `/project` is a folder within the container that is building the native executable.\n"
"So, this is not a folder that you will find in the host environment.\n"
"`/project` folder is mapped to `target/debugging-native-1.0.0-SNAPSHOT-native-image-source-jar`,\n"
"so you will find the files under the `reports` folder in that directory."
msgstr ""

#: _guides/native-reference.adoc
msgid ""
"The target info file contains information such as the target platform,\n"
"the toolchain used to compile the executable,\n"
"and the C library in use:"
msgstr ""

#. type: Plain text
#: _guides/native-reference.adoc
#, fuzzy
msgid "The native library info file contains information on the static libraries added to the binary and the other libraries dynamically linked to the executable:"
msgstr "本地库信息文件包含添加到二进制文件的静态库和动态链接到可执行文件的其他库的信息。"

#: _guides/native-reference.adoc
msgid ""
"Even more detail can be obtained by passing in `--verbose` as an additional native-image build argument.\n"
"This option can be very useful in detecting whether the options that you pass at a high level via Quarkus are being passed down to the native executable production,\n"
"or whether some third party jar has some native-image configuration embedded in it that is reaching the native-image invocation:"
msgstr ""

#. type: Plain text
#: _guides/native-reference.adoc
#, fuzzy
msgid "Running with `--verbose` demonstrates how the native-image building process is two sequential java processes:"
msgstr "用 `--verbose` ，展示了本地图像构建过程是两个连续的java过程。"

#: _guides/native-reference.adoc
msgid ""
"The first is a very short Java process that does some basic validation and builds the arguments for the second process\n"
"(in a stock GraalVM distribution, this is executed as native code)."
msgstr ""

#: _guides/native-reference.adoc
msgid ""
"The second Java process is where the main part of the native executable production happens.\n"
"The `--verbose` option shows the actual Java process executed.\n"
"You could take the output and run it yourself."
msgstr ""

#. type: Plain text
#: _guides/native-reference.adoc
#, fuzzy
msgid "One may also combine multiple native build options by separating with a comma, e.g.:"
msgstr "我们也可以通过用逗号分隔来组合多个本地构建选项，例如：。"

#: _guides/native-reference.adoc
msgid ""
"Remember that if an argument for `-Dquarkus.native.additional-build-args` includes the `,` symbol,\n"
"it needs to be escaped to be processed correctly, e.g. `\\\\,`."
msgstr ""

#. type: Title ===
#: _guides/native-reference.adoc
#, fuzzy, no-wrap
msgid "Inspecting Native Executables"
msgstr "检查本地可执行文件"

#: _guides/native-reference.adoc
msgid ""
"Given a native executable, various Linux tools can be used to inspect it.\n"
"To allow supporting a variety of environments,\n"
"inspections will be done from within a Linux container.\n"
"Let's create a Linux container image with all the tools required for this guide:"
msgstr ""

#. type: Plain text
#: _guides/native-reference.adoc
#, fuzzy
msgid "Using docker in the non-Linux environment, you can create an image using this Dockerfile via:"
msgstr "在非Linux环境中使用docker，你可以通过这个Dockerfile创建一个镜像。"

#. type: Plain text
#: _guides/native-reference.adoc
#, fuzzy
msgid "Then, go to the root of the project and run the Docker container we have just created as:"
msgstr "然后，进入项目的根目录，运行我们刚刚创建的Docker容器。"

#. type: Plain text
#: _guides/native-reference.adoc
#, fuzzy
msgid "`ldd` shows the shared library dependencies of an executable:"
msgstr " `ldd` 显示一个可执行文件的共享库依赖性。"

#. type: Plain text
#: _guides/native-reference.adoc
#, fuzzy
msgid "`strings` can be used to look for text messages inside the binary:"
msgstr " `strings` 可以用来寻找二进制文件中的文本信息。"

#. type: Plain text
#: _guides/native-reference.adoc
#, fuzzy
msgid "Using `strings` you can also get Mandrel information given the binary:"
msgstr "使用 `strings` ，你也可以得到二进制的心轴信息。"

#: _guides/native-reference.adoc
msgid ""
"Finally, using `readelf` we can inspect different sections of the binary.\n"
"For example, we can see how the heap and text sections take most of the binary:"
msgstr ""

#: _guides/native-reference.adoc
msgid ""
"Runtime containers produced by Quarkus to run native executables will not include the tools mentioned above.\n"
"To explore a native executable within a runtime container,\n"
"it's best to run the container itself and then `docker cp` the executable locally, e.g.:"
msgstr ""

#. type: Plain text
#: _guides/native-reference.adoc
#, fuzzy
msgid "From there, you can either inspect the executable directly or use a tools container like above."
msgstr "从那里，你可以直接检查可执行文件，或者像上面那样使用一个工具容器。"

#. type: Title ===
#: _guides/native-reference.adoc
#, fuzzy, no-wrap
msgid "Native Reports"
msgstr "本地报告"

#. type: delimited block =
#: _guides/native-reference.adoc
#, fuzzy
msgid "Optionally, the native build process can generate reports that show what goes into the binary:"
msgstr "作为选择，本地构建过程可以生成报告，显示二进制文件中的内容。"

#: _guides/native-reference.adoc
msgid ""
"The reports will be created under `target/debugging-native-1.0.0-SNAPSHOT-native-image-source-jar/reports/`.\n"
"These reports are some of the most useful resources when encountering issues with missing methods/classes, or encountering forbidden methods by Mandrel."
msgstr ""

#. type: Title ====
#: _guides/native-reference.adoc
#, fuzzy, no-wrap
msgid "Call Tree Reports"
msgstr "呼叫树报告"

#: _guides/native-reference.adoc
msgid ""
"`call_tree` csv file reports are some of the default reports generated when the `-Dquarkus.native.enable-reports` option is passed in.\n"
"These csv files can be imported into a graph database, such as Neo4j,\n"
"to inspect them more easily and run queries against the call tree.\n"
"This is useful for getting an approximation on why a method/class is included in the binary."
msgstr ""

#. type: Plain text
#: _guides/native-reference.adoc
#, fuzzy
msgid "Let’s see this in action."
msgstr "让我们看看这个行动。"

#. type: Plain text
#: _guides/native-reference.adoc
#, fuzzy
msgid "First, start a Neo4j instance:"
msgstr "首先，启动一个Neo4j实例。"

#: _guides/native-reference.adoc
msgid ""
"Once the container is running,\n"
"you can access the link:http://localhost:7474[Neo4j browser].\n"
"Use `neo4j` as the username and the value of `NEO_PASS` as the password to log in."
msgstr ""

#: _guides/native-reference.adoc
msgid ""
"To import the CSV files,\n"
"we need the following cypher script which will import the data within the CSV files and create graph database nodes and edges:"
msgstr ""

#. type: Plain text
#: _guides/native-reference.adoc
#, fuzzy
msgid "Copy and paste the contents of the script into a file called `import.cypher`."
msgstr "复制并粘贴脚本的内容到一个名为 `import.cypher` 的文件中。"

#: _guides/native-reference.adoc
msgid ""
"Mandrel 22.0.0 contains a bug where the symbolic links used by the import cypher file are not correctly set when generating reports within a container\n"
"(for more details see link:https://github.com/oracle/graal/issues/4355[here]).\n"
"This can be worked around by copying the following script into a file and executing it:"
msgstr ""

#. type: delimited block =
#: _guides/native-reference.adoc
#, fuzzy
msgid "Next, copy the import cypher script and CSV files into Neo4j's import folder:"
msgstr "接下来，将导入的cypher脚本和CSV文件复制到Neo4j的导入文件夹。"

#. type: Plain text
#: _guides/native-reference.adoc
#, fuzzy
msgid "After copying all the files, invoke the import script:"
msgstr "拷贝完所有文件后，调用导入脚本。"

#: _guides/native-reference.adoc
msgid ""
"Once the import completes (shouldn't take more than a couple of minutes), go to the link:http://localhost:7474[Neo4j browser],\n"
"and you'll be able to observe a small summary of the data in the graph:"
msgstr ""

#: _guides/native-reference.adoc
msgid ""
"The data above shows that there are ~60000 methods, and just over ~200000 edges between them.\n"
"The Quarkus application demonstrated here is very basic, so there’s not a lot we can explore, but here are some example queries you can run to explore the graph in more detail.\n"
"Typically, you’d start by looking for a given method:"
msgstr ""

#. type: Plain text
#: _guides/native-reference.adoc
#, fuzzy
msgid "From there, you can narrow down to a given method on a specific type:"
msgstr "从那里，你可以缩小到特定类型上的特定方法。"

#: _guides/native-reference.adoc
msgid ""
"Once you’ve located the node for the specific method you’re after, a typical question you’d want to get an answer for is:\n"
"why does this method get included in the call tree?\n"
"To do that, start from the method and look for incoming connections at a given depth,\n"
"starting from the end method.\n"
"For example, methods that directly call a method can be located via:"
msgstr ""

#: _guides/native-reference.adoc
msgid ""
"Then you can look for direct calls at depth of 2,\n"
"so you’d search for methods that call methods that call into the target method:"
msgstr ""

#: _guides/native-reference.adoc
msgid ""
"You can continue going up layers,\n"
"but unfortunately if you reach a depth with too many nodes,\n"
"the Neo4j browser will be unable to visualize them all.\n"
"When that happens, you can alternatively run the queries directly against the cypher shell:"
msgstr ""

#: _guides/native-reference.adoc
msgid ""
"For further information, check out this\n"
"link:https://quarkus.io/blog/quarkus-native-neo4j-call-tree[blog post]\n"
"that explores the Quarkus Hibernate ORM quickstart using the techniques explained above."
msgstr ""

#. type: Title ====
#: _guides/native-reference.adoc
#, fuzzy, no-wrap
msgid "Used Packages/Classes/Methods Reports"
msgstr "使用的包/类/方法报告"

#: _guides/native-reference.adoc
msgid ""
"`used_packages`, `used_classes` and `used_methods` text file reports come in handy when comparing different versions of the application,\n"
"e.g. why does the image take longer to build? Or why is the image bigger now?"
msgstr ""

#. type: Title ====
#: _guides/native-reference.adoc
#, fuzzy, no-wrap
msgid "Further Reports"
msgstr "进一步的报告"

#: _guides/native-reference.adoc
msgid ""
"Mandrel can produce further reports beyond the ones that are enabled with the `-Dquarkus.native.enable-reports` option.\n"
"These are called expert options and you can learn more about them by running:"
msgstr ""

#: _guides/native-reference.adoc
msgid ""
"These expert options are not considered part of the GraalVM native image API,\n"
"so they might change anytime."
msgstr ""

#. type: Plain text
#: _guides/native-reference.adoc
#, fuzzy
msgid "To use these expert options, add them comma separated to the `-Dquarkus.native.additional-build-args` parameter."
msgstr "要使用这些专家选项，请将它们以逗号分隔添加到 `-Dquarkus.native.additional-build-args` 参数中。"

#. type: Title ===
#: _guides/native-reference.adoc
#, fuzzy, no-wrap
msgid "Build-time vs Run-time Initialization"
msgstr "构建时与运行时的初始化"

#: _guides/native-reference.adoc
msgid ""
"Quarkus instructs Mandrel to initialize as much as possible at build time,\n"
"so that runtime startup can be as fast as possible.\n"
"This is important in containerized environments where the startup speed has a big impact on how quickly an application is ready to do work.\n"
"Build time initialization also minimizes the risk of runtime failures due to unsupported features becoming reachable through runtime initialization,\n"
"thus making Quarkus more reliable."
msgstr ""

#: _guides/native-reference.adoc
msgid ""
"The most common examples of build-time initialized code are static variables and blocks.\n"
"Although Mandrel executes those at run-time by default,\n"
"Quarkus instructs Mandrel to run them at build-time for the reasons given."
msgstr ""

#: _guides/native-reference.adoc
msgid ""
"This means that any static variables initialized inline, or initialized in a static block,\n"
"will keep the same value even if the application is restarted.\n"
"This is a different behaviour compared to what would happen if executed as Java."
msgstr ""

#: _guides/native-reference.adoc
msgid ""
"To see this in action with a very basic example,\n"
"add a new `TimestampResource` to the application that looks like this:"
msgstr ""

#. type: Plain text
#: _guides/native-reference.adoc
#, fuzzy
msgid "Rebuild the binary using:"
msgstr "用以下方法重建二进制文件。"

#: _guides/native-reference.adoc
msgid ""
"Run the application in one terminal\n"
"(make sure you stop any other native executable container runs before executing this):"
msgstr ""

#. type: Plain text
#: _guides/native-reference.adoc
#, fuzzy
msgid "Send a `GET` request multiple times from another terminal:"
msgstr "从另一个终端多次发送一个 `GET` 的请求。"

#: _guides/native-reference.adoc
msgid ""
"to see how the current time has been baked into the binary.\n"
"This time was calculated when the binary was being built,\n"
"hence application restarts have no effect."
msgstr ""

#: _guides/native-reference.adoc
msgid ""
"In some situations, built time initializations can lead to errors when building native executables.\n"
"One example is when a value gets computed at build time which is forbidden to reside in the heap of the JVM that gets baked into the binary.\n"
"To see this in action, add this REST resource:"
msgstr ""

#. type: Plain text
#: _guides/native-reference.adoc
#, fuzzy
msgid "When trying to rebuild the application, you’ll encounter an error:"
msgstr "当试图重建该应用程序时，你会遇到一个错误。"

#: _guides/native-reference.adoc
msgid ""
"So, what the message above is telling us is that our application caches a value that is supposed to be random as a constant.\n"
"This is not desirable because something that's supposed to be random is no longer so,\n"
"because the seed is baked in the image.\n"
"The message above makes it quite clear what is causing this,\n"
"but in other situations the cause might be more obfuscated.\n"
"As a next step, we'll add some extra flags to the native executable generation to get more information."
msgstr ""

#. type: Plain text
#: _guides/native-reference.adoc
#, fuzzy
msgid "As suggested by the message, let's start by adding an option to track object instantiation:"
msgstr "正如消息中所建议的，让我们首先添加一个选项来跟踪对象的实例化。"

#: _guides/native-reference.adoc
msgid ""
"The error messages point to the code in the example,\n"
"but it can be surprising that a reference to `DnsClient` appears.\n"
"Why is that?\n"
"The key is in what happens inside `KeyPairGenerator.initialize()` method call.\n"
"It uses `JCAUtil.getSecureRandom()` which is why this is problematic,\n"
"but sometimes the tracing options can show some stack traces that do not represent what happens in reality.\n"
"The best option is to dig through the source code and use tracing output for guidance but not as full truth."
msgstr ""

#: _guides/native-reference.adoc
msgid ""
"Moving the `KEY_PAIR_GEN.initialize(1024);` call to the run-time executed method `encryptDecrypt` is enough to solve this particular issue.\n"
"Rebuild the application and verify that encrypt/decrypt endpoint works as expected by sending any message and check if the reply is the same as the incoming message:"
msgstr ""

#. type: Plain text
#: _guides/native-reference.adoc
#, fuzzy
msgid "Additional information on which classes are initialized and why can be obtained by passing in the `-H:+PrintClassInitialization` flag via `-Dquarkus.native.additional-build-args`."
msgstr "关于哪些类被初始化以及为什么被初始化的其他信息，可以通过 `-Dquarkus.native.additional-build-args` ，传入 `-H:+PrintClassInitialization` 标志获得。"

#. type: Title ===
#: _guides/native-reference.adoc
#, fuzzy, no-wrap
msgid "Profile Runtime Behaviour"
msgstr "配置文件运行时的行为"

#. type: Title ====
#: _guides/native-reference.adoc
#, fuzzy, no-wrap
msgid "Single Thread"
msgstr "单线程"

#: _guides/native-reference.adoc
msgid ""
"In this exercise, we profile the runtime behaviour of some Quarkus application that was compiled to a native executable to determine where the bottleneck is.\n"
"Assume that you’re in a scenario where profiling the pure Java version is not possible, maybe because the issue only occurs with the native version of the application."
msgstr ""

#: _guides/native-reference.adoc
msgid ""
"Add a REST resource with the following code\n"
"(example courtesy of link:https://github.com/apangin/java-profiling-presentation/blob/master/src/demo1/StringBuilderTest.java[Andrei Pangin's Java Profiling presentation]):"
msgstr ""

#. type: Plain text
#: _guides/native-reference.adoc
#, fuzzy
msgid "Recompile the application, rebuild the binary and run it. Attempting a simple curl will never complete, as expected:"
msgstr "重新编译应用程序，重建二进制文件并运行它。试图进行简单的curl操作将永远无法完成，正如预期的那样。"

#: _guides/native-reference.adoc
msgid ""
"However, the question we’re trying to answer here is:\n"
"what would be the bottleneck of such code?\n"
"Is it appending the characters? Is it deleting it? Is it checking whether the thread is alive?"
msgstr ""

#: _guides/native-reference.adoc
msgid ""
"Since we're dealing with a linux native executable,\n"
"we can use tools like `perf` directly.\n"
"To use `perf`,\n"
"go to the root of the project and start the tools container created earlier as a privileged user:"
msgstr ""

#: _guides/native-reference.adoc
msgid ""
"Note that in order to use `perf` to profile the native executables in the guide,\n"
"the container needs to run as privileged, or with `--cap-add sys_admin`.\n"
"Please note that privileged containers are **NOT** recommended in production, so use this flag with caution!"
msgstr ""

#. type: Plain text
#: _guides/native-reference.adoc
#, fuzzy
msgid "Once the container is running, you need to ensure that the kernel is ready for the profiling exercises:"
msgstr "一旦容器运行，你需要确保内核为剖析练习做好准备。"

#: _guides/native-reference.adoc
msgid ""
"The kernel modifications above also apply to Linux virtual machines.\n"
"If running on a bare metal Linux machine,\n"
"tweaking only `perf_event_paranoid` is enough."
msgstr ""

#. type: Plain text
#: _guides/native-reference.adoc
#, fuzzy
msgid "Then, from inside the tools container we execute:"
msgstr "然后，我们从工具容器内执行。"

#: _guides/native-reference.adoc
msgid ""
"The `perf record` command above takes `1009` samples per second.\n"
"Increasing this value means more samples are gathered,\n"
"which can end up affecting the runtime performance.\n"
"This also increases the amount of data generated.\n"
"The more data generated, the longer it takes to process it,\n"
"but the more precision you get on what the application is doing.\n"
"So, finding the right value is a balancing act."
msgstr ""

#. type: Plain text
#: _guides/native-reference.adoc
#, fuzzy
msgid "While `perf record` is running, open another window and access the endpoint:"
msgstr "当 `perf record` 正在运行时，打开另一个窗口并访问端点。"

#: _guides/native-reference.adoc
msgid ""
"After a few seconds, halt the `perf record` process.\n"
"This will generate a `perf.data` file.\n"
"We could use `perf report` to inspect the perf data,\n"
"but you can often get a better picture showing that data as a flame graph.\n"
"To generate flame graphs, we will use\n"
"https://github.com/brendangregg/FlameGraph[FlameGraph GitHub repository],\n"
"which has already been installed inside the tools container."
msgstr ""

#. type: Plain text
#: _guides/native-reference.adoc
#, fuzzy
msgid "Next, generate a flame graph using the data captured via `perf record`:"
msgstr "接下来，使用通过 `perf record` 捕获的数据生成一个火焰图。"

#: _guides/native-reference.adoc
msgid ""
"The flame graph is a svg file that a web browser, such as Firefox, can easily display.\n"
"After the above two commands complete one can open `flamegraph.svg` in their browser:"
msgstr ""

#: _guides/native-reference.adoc
msgid ""
"We see a big majority of time spent in what is supposed to be our main,\n"
"but we see no trace of the `StringBuilderResource` class,\n"
"nor the `StringBuilder` class we're calling.\n"
"We should look at the symbol table of the binary:\n"
"can we find symbols for our class and `StringBuilder`?\n"
"We need those in order to get meaningful data.\n"
"From within the tools container, query the symbol table:"
msgstr ""

#: _guides/native-reference.adoc
msgid ""
"No output appears when querying the symbol table.\n"
"This is why we don't see any call graphs in the flame graphs.\n"
"This is a deliberate decision that native-image makes.\n"
"By default, it removes symbols from the binary."
msgstr ""

#: _guides/native-reference.adoc
msgid ""
"To regain the symbols, we need to rebuild the binary instructing GraalVM not to delete the symbols.\n"
"On top of that, enable DWARF debug info so that the stack traces can be populated with that information.\n"
"From outside the tools container, execute:"
msgstr ""

#: _guides/native-reference.adoc
msgid ""
"Next, re-enter the tools container if you exited,\n"
"and inspect the native executable with `objdump`,\n"
"and see how the symbols are now present:"
msgstr ""

#. type: Plain text
#: _guides/native-reference.adoc
#, fuzzy
msgid "You should see a long list of symbols that match that pattern."
msgstr "你应该看到一长串符合该模式的符号。"

#: _guides/native-reference.adoc
msgid ""
"Then, run the executable through perf,\n"
"*indicating that the call graph is dwarf*:"
msgstr ""

#. type: Plain text
#: _guides/native-reference.adoc
#, fuzzy
msgid "Run the curl command once again, stop the binary, generate the flamegraphs and open it:"
msgstr "再次运行curl命令，停止二进制，生成flamegraphs并打开它。"

#: _guides/native-reference.adoc
msgid ""
"The flamegraph now shows where the bottleneck is.\n"
"It's when `StringBuilder.delete()` is called which calls `System.arraycopy()`.\n"
"The issue is that 1 million characters need to be shifted in very small increments:"
msgstr ""

#. type: Title ====
#: _guides/native-reference.adoc
#, fuzzy, no-wrap
msgid "Multi-Thread"
msgstr "多线程"

#: _guides/native-reference.adoc
msgid ""
"Multithreaded programs might require special attention when trying to understand their runtime behaviour.\n"
"To demonstrate this, add this `MulticastResource` code to your project\n"
"(example courtesy of link:https://github.com/apangin/java-profiling-presentation/blob/master/src/demo6/DatagramTest.java[Andrei Pangin's Java Profiling presentation]):"
msgstr ""

#. type: Plain text
#: _guides/native-reference.adoc
#, fuzzy
msgid "Build the native executable with debug info:"
msgstr "构建带有调试信息的本地可执行文件。"

#. type: Plain text
#: _guides/native-reference.adoc
#, fuzzy
msgid "From inside the tools container (as privileged user) run the native executable through `perf`:"
msgstr "在工具容器内（作为特权用户）通过 `perf` ，运行本地可执行文件。"

#. type: Plain text
#: _guides/native-reference.adoc
#, fuzzy
msgid "Invoke the endpoint to send the multicast packets:"
msgstr "调用端点来发送组播数据包。"

#. type: Plain text
#: _guides/native-reference.adoc
#, fuzzy
msgid "Make and open a flamegraph:"
msgstr "制作并打开一个火焰图。"

#: _guides/native-reference.adoc
msgid ""
"The flamegraph produced looks odd. Each thread is treated independently even though they all do the same work.\n"
"This makes it difficult to have a clear picture of the bottlenecks in the program."
msgstr ""

#: _guides/native-reference.adoc
msgid ""
"This is happening because from a `perf` perspective, each thread is a different command.\n"
"We can see that if we inspect `perf report`:"
msgstr ""

#: _guides/native-reference.adoc
msgid ""
"This can be worked around by applying some modifications to the perf output,\n"
"in order to make all threads have the same name. E.g."
msgstr ""

#: _guides/native-reference.adoc
msgid ""
"When you open the flamegraph, you will see all threads' work collapsed into a single area.\n"
"Then, you can clearly see that there's some locking that could affect performance."
msgstr ""

#. type: Title ===
#: _guides/native-reference.adoc
#, fuzzy, no-wrap
msgid "Debugging Native Crashes"
msgstr "调试本地崩溃"

#: _guides/native-reference.adoc
msgid ""
"One of the drawbacks of using native executables is that they cannot be debugged using the standard Java debuggers,\n"
"instead we need to debug them using `gdb`, the GNU Project debugger.\n"
"To demonstrate how to do this,\n"
"we are going to generate a native Quarkus application that crashes due to a Segmentation Fault when accessing http://localhost:8080/crash.\n"
"To achieve this, add the following REST resource to the project:"
msgstr ""

#: _guides/native-reference.adoc
msgid ""
"This code will try to copy 256 bytes from address `0x0` to `0x80` resulting in a Segmentation Fault.\n"
"To verify this, compile and run the example application:"
msgstr ""

#. type: Plain text
#: _guides/native-reference.adoc
#, fuzzy
msgid "This will result in the following output:"
msgstr "这将导致以下输出。"

#: _guides/native-reference.adoc
msgid ""
"The omitted output above contains clues to what caused the issue,\n"
"but in this exercise we are going to assume that no information was provided.\n"
"Let’s try to debug the segmentation fault using `gdb`.\n"
"To do that, go to the root of the project and enter the tools container:"
msgstr ""

#. type: Plain text
#: _guides/native-reference.adoc
#, fuzzy
msgid "Then start the application in `gdb` and execute `run`."
msgstr "然后在 `gdb` 中启动应用程序并执行 `run` 。"

#. type: Plain text
#: _guides/native-reference.adoc
#, fuzzy
msgid "Next, try to access http://localhost:8080/crash:"
msgstr "接下来，尝试访问 http://localhost:8080/crash "

#. type: Plain text
#: _guides/native-reference.adoc
#, fuzzy
msgid "This will result in the following message in `gdb`:"
msgstr "这将导致 `gdb` 中出现以下信息。"

#. type: Plain text
#: _guides/native-reference.adoc
#, fuzzy
msgid "If we try to get more info about the backtrace that led to this crash we will see that there is not enough information available."
msgstr "如果我们试图获得更多关于导致这次崩溃的回溯信息，我们会发现没有足够的信息可用。"

#: _guides/native-reference.adoc
msgid ""
"This is because we didn’t compile the Quarkus application with `-Dquarkus.native.debug.enabled`,\n"
"so `gdb` cannot find debugging symbols for our native executable,\n"
"as indicated by the \"_No debugging symbols found in ./target/debugging-native-1.0.0-SNAPSHOT-runner_\" message in the beginning of `gdb`."
msgstr ""

#: _guides/native-reference.adoc
msgid ""
"Recompiling the Quarkus application with `-Dquarkus.native.debug.enabled` and rerunning it through `gdb` we are now able to get a backtrace making clear what caused the crash.\n"
"On top of that, add `-H:-OmitInlinedMethodDebugLineInfo` option to avoid inlined methods being omitted from the backtrace:"
msgstr ""

#: _guides/native-reference.adoc
msgid ""
"We already see that `gdb` is able to tell us which method caused the crash and where it’s located in the source code.\n"
"We can also get a backtrace of the call graph that led us to this state:"
msgstr ""

#. type: Plain text
#: _guides/native-reference.adoc
#, fuzzy
msgid "Similarly, we can get a backtrace of the call graph of other threads."
msgstr "同样地，我们可以得到其他线程的调用图的回溯。"

#. type: Plain text
#: _guides/native-reference.adoc
#, fuzzy
msgid "First, we can list the available threads with:"
msgstr "首先，我们可以用以下方法列出可用的线程。"

#. type: Plain text
#: _guides/native-reference.adoc
#, fuzzy
msgid "select the thread we want to inspect, e.g. thread 1:"
msgstr "选择我们要检查的线程，例如线程1。"

#. type: Plain text
#: _guides/native-reference.adoc
#, fuzzy
msgid "and, finally, print the stack trace:"
msgstr "最后，打印堆栈跟踪。"

#. type: Plain text
#: _guides/native-reference.adoc
#, fuzzy
msgid "Alternatively, we can list the backtraces of all threads with a single command:"
msgstr "另外，我们也可以用一条命令列出所有线程的回溯记录。"

#. type: Plain text
#: _guides/native-reference.adoc
#, fuzzy
msgid "Note, however, that despite being able to get a backtrace we can still not list the source code at point with the `list` command."
msgstr "然而，请注意，尽管能够得到一个回溯，我们仍然不能用 `list` 命令列出点的源代码。"

#: _guides/native-reference.adoc
msgid ""
"This is because `gdb` is not aware of the location of the source files.\n"
"We are running the executable outside the target directory.\n"
"To fix this we can either rerun `gdb` from the target directory or,\n"
"run `directory target/debugging-native-1.0.0-SNAPSHOT-native-image-source-jar/sources` e.g.:"
msgstr ""

#: _guides/native-reference.adoc
msgid ""
"We can now examine line `169` and get a first hint of what might be wrong\n"
"(in this case we see that it fails at the first read from src which contains the address `0x0000`),\n"
"or walk up the stack using `gdb`’s `up` command to see what part of our code led to this situation.\n"
"For more information about using `gdb` to debug native executables, see the\n"
"link:https://www.graalvm.org/{graalvm-docs-version}/reference-manual/native-image/debugging-and-diagnostics/DebugInfo/[GraalVM Debug Info Feature] guide."
msgstr ""

#. type: Title ==
#: _guides/native-reference.adoc
#, fuzzy, no-wrap
msgid "Frequently Asked Questions"
msgstr "常见问题"

#. type: Title ===
#: _guides/native-reference.adoc
#, fuzzy, no-wrap
msgid "Why is the process of generating a native executable slow?"
msgstr "为什么生成本地可执行文件的过程很慢？"

#: _guides/native-reference.adoc
msgid ""
"Native executable generation is a multi-step process.\n"
"The analysis and compile steps are the most expensive of all and hence the ones that dominate the time spent generating the native executable."
msgstr ""

#: _guides/native-reference.adoc
msgid ""
"In the analysis phase, a static points-to analysis starts from the main method of the program to find out what is reachable.\n"
"As new classes are discovered, some of them will be initialized during this process depending on the configuration.\n"
"In the next step, the heap is snapshotted and checks are made to see which types need to be available at runtime.\n"
"The initialization and heap snapshotting can cause new types to be discovered, in which case the process is repeated.\n"
"The process stops when a fixed point is reached, that is when the reachable program grows no more."
msgstr ""

#. type: Plain text
#: _guides/native-reference.adoc
#, fuzzy
msgid "The compilation step is pretty straightforward, it simply compiles all the reachable code."
msgstr "编译步骤非常直接，它只是简单地编译所有可到达的代码。"

#: _guides/native-reference.adoc
msgid ""
"The time spent in analysis and compilation phases depends on how big the application is.\n"
"The bigger the application, the longer it takes to compile it.\n"
"However, there are certain features that can have an exponential effect.\n"
"For example, when registering types and methods for reflection access,\n"
"the analysis can’t easily see what’s behind those types or methods,\n"
"so it has to do more work to complete the analysis step."
msgstr ""

#. type: Title ===
#: _guides/native-reference.adoc
#, no-wrap
msgid "I get a warning about using experimental options, what can I do?"
msgstr ""

#. type: Plain text
#: _guides/native-reference.adoc
msgid "Starting with Mandrel 23.1 and GraalVM for JDK 21, the native executable generation process will warn about the use of experimental options with a message like this:"
msgstr ""

#: _guides/native-reference.adoc
msgid ""
"If the mentioned option is added by a third party library like in the example above, you should consider opening an issue in the library's repository to ask for the option to be removed.\n"
"If the option is added by your application, you should consider either removing it (if it's not necessary) or wrapping it between `-H:+UnlockExperimentalVMOptions` and `-H:-UnlockExperimentalVMOptions`."
msgstr ""

#. type: Title ===
#: _guides/native-reference.adoc
#, fuzzy, no-wrap
msgid "I get a `AnalysisError\\$ParsingError` when building a native executable due to an `UnresolvedElementException`, what can I do?"
msgstr "我在构建本地可执行文件时得到一个 `OutOfMemoryError` (OOME)，我可以做什么？"

#: _guides/native-reference.adoc
msgid ""
"When building a native executable Quarkus requires all classes being referenced by the code, no matter if they are build-time or run-time initialized, to be present in the classpath.\n"
"This way it ensures that there will be no crashes at runtime due to potential `NoClassDefFoundError` exceptions.\n"
"To achieve this it makes use of GraalVM's `--link-at-build-time` parameter:"
msgstr ""

#: _guides/native-reference.adoc
msgid ""
"This, however, may result in an `AnalysisError\\$ParsingError` due to an `UnresolvedElementException` at build time.\n"
"This is often caused because the application references a class from an https://maven.apache.org/guides/introduction/introduction-to-optional-and-excludes-dependencies.html#optional-dependencies[optional dependency]."
msgstr ""

#. type: Plain text
#: _guides/native-reference.adoc
#, fuzzy
msgid "If you have access to the source code responsible for the reference to the missing dependency and can alter it, you should consider one of the following:"
msgstr "如果你可以访问负责引用缺失依赖关系的源代码，并且可以改变它，你应该考虑以下方法之一："

#. type: Plain text
#: _guides/native-reference.adoc
#, fuzzy
msgid "Remove the reference if it's not actually necessary."
msgstr "如果实际上没有必要，就把参考文献删除。"

#. type: Plain text
#: _guides/native-reference.adoc
#, fuzzy
msgid "Move the affected code in a sub-module and make the dependency non-optional (as is the best practice)."
msgstr "将受影响的代码移到一个子模块中，并使依赖性成为非选择性的（这也是最佳做法）。"

#. type: Plain text
#: _guides/native-reference.adoc
#, fuzzy
msgid "Make the dependency non-optional."
msgstr "使依赖性成为非选择性的。"

#. type: Plain text
#: _guides/native-reference.adoc
#, fuzzy
msgid "In the unfortunate case where the reference causing the issue is made by a 3rd party library, that you cannot modify, you should consider one of the following:"
msgstr "在不幸的情况下，如果导致该问题的引用是由第三方库提供的，而你又无法修改，你应该考虑以下情况："

#. type: Plain text
#: _guides/native-reference.adoc
#, fuzzy
msgid "Use a class/method substitution to remove the said reference."
msgstr "使用类/方法替换来删除上述引用。"

#. type: Plain text
#: _guides/native-reference.adoc
#, fuzzy
msgid "Add the optional dependency as a non-optional dependency of your project."
msgstr "将可选的依赖关系作为你的项目的非可选依赖关系。"

#: _guides/native-reference.adoc
msgid ""
"Note that although option (1) is the best choice performance wise, as it minimizes the applications footprint,it might not be trivial to implement.\n"
"To make matters worse, it's also not easy to maintain as it is tightly coupled to the 3rd party library implementation.\n"
"Option (2) is a straight forward alternative to work around the issue, but comes at the cost of including possibly never invoked code in the resulting native executable."
msgstr ""

#. type: Title ===
#: _guides/native-reference.adoc
#, fuzzy, no-wrap
msgid "I get an `OutOfMemoryError` (OOME) building native executables, what can I do?"
msgstr "我在构建本地可执行文件时得到一个 `OutOfMemoryError` (OOME)，我可以做什么？"

#: _guides/native-reference.adoc
msgid ""
"Building native executables is not only time consuming, but it also takes a fair amount of memory.\n"
"For example, building a sample native Quarkus Jakarta Persistence application such as the Hibernate ORM quickstart,\n"
"may use 6GB to 8GB resident set size in memory.\n"
"A big chunk of this memory is Java heap,\n"
"but extra memory is required for other aspects of the JVM that runs the native building process.\n"
"It is still possible to build such applications in environments that have total memory close to the limits,\n"
"but to do that it is necessary to shrink the maximum heap size of the GraalVM native image process.\n"
"To do that, set a maximum heap size using the `quarkus.native.native-image-xmx` property.\n"
"For example, we can instruct GraalVM to use 5GB of maximum heap size by passing in\n"
"`-Dquarkus.native.native-image-xmx=5g` in the command line."
msgstr ""

#: _guides/native-reference.adoc
msgid ""
"Building native executables this way might have the side effect of requiring more time to complete.\n"
"This is due to garbage collection having to work harder for native image generation to have free space to do its job."
msgstr ""

#: _guides/native-reference.adoc
msgid ""
"Note that typical applications are likely bigger than quickstarts,\n"
"so the memory requirements will also likely be higher."
msgstr ""

#. type: Title ===
#: _guides/native-reference.adoc
#, fuzzy, no-wrap
msgid "Why is runtime performance of a native executable inferior compared to JVM mode?"
msgstr "为什么本地可执行文件的运行时性能比JVM模式要差？"

#: _guides/native-reference.adoc
msgid ""
"As with most things in life there are some trade-offs involved when choosing native compilation over JVM mode.\n"
"So depending on the application the runtime performance of a native application might be slower compared to JVM mode,\n"
"though that’s not always the case."
msgstr ""

#: _guides/native-reference.adoc
msgid ""
"JVM execution of an application includes runtime optimization of the code that profits from profile information built up during execution.\n"
"That includes the opportunities to inline a lot more of the code,\n"
"locate hot code on direct paths (i.e. ensure better instruction cache locality)\n"
"and cut out a lot of the code on cold paths (on the JVM a lot of code does not get compiled until something tries to execute it -- it is replaced with a trap that causes deoptimization and recompilation).\n"
"Removal of cold paths provides many more optimization opportunities than are available for ahead of time compilation because it significantly reduces the branch complexity and combinatorial logic of the smaller amount of hot code that is compiled."
msgstr ""

#: _guides/native-reference.adoc
msgid ""
"By contrast, native executable compilation has to cater for all possible execution paths when it compiles code offline since it does not know which are the hot or cold paths and cannot use the trick of planting a trap and recompiling if it is hit. For the same reason it cannot load the dice to ensure that code cache conflicts are minimized by co-locating hot paths adjacent.\n"
"Native executable generation is able to remove some code because of the closed world hypothesis but that is often not enough to make up for all the benefits that profiling and runtime deopt & recompile provides to the JVM JIT compiler."
msgstr ""

#. type: Plain text
#: _guides/native-reference.adoc
#, fuzzy
msgid "Note, however, that there is a price you pay for that potentially higher JVM speed, and that price is in increased resource usage (both CPU and memory) and startup time because:"
msgstr "然而，请注意，你要为这种潜在的更高的JVM速度付出代价，这种代价就是增加资源的使用（包括CPU和内存）和启动时间，因为。"

#. type: Plain text
#: _guides/native-reference.adoc
#, fuzzy
msgid "it takes some time before the JIT kicks in and fully optimizes the code."
msgstr "在JIT启动并完全优化代码之前，需要一些时间。"

#. type: Plain text
#: _guides/native-reference.adoc
#, fuzzy
msgid "the JIT compiler consumes resources that could be utilized by the application."
msgstr "JIT编译器消耗了本可由应用程序使用的资源。"

#. type: Plain text
#: _guides/native-reference.adoc
#, fuzzy
msgid "the JVM has to retain a lot more metadata and compiler/profiler data to support the better optimizations that it can offer."
msgstr "JVM必须保留更多的元数据和编译器/profiler数据，以支持它所能提供的更好的优化。"

#. type: Plain text
#: _guides/native-reference.adoc
#, fuzzy
msgid "The reason for 1) is that code needs to be run interpreted for some time and, possibly, to be compiled several times before all potential optimizations are realized to ensure that:"
msgstr "1）的原因是，代码需要被解释运行一段时间，而且可能在所有潜在的优化实现之前，需要被编译几次，以确保。"

#. type: Plain text
#: _guides/native-reference.adoc
#, fuzzy
msgid "it’s worth compiling that code path, i.e. it’s being executed enough times, and that"
msgstr "值得对该代码路径进行编译，即它被执行了足够多的次数，并且"

#. type: Plain text
#: _guides/native-reference.adoc
#, fuzzy
msgid "we have enough profiling data to perform meaningful optimizations."
msgstr "我们有足够的分析数据来进行有意义的优化。"

#: _guides/native-reference.adoc
msgid ""
"An implication of 1) is that for small, short-lived applications a native executable may well be a better bet.\n"
"Although the compiled code is not as well optimized it is available straight away."
msgstr ""

#: _guides/native-reference.adoc
msgid ""
"The reason for 2) is that the JVM is essentially running the compiler at runtime in parallel with the application itself.\n"
"In the case of native executables the compiler is run ahead of time removing the need to run the compiler in parallel with the application."
msgstr ""

#: _guides/native-reference.adoc
msgid ""
"There are several reasons for 3). The JVM does not have a closed world assumption.\n"
"So, it has to be able to recompile code if loading of new classes implies that it needs to revise optimistic assumptions made at compile time.\n"
"For example, if an interface has only one implementation it can make a call jump directly to that code.\n"
"However, in the case where a second implementation class is loaded the call site needs to be patched to test the type of the receiver instance and jump to the code that belongs to its class.\n"
"Supporting optimizations like this one requires keeping track of a lot more details of the class base than a native executable,\n"
"including recording the full class and interface hierarchy,\n"
"details of which methods override other methods, all method bytecode etc.\n"
"In a native executable most of the details of class structure and bytecode can be ignored at run time."
msgstr ""

#: _guides/native-reference.adoc
msgid ""
"The JVM also has to cope with changes to the class base or execution profiles that result in a thread going down a previously cold path.\n"
"At that point the JVM has to jump out of the compiled code into the interpreter and recompile the code to cater for a new execution profile that includes the previously cold path.\n"
"That requires keeping runtime info that allow a compiled stack frame to be replaced with one or more interpreter frames.\n"
"It also requires runtime extensible profile counters to be allocated and updated to track what has or has not been executed."
msgstr ""

#. type: Title ===
#: _guides/native-reference.adoc
#, fuzzy, no-wrap
msgid "Why are native executables “big”?"
msgstr "为什么本地可执行文件是 \"大 \"的？"

#. type: Plain text
#: _guides/native-reference.adoc
#, fuzzy
msgid "This can be attributed to a number of different reasons:"
msgstr "这可以归因于一些不同的原因。"

#: _guides/native-reference.adoc
msgid ""
"Native executables include not only the application code but also, library code, and JDK code.\n"
"As a result a more fair comparison would be to compare the native executable’s size with the size of the application,\n"
"plus the size of the libraries it uses, plus the size of the JDK.\n"
"Especially the JDK part is not negligible even in simple applications like HelloWorld.\n"
"To get a glance on what is being pulled in the image one can use `-H:+PrintUniverse` when building the native executable."
msgstr ""

#: _guides/native-reference.adoc
msgid ""
"Some features are always included in a native executable even though they might never be actually used at run time.\n"
"An example of such a feature is garbage collection.\n"
"At compile time we can’t be sure whether an application will need to run garbage collection at run time,\n"
"so garbage collection is always included in native executables increasing their size even if not necessary.\n"
"Native executable generation relies on static code analysis to identify which code paths are reachable,\n"
"and static code analysis can be imprecise leading to more code getting into the image than what’s actually needed."
msgstr ""

#: _guides/native-reference.adoc
msgid ""
"There is a https://github.com/oracle/graal/issues/287[GraalVM upstream issue]\n"
"with some interesting discussions about that topic."
msgstr ""

#. type: Title ===
#: _guides/native-reference.adoc
#, fuzzy, no-wrap
msgid "What version of Mandrel was used to generate a binary?"
msgstr "使用哪个版本的Mandrel来生成二进制文件？"

#. type: Plain text
#: _guides/native-reference.adoc
#, fuzzy
msgid "One can see which Mandrel version was used to generate a binary by inspecting the binary as follows:"
msgstr "人们可以通过检查二进制文件来了解哪个Mandrel版本被用来生成二进制文件，如下所示。"

#. type: Title ===
#: _guides/native-reference.adoc
#, fuzzy, no-wrap
msgid "How do I enable GC logging in native executables?"
msgstr "如何在本地可执行文件中启用GC日志？"

#. type: Plain text
#: _guides/native-reference.adoc
#, fuzzy
msgid "See xref:gc-logging[Native Memory Management GC Logging section] for details."
msgstr "详见 link:#gc-logging[Native Memory Management GC Logging部分] 。"

#. type: Title ===
#: _guides/native-reference.adoc
#, fuzzy, no-wrap
msgid "Can I get a heap dump of a native executable? e.g. if it runs out of memory"
msgstr "我可以得到一个本地可执行程序的堆转储吗？ 例如，如果它的内存用完了"

#: _guides/native-reference.adoc
msgid ""
"Starting with GraalVM 22.2.0 it is possible to create heap dumps upon request,\n"
"e.g. `kill -SIGUSR1 <pid>`.\n"
"Support for dumping the heap dump upon an out of memory error will follow up."
msgstr ""

#. type: Title ===
#: _guides/native-reference.adoc
#, fuzzy, no-wrap
msgid "Can I build and run this examples outside a container in Linux?"
msgstr "我可以在Linux的容器外构建和运行这个例子吗？"

#: _guides/native-reference.adoc
msgid ""
"Yes you can.\n"
"In fact, debugging native executables on a Linux bare metal box offers the best possible experience.\n"
"In this kind of environments, root access is not needed except to install packages required to run some debug steps,\n"
"or to enable `perf` to gather events at the kernel."
msgstr ""

#. type: Plain text
#: _guides/native-reference.adoc
#, fuzzy
msgid "These are the packages you'll need on your Linux environment to run through the different debugging sections:"
msgstr "这些是你在Linux环境下运行不同调试部分所需的软件包。"

#. type: Title ===
#: _guides/native-reference.adoc
#, fuzzy, no-wrap
msgid "Generating flame graphs is slow, or produces errors, what can I do?"
msgstr "生成火焰图的速度很慢，或者产生错误，我可以做什么？"

#: _guides/native-reference.adoc
msgid ""
"There are multiple ways in which a native executable produced by Mandrel can be profiled.\n"
"All the methods require you to pass in the `-H:-DeleteLocalSymbols` option."
msgstr ""

#: _guides/native-reference.adoc
msgid ""
"The method shown in this reference guide generates a binary with DWARF debug information,\n"
"runs it via `perf record` and then uses `perf script` and flame graph tooling to generate the flamegraphs.\n"
"However, the `perf script` post-processing step done on this binary can appear to be slow or can show some DWARF errors."
msgstr ""

#: _guides/native-reference.adoc
msgid ""
"An alternative method to generate flame graphs is to pass in `-H:+PreserveFramePointer` when generating the native executable instead of generating the DWARF debug information.\n"
"It instructs the binary to use an extra register for the frame pointer.\n"
"This enables `perf` to do stack walking to profile the runtime behaviour.\n"
"To generate the native executable using these flags, do the following:"
msgstr ""

#. type: Plain text
#: _guides/native-reference.adoc
#, fuzzy
msgid "To get runtime profiling information out of the native executable, simply do:"
msgstr "要从本地可执行文件中获得运行时剖析信息，只需做以下工作。"

#: _guides/native-reference.adoc
msgid ""
"The recommended method for generating runtime profiling information is using the debug information rather than generating a binary that preserves the frame pointer.\n"
"This is because adding debug information to the native executable build process has no negative runtime performance whereas preserving the frame pointer does."
msgstr ""

#: _guides/native-reference.adoc
msgid ""
"DWARF debug info is generated in a separate file and can even be omitted in the default deployment and only be transferred and used on demand,\n"
"for profiling or debugging purposes.\n"
"Furthermore, the presence of debug info enables `perf` to show us the relevant source code lines as well,\n"
"hence it does not bloat the native executable itself.\n"
"To do that, simply call `perf report` with an extra parameter to show source code lines:"
msgstr ""

#: _guides/native-reference.adoc
msgid ""
"The performance penalty of preserving the frame pointer is due to using the extra register for stack walking,\n"
"particularly in `x86_64` compared to `aarch64` where there are fewer registers available.\n"
"Using this extra register reduces the number of registers that are available for other work,\n"
"which can lead to performance penalties."
msgstr ""

#. type: Title ===
#: _guides/native-reference.adoc
#, fuzzy, no-wrap
msgid "I think I’ve found a bug in native-image, how can I debug it with the IDE?"
msgstr "我想我在native-image中发现了一个bug，我怎样才能用IDE来调试它？"

#: _guides/native-reference.adoc
msgid ""
"Although it is possible to remote debug processes within containers,\n"
"it might be easier to step-by-step debug native-image by installing Mandrel locally and adding it to the path of the shell process."
msgstr ""

#: _guides/native-reference.adoc
msgid ""
"Native executable generation is the result of two Java processes that are executed sequentially.\n"
"The first process is very short and its main job is to set things up for the second process.\n"
"The second process is the one that takes care of most of the work.\n"
"The steps to debug one process or the other vary slightly."
msgstr ""

#: _guides/native-reference.adoc
msgid ""
"Let’s discuss first how to debug the second process,\n"
"which is the one you most likely to want to debug.\n"
"The starting point for the second process is the `com.oracle.svm.hosted.NativeImageGeneratorRunner` class.\n"
"To debug this process, simply add `--debug-attach=*:8000` as an additional build time argument:"
msgstr ""

#: _guides/native-reference.adoc
msgid ""
"The starting point for the first process is the `com.oracle.svm.driver.NativeImages` class.\n"
"In GraalVM CE distributions, this first process is a binary, so debugging it in the traditional way with a Java IDE is not possible.\n"
"However, Mandrel distributions (or locally built GraalVM CE instances) keep this as a normal Java process,\n"
"so you can remote debug this process by adding the `--vm.agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=*:8000` as an additional build argument, e.g."
msgstr ""

#. type: Title ===
#: _guides/native-reference.adoc
#, fuzzy, no-wrap
msgid "Can I use JFR/JMC to debug or profile native binaries?"
msgstr "我可以使用JFR/JMC来调试或剖析本地二进制文件吗？"

#: _guides/native-reference.adoc
msgid ""
"https://docs.oracle.com/javacomponents/jmc-5-4/jfr-runtime-guide/about.htm#JFRUH170[Java Flight Recorder (JFR)] and\n"
"https://www.oracle.com/java/technologies/jdk-mission-control.html[JDK Mission Control (JMC)]\n"
"can be used to profile native binaries since GraalVM CE 21.2.0.\n"
"However, JFR in GraalVM is currently limited in capabilities compared to HotSpot.\n"
"The custom event API is fully supported, but some VM level features are unavailable.\n"
"More events and JFR features will continue to be added in later releases.\n"
"The following table outlines Native Image JFR support and limitations by version."
msgstr ""

#. type: Table
#: _guides/native-reference.adoc
#, fuzzy, no-wrap
msgid "GraalVM Version"
msgstr "GraalVM版本"

#. type: Table
#: _guides/native-reference.adoc
#, fuzzy, no-wrap
msgid "Supports"
msgstr "支持"

#. type: Table
#: _guides/native-reference.adoc
#, fuzzy, no-wrap
msgid "Limitations"
msgstr "限制条件"

#. type: Table
#: _guides/native-reference.adoc
#, fuzzy, no-wrap
msgid "GraalVM CE 21.3 and Mandrel 21.3"
msgstr "GraalVM CE 21.3和Mandrel 21.3"

#: _guides/native-reference.adoc
msgid ""
"* Minimal VM Level events\n"
"* Custom events API\n"
"* Start recordings upon executabe run or JFR Recording API"
msgstr ""

#: _guides/native-reference.adoc
msgid ""
"* No old object sampling\n"
"* No stacktrace tracing\n"
"* No event streaming"
msgstr ""

#. type: Table
#: _guides/native-reference.adoc
#, fuzzy, no-wrap
msgid "GraalVM CE 22.3 and Mandrel 22.3"
msgstr "GraalVM CE 22.3和Mandrel 22.3"

#: _guides/native-reference.adoc
msgid ""
"* Everything from GraalVM CE 21.3\n"
"* Additional monitor and thread events"
msgstr ""

#. type: Table
#: _guides/native-reference.adoc
#, fuzzy, no-wrap
msgid "GraalVM CE for JDK 17/20 and Mandrel 23.0"
msgstr "用于JDK 17/20和Mandrel 23.0的GraalVM CE"

#: _guides/native-reference.adoc
msgid ""
"* Everything from GraalVM CE 22.3\n"
"* Additional monitor, thread, container, and allocation events\n"
"* Stacktraces\n"
"* Sampling based method profiling\n"
"* Event streaming"
msgstr ""

#. type: Table
#: _guides/native-reference.adoc
#, fuzzy, no-wrap
msgid "* No old object sampling"
msgstr "没有旧对象取样"

#: _guides/native-reference.adoc
msgid ""
"To add JFR support to your Quarkus executable, add the application property: `-Dquarkus.native.monitoring=jfr`.\n"
"E.g."
msgstr ""

#. type: Plain text
#: _guides/native-reference.adoc
#, fuzzy
msgid "Once the image is compiled, enable and start JFR via runtime flags: `-XX:+FlightRecorder` and `-XX:StartFlightRecording`. For example:"
msgstr "一旦图像被编译，通过运行时标志启用和启动JFR： `-XX:+FlightRecorder` 和 `-XX:StartFlightRecording` 。比如说。"

#. type: Plain text
#: _guides/native-reference.adoc
#, fuzzy
msgid "For more information about using JFR, see the link:https://www.graalvm.org/{graalvm-docs-version}/reference-manual/native-image/debugging-and-diagnostics/JFR/[GraalVM JDK Flight Recorder (JFR) with Native Image] guide."
msgstr "关于使用JFR的更多细节，请看 link:https://www.graalvm.org/reference-manual/native-image/JFR[这里] 。"

#. type: Title ===
#: _guides/native-reference.adoc
#, fuzzy, no-wrap
msgid "How can we troubleshoot performance problems only reproducible in production?"
msgstr "我们怎样才能排除只有在生产中才能重现的性能问题？"

#: _guides/native-reference.adoc
msgid ""
"In this situation, switching to JVM mode would be the best thing to try first.\n"
"If the performance issues continue after switching to JVM mode,\n"
"you can use more established and mature tooling to figure out the root cause.\n"
"If the performance issue is limited to native mode only,\n"
"you might not be able to use `perf`,\n"
"so JFR is the only way to gather any information in this situation.\n"
"As JFR support for native expands,\n"
"the ability to detect root causes of performance issues directly in production will improve."
msgstr ""

#. type: Title ===
#: _guides/native-reference.adoc
#, fuzzy, no-wrap
msgid "What information helps most debug issues that happen either at build-time or run-time?"
msgstr "哪些信息最有助于调试在构建时或运行时发生的问题？"

#: _guides/native-reference.adoc
msgid ""
"To fix classpath, class initialization or forbidden API errors at build time it's best to use xref:native-reports[build time reports] to understand the closed world universe.\n"
"A complete picture of the universe, along with the relationships between the different classes and methods will help uncover and fix most of the issues."
msgstr ""

#: _guides/native-reference.adoc
msgid ""
"To fix runtime native specific errors,\n"
"it's best to have xref:debug-info[debug info builds] of the native executables around,\n"
"so that `gdb` can be hooked up quickly to debug the issue.\n"
"If you also add local symbols to the debug info builds,\n"
"you will obtain precise xref:profiling[profiling information] as well."
msgstr ""

#. type: Title ===
#: _guides/native-reference.adoc
#, fuzzy, no-wrap
msgid "Build stalled for minutes, barely using any CPU"
msgstr "建设停滞了几分钟，几乎没有使用任何CPU"

#. type: Plain text
#: _guides/native-reference.adoc
#, fuzzy
msgid "It might so happen that the build gets stalled and even ends up with:"
msgstr "可能会发生这样的情况，即建设被停滞，甚至以失败告终："

#. type: Plain text
#: _guides/native-reference.adoc
#, fuzzy
msgid "One of the possible explanations could be a lack of entropy, e.g. on an entropy constrained VM, if such a source is needed as it is the case with Bouncycastle at build time."
msgstr "可能的解释之一是缺乏熵，例如在熵受限的虚拟机上，如果需要这样的源，就像Bouncycastle在构建时的情况。"

#. type: Plain text
#: _guides/native-reference.adoc
#, fuzzy
msgid "One can check the available entropy on a Linux system with:"
msgstr "人们可以用以下方法检查Linux系统上的可用熵值："

#. type: Plain text
#: _guides/native-reference.adoc
#, fuzzy
msgid "If the amount is not in hundreds, it could be a problem. A possible workaround is to compromise, acceptable for testing, and set:"
msgstr "如果金额不是以百为单位，可能是个问题。一个可能的变通办法是妥协，可接受的测试，并设置："

#. type: Plain text
#: _guides/native-reference.adoc
#, fuzzy
msgid "The proper solution is to increase the entropy available for the system. That is specific for each OS vendor and virtualization solution though."
msgstr "正确的解决方案是增加系统可用的熵。但这是针对每个操作系统供应商和虚拟化解决方案的。"

#. type: Title ===
#: _guides/native-reference.adoc
#, fuzzy, no-wrap
msgid "Work around missing CPU features"
msgstr "围绕缺失的CPU功能开展工作"

#. type: Plain text
#: _guides/native-reference.adoc
#, fuzzy
msgid "When building on recent machines and running your native executable on older machines, you may see the following failure when starting the application:"
msgstr "当在最近的机器上构建并在旧机器上运行你的本地可执行文件时，你可能会在启动应用程序时看到以下故障："

#: _guides/native-reference.adoc
msgid ""
"This error message means that the native compilation used more advanced instruction sets, not supported by the CPU running the application.\n"
"To work around that issue, add the following line to the `application.properties`:"
msgstr ""

#: _guides/native-reference.adoc
msgid ""
"Then, rebuild your native executable.\n"
"This setting forces the native compilation to use an older instruction set, increasing the chance of compatibility."
msgstr ""

#: _guides/native-reference.adoc
msgid ""
"To explicitly define the target architecture run `native-image -march=list` to get the supported configurations and then set `-march` to one of them, e.g., `quarkus.native.additional-build-args=-march=x86-64-v4`.\n"
"If you are targeting an AMD64 host, `-march=x86-64-v2` would work in most cases."
msgstr ""

#. type: Plain text
#: _guides/native-reference.adoc
msgid "The `march` parameter is only available on GraalVM 23+."
msgstr ""
