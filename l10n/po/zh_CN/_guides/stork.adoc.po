# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:52+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/stork.adoc:6
#, fuzzy, no-wrap
msgid "Getting Started with SmallRye Stork"
msgstr "开始使用SmallRye Stork"

#. type: Plain text
#: upstream/_guides/stork.adoc:19
#, fuzzy
msgid "The essence of distributed systems resides in the interaction between services.  In modern architecture, you often have multiple instances of your service to share the load or improve the resilience by redundancy.  But how do you select the best instance of your service? That's where https://smallrye.io/smallrye-stork[SmallRye Stork] helps.  Stork is going to choose the most appropriate instance.  It offers:"
msgstr "分布式系统的本质在于服务之间的互动。在现代架构中，你经常有多个服务实例来分担负载或通过冗余来提高弹性。但是，你如何选择你的服务的最佳实例？这就是 link:https://smallrye.io/smallrye-stork[SmallRye Stork] 的帮助所在。Stork要选择最合适的实例。它提供。"

#. type: Plain text
#: upstream/_guides/stork.adoc:21
#, fuzzy
msgid "Extensible service discovery mechanisms"
msgstr "可扩展的服务发现机制"

#. type: Plain text
#: upstream/_guides/stork.adoc:22
#, fuzzy
msgid "Built-in support for Consul and Kubernetes"
msgstr "对Consul和Kubernetes的内置支持"

#. type: Plain text
#: upstream/_guides/stork.adoc:23
#, fuzzy
msgid "Customizable client load-balancing strategies"
msgstr "可定制的客户端负载平衡策略"

#. type: Title ==
#: upstream/_guides/stork.adoc:26
#, fuzzy, no-wrap
msgid "Prerequisites"
msgstr "先决条件"

#. type: Title ==
#: upstream/_guides/stork.adoc:31
#, fuzzy, no-wrap
msgid "Architecture"
msgstr "建筑学"

#. type: Plain text
#: upstream/_guides/stork.adoc:34
#, fuzzy
msgid "In this guide, we will build an application composed of:"
msgstr "在本指南中，我们将建立一个由以下部分组成的应用程序。"

#. type: Plain text
#: upstream/_guides/stork.adoc:36
#, fuzzy
msgid "A simple blue service exposed on port 9000"
msgstr "一个简单的蓝色服务暴露在9000端口上"

#. type: Plain text
#: upstream/_guides/stork.adoc:37
#, fuzzy
msgid "A simple red service exposed on port 9001"
msgstr "一个简单的红色服务暴露在9001端口上"

#. type: Plain text
#: upstream/_guides/stork.adoc:38
#, fuzzy
msgid "A REST Client calling the blue or red service (the selection is delegated to Stork)"
msgstr "一个调用蓝色或红色服务的REST客户端（选择权下放给Stork）。"

#. type: Plain text
#: upstream/_guides/stork.adoc:39
#, fuzzy
msgid "A REST endpoint using the REST client and calling the services"
msgstr "一个使用REST客户端并调用服务的REST端点"

#. type: Plain text
#: upstream/_guides/stork.adoc:40
#, fuzzy
msgid "The blue and red services are registered in https://www.consul.io/[Consul]."
msgstr "蓝色和红色的服务是在 link:https://www.consul.io/[Consul] 注册的。"

#. type: Positional ($1) AttributeList argument for macro 'image'
#: upstream/_guides/stork.adoc:41
#, fuzzy, no-wrap
msgid "Architecture of the application"
msgstr "应用程序的架构"

#. type: Target for macro image
#: upstream/_guides/stork.adoc:41
#, no-wrap
msgid "stork-getting-started-architecture.png"
msgstr ""

#. type: Plain text
#: upstream/_guides/stork.adoc:45
#, fuzzy
msgid "For the sake of simplicity, everything (except Consul) will be running in the same Quarkus application.  Of course, each component will run in its own process in the real world."
msgstr "为了简单起见，所有的东西（除了Consul）都将在同一个Quarkus应用程序中运行。当然，在现实世界中，每个组件将在自己的进程中运行。"

#. type: Title ==
#: upstream/_guides/stork.adoc:46
#, fuzzy, no-wrap
msgid "Solution"
msgstr "解决方案"

#. type: Plain text
#: upstream/_guides/stork.adoc:50
#, fuzzy
msgid "We recommend that you follow the instructions in the next sections and create the applications step by step.  However, you can go right to the completed example."
msgstr "我们建议你按照下面几节的说明，一步一步地创建应用程序。然而，你可以直接进入已完成的例子。"

#. type: Plain text
#: upstream/_guides/stork.adoc:52
#, fuzzy
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "克隆 Git 仓库。 `git clone {quickstarts-clone-url}` ，或者下载一个 {quickstarts-archive-url}[存档] 。"

#. type: Plain text
#: upstream/_guides/stork.adoc:54
#, fuzzy
msgid "The solution is located in the `stork-quickstart` {quickstarts-tree-url}/stork-quickstart[directory]."
msgstr "该解决方案位于 `stork-quickstart` {quickstarts-tree-url}/stork-quickstart[目录]中。"

#. type: Title ==
#: upstream/_guides/stork.adoc:55
#, fuzzy, no-wrap
msgid "Discovery and selection"
msgstr "发现和选择"

#. type: Plain text
#: upstream/_guides/stork.adoc:58
#, fuzzy
msgid "Before going further, we need to discuss discovery vs. selection."
msgstr "在进一步讨论之前，我们需要讨论发现与选择。"

#. type: Plain text
#: upstream/_guides/stork.adoc:61
#, fuzzy
msgid "Service discovery is the process of locating service instances.  It produces a list of service instances that is potentially empty (if no service matches the request) or contains multiple service instances."
msgstr "服务发现是定位服务实例的过程。它产生一个服务实例的列表，该列表可能是空的（如果没有与请求相匹配的服务）或包含多个服务实例。"

#. type: Plain text
#: upstream/_guides/stork.adoc:64
#, fuzzy
msgid "Service selection, also called load-balancing, chooses the best instance from the list returned by the discovery process.  The result is a single service instance or an exception when no suitable instance can be found."
msgstr "服务选择，也称为负载平衡，从发现过程返回的列表中选择最佳实例。其结果是一个单一的服务实例，或者在找不到合适的实例时出现异常。"

#. type: Plain text
#: upstream/_guides/stork.adoc:68
#, fuzzy
msgid "Stork handles both discovery and selection.  However, it does not handle the communication with the service but only provides a service instance.  The various integrations in Quarkus extract the location of the service from that service instance."
msgstr "Stork同时处理发现和选择。然而，它并不处理与服务的通信，而只是提供一个服务实例。Quarkus的各种集成从该服务实例中提取服务的位置。"

#. type: Positional ($1) AttributeList argument for macro 'image'
#: upstream/_guides/stork.adoc:69
#, fuzzy, no-wrap
msgid "Discovery and Selection of services"
msgstr "发现和选择服务"

#. type: Target for macro image
#: upstream/_guides/stork.adoc:69
#, no-wrap
msgid "stork-process.png"
msgstr ""

#. type: Title ==
#: upstream/_guides/stork.adoc:71
#, fuzzy, no-wrap
msgid "Bootstrapping the project"
msgstr "引导项目"

#. type: Plain text
#: upstream/_guides/stork.adoc:74
#, fuzzy
msgid "Create a Quarkus project importing the quarkus-rest-client-reactive and quarkus-resteasy-reactive extensions using your favorite approach:"
msgstr "使用你喜欢的方法创建一个Quarkus项目，导入quarkus-rest-client-reactive和quarkus-resteasy-reactive扩展。"

#. type: Plain text
#: upstream/_guides/stork.adoc:80
#, fuzzy
msgid "In the generated project, also add the following dependencies:"
msgstr "在生成的项目中，还要添加以下依赖项。"

#. type: Block title
#: upstream/_guides/stork.adoc:82
#, fuzzy, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: delimited block -
#: upstream/_guides/stork.adoc:92
#, no-wrap
msgid ""
"<dependency>\n"
"  <groupId>io.smallrye.stork</groupId>\n"
"  <artifactId>stork-service-discovery-consul</artifactId>\n"
"</dependency>\n"
"<dependency>\n"
"  <groupId>io.smallrye.reactive</groupId>\n"
"  <artifactId>smallrye-mutiny-vertx-consul-client</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_guides/stork.adoc:95
#, fuzzy, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: delimited block -
#: upstream/_guides/stork.adoc:99
#, no-wrap
msgid ""
"implementation(\"io.smallrye.stork:stork-service-discovery-consul\")\n"
"implementation(\"io.smallrye.reactive:smallrye-mutiny-vertx-consul-client\")\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/stork.adoc:103
#, fuzzy
msgid "`stork-service-discovery-consul` provides an implementation of service discovery for Consul.  `smallrye-mutiny-vertx-consul-client` is a Consul client which we will use to register our services in Consul."
msgstr " `stork-service-discovery-consul` `smallrye-mutiny-vertx-consul-client` 是一个Consul客户端，我们将用它来在Consul中注册我们的服务。"

#. type: Title ==
#: upstream/_guides/stork.adoc:104
#, fuzzy, no-wrap
msgid "The Blue and Red services"
msgstr "蓝色和红色服务"

#. type: Plain text
#: upstream/_guides/stork.adoc:107
#, fuzzy
msgid "Let's start with the very beginning: the service we will discover, select and call."
msgstr "让我们从最开始说起：我们将发现、选择和调用的服务。"

#. type: Plain text
#: upstream/_guides/stork.adoc:109
#, fuzzy
msgid "Create the `src/main/java/org/acme/services/BlueService.java` with the following content:"
msgstr "用以下内容创建 `src/main/java/org/acme/services/BlueService.java` 。"

#. type: delimited block -
#: upstream/_guides/stork.adoc:113 upstream/_guides/stork.adoc:148
#: upstream/_guides/stork.adoc:187
#, no-wrap
msgid "package org.acme.services;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/stork.adoc:117 upstream/_guides/stork.adoc:152
#, no-wrap
msgid ""
"import io.quarkus.runtime.StartupEvent;\n"
"import io.vertx.mutiny.core.Vertx;\n"
"import org.eclipse.microprofile.config.inject.ConfigProperty;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/stork.adoc:120 upstream/_guides/stork.adoc:155
#: upstream/_guides/stork.adoc:197
#, no-wrap
msgid ""
"import javax.enterprise.context.ApplicationScoped;\n"
"import javax.enterprise.event.Observes;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/stork.adoc:123
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class BlueService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/stork.adoc:125
#, no-wrap
msgid "    @ConfigProperty(name = \"blue-service-port\", defaultValue = \"9000\") int port;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/stork.adoc:137
#, no-wrap
msgid ""
"    /**\n"
"     * Start an HTTP server for the blue service.\n"
"     *\n"
"     * Note: this method is called on a worker thread, and so it is allowed to block.\n"
"     */\n"
"    public void init(@Observes StartupEvent ev, Vertx vertx) {\n"
"        vertx.createHttpServer()\n"
"                .requestHandler(req -> req.response().endAndForget(\"Hello from Blue!\"))\n"
"                .listenAndAwait(port);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/stork.adoc:141
#, fuzzy
msgid "It creates a new HTTP server (using Vert.x) and implements our simple service when the application starts.  For each HTTP request, it sends a response with \"Hello from Blue!\" as the body."
msgstr "它创建了一个新的HTTP服务器（使用Vert.x）并在应用程序启动时实现了我们的简单服务。对于每个HTTP请求，它都会发送一个以 \"Hello from Blue!\"为正文的响应。"

#. type: Plain text
#: upstream/_guides/stork.adoc:143
#, fuzzy
msgid "Following the same logic, create the `src/main/java/org/acme/services/RedService.java` with the following content:"
msgstr "按照同样的逻辑，用以下内容创建 `src/main/java/org/acme/services/RedService.java` 。"

#. type: delimited block -
#: upstream/_guides/stork.adoc:159
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class RedService {\n"
"    @ConfigProperty(name = \"red-service-port\", defaultValue = \"9001\") int port;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/stork.adoc:170
#, no-wrap
msgid ""
"    /**\n"
"     * Start an HTTP server for the red service.\n"
"     *\n"
"     * Note: this method is called on a worker thread, and so it is allowed to block.\n"
"     */\n"
"    public void init(@Observes StartupEvent ev, Vertx vertx) {\n"
"        vertx.createHttpServer()\n"
"                .requestHandler(req -> req.response().endAndForget(\"Hello from Red!\"))\n"
"                .listenAndAwait(port);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/stork.adoc:172 upstream/_guides/stork.adoc:295
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/stork.adoc:175
#, fuzzy
msgid "This time, it writes \"Hello from Red!\"."
msgstr "这一次，它写下了 \"来自红色的你好！\"。"

#. type: Title ==
#: upstream/_guides/stork.adoc:176
#, fuzzy, no-wrap
msgid "Service registration in Consul"
msgstr "领事部的服务登记"

#. type: Plain text
#: upstream/_guides/stork.adoc:179
#, fuzzy
msgid "Now that we have implemented our services, we need to register them into Consul."
msgstr "现在我们已经实现了我们的服务，我们需要将它们注册到Consul中。"

#. type: Plain text
#: upstream/_guides/stork.adoc:181
#, fuzzy
msgid "Stork is not limited to Consul and integrates with other service discovery mechanisms."
msgstr "Stork并不局限于Consul，而是与其他服务发现机制集成。"

#. type: Plain text
#: upstream/_guides/stork.adoc:183
#, fuzzy
msgid "Create the `src/main/java/org/acme/services/Registration.java` file with the following content:"
msgstr "创建具有以下内容的 `src/main/java/org/acme/services/Registration.java` 文件。"

#. type: delimited block -
#: upstream/_guides/stork.adoc:194
#, no-wrap
msgid ""
"import io.quarkus.runtime.StartupEvent;\n"
"import io.vertx.ext.consul.ServiceOptions;\n"
"import io.vertx.mutiny.ext.consul.ConsulClient;\n"
"import io.vertx.ext.consul.ConsulClientOptions;\n"
"import io.vertx.mutiny.core.Vertx;\n"
"import org.eclipse.microprofile.config.inject.ConfigProperty;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/stork.adoc:200
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class Registration {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/stork.adoc:203
#, no-wrap
msgid ""
"    @ConfigProperty(name = \"consul.host\") String host;\n"
"    @ConfigProperty(name = \"consul.port\") int port;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/stork.adoc:206
#, no-wrap
msgid ""
"    @ConfigProperty(name = \"blue-service-port\", defaultValue = \"9000\") int red;\n"
"    @ConfigProperty(name = \"red-service-port\", defaultValue = \"9001\") int blue;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/stork.adoc:214
#, no-wrap
msgid ""
"    /**\n"
"     * Register our two services in Consul.\n"
"     *\n"
"     * Note: this method is called on a worker thread, and so it is allowed to block.\n"
"     */\n"
"    public void init(@Observes StartupEvent ev, Vertx vertx) {\n"
"        ConsulClient client = ConsulClient.create(vertx, new ConsulClientOptions().setHost(host).setPort(port));\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/stork.adoc:219
#, no-wrap
msgid ""
"        client.registerServiceAndAwait(\n"
"                new ServiceOptions().setPort(blue).setAddress(\"localhost\").setName(\"my-service\").setId(\"blue\"));\n"
"        client.registerServiceAndAwait(\n"
"                new ServiceOptions().setPort(red).setAddress(\"localhost\").setName(\"my-service\").setId(\"red\"));\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/stork.adoc:222
#, no-wrap
msgid ""
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/stork.adoc:226
#, fuzzy
msgid "When the application starts, it connects to Consul using the Vert.x Consul Client and registers our two instances.  Both registration uses the same name (`my-service`), but different ids to indicate that it's two instances of the same _service_."
msgstr "当应用程序启动时，它使用Vert.x Consul客户端连接到Consul，并注册了我们的两个实例。两个注册都使用了相同的名字( `my-service` )，但是不同的id来表示这是同一个 _服务_ 的两个实例。"

#. type: Title ==
#: upstream/_guides/stork.adoc:227
#, fuzzy, no-wrap
msgid "The REST Client interface and the front end API"
msgstr "REST客户接口和前端API"

#. type: Plain text
#: upstream/_guides/stork.adoc:230
#, fuzzy
msgid "So far, we didn't use Stork; we just scaffolded the services we will be discovering, selecting, and calling."
msgstr "到目前为止，我们没有使用Stork；我们只是为我们将要发现、选择和调用的服务搭建了支架。"

#. type: Plain text
#: upstream/_guides/stork.adoc:233
#, fuzzy
msgid "We will call the services using the Reactive REST Client.  Create the `src/main/java/org/acme/MyService.java` file with the following content:"
msgstr "我们将使用Reactive REST客户端调用这些服务。创建 `src/main/java/org/acme/MyService.java` 文件，内容如下。"

#. type: delimited block -
#: upstream/_guides/stork.adoc:237 upstream/_guides/stork.adoc:272
#, no-wrap
msgid "package org.acme;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/stork.adoc:239
#, no-wrap
msgid "import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/stork.adoc:243
#, no-wrap
msgid ""
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/stork.adoc:253
#, no-wrap
msgid ""
"/**\n"
" * The REST Client interface.\n"
" *\n"
" * Notice the `baseUri`. It uses `stork://` as URL scheme indicating that the called service uses Stork to locate and\n"
" * select the service instance. The `my-service` part is the service name. This is used to configure Stork discovery\n"
" * and selection in the `application.properties` file.\n"
" */\n"
"@RegisterRestClient(baseUri = \"stork://my-service\")\n"
"public interface MyService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/stork.adoc:258
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    String get();\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/stork.adoc:265
#, fuzzy
msgid "It's a straightforward REST client interface containing a single method. However, note the `baseUri` attribute.  It starts with `stork://`.  It instructs the REST client to delegate the discovery and selection of the service instances to Stork.  Notice the `my-service` part in the URL.  It is the service name we will be using in the application configuration."
msgstr "这是一个直接的REST客户接口，包含一个单一的方法。然而，请注意 `baseUri` 属性。它以 `stork://` 开始。它指示REST客户端将发现和选择服务实例的工作委托给Stork。注意URL中的 `my-service` 部分。它是我们将在应用程序配置中使用的服务名称。"

#. type: Plain text
#: upstream/_guides/stork.adoc:268
#, fuzzy
msgid "It does not change how the REST client is used.  Create the `src/main/java/org/acme/FrontendApi.java` file with the following content:"
msgstr "它不会改变REST客户端的使用方式。创建 `src/main/java/org/acme/FrontendApi.java` 文件，内容如下。"

#. type: delimited block -
#: upstream/_guides/stork.adoc:274
#, no-wrap
msgid "import org.eclipse.microprofile.rest.client.inject.RestClient;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/stork.adoc:279
#, no-wrap
msgid ""
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/stork.adoc:285
#, no-wrap
msgid ""
"/**\n"
" * A frontend API using our REST Client (which uses Stork to locate and select the service instance on each call).\n"
" */\n"
"@Path(\"/api\")\n"
"public class FrontendApi {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/stork.adoc:287
#, no-wrap
msgid "    @RestClient MyService service;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/stork.adoc:293
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String invoke() {\n"
"        return service.get();\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/stork.adoc:298
#, fuzzy
msgid "It injects and uses the REST client as usual."
msgstr "它像往常一样注入并使用REST客户端。"

#. type: Title ==
#: upstream/_guides/stork.adoc:299
#, fuzzy, no-wrap
msgid "Stork configuration"
msgstr "鹳鸟配置"

#. type: Plain text
#: upstream/_guides/stork.adoc:302
#, fuzzy
msgid "The system is almost complete. We only need to configure Stork and the `Registration` bean."
msgstr "该系统几乎已经完成。我们只需要配置Stork和 `Registration` bean。"

#. type: Plain text
#: upstream/_guides/stork.adoc:304
#, fuzzy
msgid "In the `src/main/resources/application.properties`, add:"
msgstr "在 `src/main/resources/application.properties` ，添加。"

#. type: delimited block -
#: upstream/_guides/stork.adoc:309
#, no-wrap
msgid ""
"consul.host=localhost\n"
"consul.port=8500\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/stork.adoc:314
#, no-wrap
msgid ""
"quarkus.stork.my-service.service-discovery.type=consul\n"
"quarkus.stork.my-service.service-discovery.consul-host=localhost\n"
"quarkus.stork.my-service.service-discovery.consul-port=8500\n"
"quarkus.stork.my-service.load-balancer.type=round-robin\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/stork.adoc:317
#, fuzzy
msgid "The first two lines provide the Consul location used by the `Registration` bean."
msgstr "前两行提供了 `Registration` bean所使用的Consul位置。"

#. type: Plain text
#: upstream/_guides/stork.adoc:324
#, fuzzy
msgid "The other properties are related to Stork.  `stork.my-service.service-discovery` indicates which type of service discovery we will be using to locate the `my-service` service.  In our case, it's `consul`.  `quarkus.stork.my-service.service-discovery.consul-host` and `quarkus.stork.my-service.service-discovery.consul-port` configures the access to Consul.  Finally, `quarkus.stork.my-service.load-balancer.type` configures the service selection.  In our case, we use a `round-robin`."
msgstr "其他属性与Stork有关。 `stork.my-service.service-discovery` 表示我们将使用哪种类型的服务发现来定位 `my-service` 服务。在我们的例子中，是 `consul` 。 `quarkus.stork.my-service.service-discovery.consul-host` 和 `quarkus.stork.my-service.service-discovery.consul-port` 配置了对 Consul 的访问。最后， `quarkus.stork.my-service.load-balancer.type` 配置了服务选择。在我们的案例中，我们使用的是 `round-robin` 。"

#. type: Title ==
#: upstream/_guides/stork.adoc:325
#, fuzzy, no-wrap
msgid "Running the application"
msgstr "运行应用程序"

#. type: Plain text
#: upstream/_guides/stork.adoc:329
#, fuzzy
msgid "We're done! So, let's see if it works."
msgstr "我们完成了!那么，让我们看看它是否有效。"

#. type: Plain text
#: upstream/_guides/stork.adoc:331
#, fuzzy
msgid "First, start Consul:"
msgstr "首先，启动执政官。"

#. type: delimited block -
#: upstream/_guides/stork.adoc:335
#, no-wrap
msgid "docker run --rm --name consul -p 8500:8500 -p 8501:8501 consul:1.7 agent -dev -ui -client=0.0.0.0 -bind=0.0.0.0 --https-port=8501\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/stork.adoc:338
#, fuzzy
msgid "If you start Consul differently, do not forget to edit the application configuration."
msgstr "如果你以不同方式启动Consul，不要忘记编辑应用程序的配置。"

#. type: Plain text
#: upstream/_guides/stork.adoc:340
#, fuzzy
msgid "Then, package the application:"
msgstr "然后，将应用程序打包。"

#. type: Plain text
#: upstream/_guides/stork.adoc:344
#, fuzzy
msgid "And run it:"
msgstr "并运行它。"

#. type: delimited block -
#: upstream/_guides/stork.adoc:348
#, no-wrap
msgid "> java -jar target/quarkus-app/quarkus-run.jar\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/stork.adoc:351
#, fuzzy
msgid "In another terminal, run:"
msgstr "在另一个终端，运行。"

#. type: delimited block -
#: upstream/_guides/stork.adoc:360
#, no-wrap
msgid ""
"> curl http://localhost:8080/api\n"
"...\n"
"> curl http://localhost:8080/api\n"
"...\n"
"> curl http://localhost:8080/api\n"
"...\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/stork.adoc:363
#, fuzzy
msgid "The responses alternate between `Hello from Red!` and `Hello from Blue!`."
msgstr "答复在 `Hello from Red!` 和 `Hello from Blue!` 之间交替进行。"

#. type: Plain text
#: upstream/_guides/stork.adoc:365
#, fuzzy
msgid "You can compile this application into a native executable:"
msgstr "你可以将这个应用程序编译成一个本地可执行文件。"

#. type: Plain text
#: upstream/_guides/stork.adoc:369
#, fuzzy
msgid "And start it with:"
msgstr "并以此为起点。"

#. type: delimited block -
#: upstream/_guides/stork.adoc:373
#, no-wrap
msgid "> ./target/stork-getting-started-1.0.0-SNAPSHOT-runner\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/stork.adoc:375
#, fuzzy, no-wrap
msgid "Going further"
msgstr "更进一步"

#. type: Plain text
#: upstream/_guides/stork.adoc:379
msgid "This guide has shown how to use SmallRye Stork to discover and select your services.  You can find more about Stork in:"
msgstr ""

#. type: Plain text
#: upstream/_guides/stork.adoc:381
msgid "the xref:stork-reference.adoc[Stork reference guide],"
msgstr ""

#. type: Plain text
#: upstream/_guides/stork.adoc:381
msgid "the https://smallrye.io/smallrye-stork[SmallRye Stork website]."
msgstr ""
