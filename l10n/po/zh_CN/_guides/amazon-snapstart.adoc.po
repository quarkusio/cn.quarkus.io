# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-04-26 15:05+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/amazon-snapstart.adoc:6
#, fuzzy, no-wrap
msgid "Amazon Lambda SnapStart Configuration"
msgstr "亚马逊Lambda SnapStart配置"

#. type: Plain text
#: upstream/_guides/amazon-snapstart.adoc:14
#, fuzzy
msgid "https://docs.aws.amazon.com/lambda/latest/dg/snapstart.html[SnapStart] is a snapshotting and restore mechanism reducing drastically the cold startup time of Java functions on AWS.  This document explains the various settings you can use to leverage this feature.  It is not a reference documentation on SnapStart, and it will not cover how SnapStart works in details."
msgstr "link:https://docs.aws.amazon.com/lambda/latest/dg/snapstart.html[SnapStart] 是一种快照和恢复机制，可大幅减少AWS上Java功能的冷启动时间。本文档解释了你可以用来利用这一功能的各种设置。它不是关于SnapStart的参考文档，也不会涵盖SnapStart工作的细节。"

#. type: Plain text
#: upstream/_guides/amazon-snapstart.adoc:17
#, fuzzy
msgid "This feature is only available on AWS Lambda, and not in all regions.  Please check the AWS documentation to verify the eligibility of your AWS region."
msgstr "该功能仅在AWS Lambda上可用，并不是在所有地区都可用。请检查AWS文档，以验证您的AWS地区的资格。"

#. type: Title ==
#: upstream/_guides/amazon-snapstart.adoc:18
#, fuzzy, no-wrap
msgid "Enabling / Disabling SnapStart Optimizations"
msgstr "启用/禁用SnapStart优化功能"

#. type: Plain text
#: upstream/_guides/amazon-snapstart.adoc:22
#, fuzzy
msgid "If you use the Quarkus Amazon Lambda extension, SnapStart optimizations are automatically enabled.  However, you can enable/disable it explicitly using:"
msgstr "如果你使用Quarkus Amazon Lambda扩展，SnapStart优化会自动启用。然而，你可以用以下方式明确地启用/禁用它。"

#. type: delimited block -
#: upstream/_guides/amazon-snapstart.adoc:26
#, no-wrap
msgid "quarkus.snapstart.enable=true|false\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/amazon-snapstart.adoc:29
#, fuzzy
msgid "It does not enable/disable SnapStart for your function, only the Quarkus optimizations."
msgstr "它不会为你的功能启用/禁用SnapStart，只对Quarkus进行优化。"

#. type: Title ==
#: upstream/_guides/amazon-snapstart.adoc:30
#, fuzzy, no-wrap
msgid "Class Preloading"
msgstr "类预装"

#. type: Plain text
#: upstream/_guides/amazon-snapstart.adoc:34
#, fuzzy
msgid "Classloading has a huge impact on your function execution time.  This optimization allows preloading classes during the snapshotting process of SnapStart."
msgstr "类的加载对你的函数执行时间有很大影响。这种优化允许在SnapStart的快照过程中预加载类。"

#. type: Plain text
#: upstream/_guides/amazon-snapstart.adoc:36
#, fuzzy
msgid "The classes to preload are listed in two places:"
msgstr "要预加载的类在两个地方列出。"

#. type: Plain text
#: upstream/_guides/amazon-snapstart.adoc:38
#, fuzzy
msgid "extensions can produce a list of classes (using the `io.quarkus.deployment.builditem.PreloadClassBuildItem` build item)"
msgstr "扩展程序可以产生一个类的列表（使用 `io.quarkus.deployment.builditem.PreloadClassBuildItem` 构建项）"

#. type: Plain text
#: upstream/_guides/amazon-snapstart.adoc:39
#, fuzzy
msgid "you can add a `src/main/resources/META-INF/quarkus-preload-classes.txt` file listing the classes to preload, such as:"
msgstr "你可以添加一个 `src/main/resources/META-INF/quarkus-preload-classes.txt` 文件，列出要预加载的类，例如。"

#. type: delimited block -
#: upstream/_guides/amazon-snapstart.adoc:64
#, no-wrap
msgid ""
"com.amazonaws.services.lambda.runtime.LambdaRuntimeInternal\n"
"com.fasterxml.jackson.annotation.JsonAlias\n"
"com.fasterxml.jackson.annotation.JsonFormat$Feature\n"
"com.fasterxml.jackson.core.exc.InputCoercionException\n"
"com.fasterxml.jackson.core.exc.StreamWriteException\n"
"com.fasterxml.jackson.core.io.ContentReference\n"
"com.fasterxml.jackson.core.io.IOContext\n"
"com.fasterxml.jackson.core.io.JsonEOFException\n"
"com.fasterxml.jackson.core.io.MergedStream\n"
"com.fasterxml.jackson.core.io.NumberInput\n"
"com.fasterxml.jackson.core.io.NumberOutput\n"
"com.fasterxml.jackson.core.io.UTF32Reader\n"
"com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper\n"
"com.fasterxml.jackson.core.json.JsonReadContext\n"
"com.fasterxml.jackson.core.json.JsonWriteContext\n"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser\n"
"com.fasterxml.jackson.core.JsonEncoding\n"
"com.fasterxml.jackson.core.JsonGenerationException\n"
"com.fasterxml.jackson.core.JsonLocation\n"
"com.fasterxml.jackson.core.JsonStreamContext\n"
"com.fasterxml.jackson.core.JsonToken\n"
"...\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/amazon-snapstart.adoc:67
#, fuzzy
msgid "The format is simple: one class per line."
msgstr "格式很简单：每行一个班级。"

#. type: Title ===
#: upstream/_guides/amazon-snapstart.adoc:68
#, fuzzy, no-wrap
msgid "Computing the class list"
msgstr "计算班级名单"

#. type: Plain text
#: upstream/_guides/amazon-snapstart.adoc:71
#, fuzzy
msgid "That step is particularly not user-friendly. We plan to improve it."
msgstr "这个步骤特别不方便用户使用。我们计划对其进行改进。"

#. type: Plain text
#: upstream/_guides/amazon-snapstart.adoc:75
#, fuzzy
msgid "To compute the list of classes, we recommend deploying your function and setting the `JAVA_TOOL_OPTIONS` environment variable to `-verbose:class`.  Then execute your function and retrieve the log (in CloudWatch).  You should be able to extract the class names using sed/awk or any text editor."
msgstr "为了计算类的列表，我们建议部署你的函数并将 `JAVA_TOOL_OPTIONS` 环境变量设置为 `-verbose:class` 。然后执行你的函数并检索日志（在 CloudWatch 中）。你应该能够使用sed/awk或任何文本编辑器来提取类的名称。"

#. type: Title ===
#: upstream/_guides/amazon-snapstart.adoc:76
#, fuzzy, no-wrap
msgid "Application class list"
msgstr "应用类别列表"

#. type: Plain text
#: upstream/_guides/amazon-snapstart.adoc:80
#, fuzzy
msgid "By default, Quarkus generates the class list of the classes included in your application (including the classes generated by Quarkus).  So, you do not have to repeat them in the `quarkus-preload-classes.txt` file."
msgstr "默认情况下，Quarkus会生成包含在你的应用程序中的类的列表（包括由Quarkus生成的类）。因此，你不必在 `quarkus-preload-classes.txt` 文件中重复它们。"

#. type: Plain text
#: upstream/_guides/amazon-snapstart.adoc:82
#, fuzzy
msgid "You can disable this feature using:"
msgstr "你可以通过以下方式禁用这一功能。"

#. type: delimited block -
#: upstream/_guides/amazon-snapstart.adoc:86
#, no-wrap
msgid "quarkus.snapstart.generate-application-class-list=false\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/amazon-snapstart.adoc:88
#, fuzzy, no-wrap
msgid "Disable preloading"
msgstr "禁用预载"

#. type: Plain text
#: upstream/_guides/amazon-snapstart.adoc:91
#, fuzzy
msgid "You can disable the preloading of classes using:"
msgstr "你可以用以下方法禁用类的预加载。"

#. type: delimited block -
#: upstream/_guides/amazon-snapstart.adoc:95
#, no-wrap
msgid "quarkus.snapstart.preload-classes=false\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/amazon-snapstart.adoc:97
#, fuzzy, no-wrap
msgid "Skipping class initialization"
msgstr "跳过类的初始化"

#. type: Plain text
#: upstream/_guides/amazon-snapstart.adoc:101
#, fuzzy
msgid "By default, when the classes are preloaded, they are also _initialized_, meaning it also resolves the dependent classes.  You can disable this behavior using:"
msgstr "默认情况下，当类被预加载时，它们也会被 _初始化_ ，这意味着它也会解析依赖类。你可以用以下方法禁用这种行为。"

#. type: delimited block -
#: upstream/_guides/amazon-snapstart.adoc:105
#, no-wrap
msgid "quarkus.snapstart.initialize-classes=false\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/amazon-snapstart.adoc:107
#, fuzzy, no-wrap
msgid "Client Priming"
msgstr "客人的准备工作"

#. type: Plain text
#: upstream/_guides/amazon-snapstart.adoc:110
#, fuzzy
msgid "Client _priming_ is a technique that allows initializing a client during the snapshotting process, so it's already fully functional during the application runtime."
msgstr "客户端 _初始化_ 是一种技术，它允许在快照过程中初始化客户端，因此在应用程序运行期间它已经完全发挥作用。"

#. type: Plain text
#: upstream/_guides/amazon-snapstart.adoc:112
#, fuzzy
msgid "There are two ways to achieve _priming_:"
msgstr "有两种方法来实现 _打底_ 。"

#. type: Plain text
#: upstream/_guides/amazon-snapstart.adoc:114
#, fuzzy
msgid "initialize the client in a `static` block, which, thanks to class preloading will be executed before the snapshot"
msgstr "在一个 `static` 块中初始化客户端，由于类的预加载，它将在快照之前被执行。"

#. type: Plain text
#: upstream/_guides/amazon-snapstart.adoc:115
#, fuzzy
msgid "register a CRaC Resource doing the initialization"
msgstr "注册一个做初始化的CRaC资源"

#. type: Plain text
#: upstream/_guides/amazon-snapstart.adoc:117
#, fuzzy
msgid "can be achieved as follows:"
msgstr "可以通过以下方式实现。"

#. type: delimited block -
#: upstream/_guides/amazon-snapstart.adoc:123
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class HeroRepository {\n"
"    private static final DynamoDbClient client;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-snapstart.adoc:133
#, no-wrap
msgid ""
"    static {\n"
"        client = DynamoDbClient.builder()\n"
"                .region(Region.US_EAST_2)\n"
"                .credentialsProvider(DefaultCredentialsProvider.create())\n"
"                .build();\n"
"        client.describeEndpoints();\n"
"    }\n"
"    // ...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/amazon-snapstart.adoc:137
msgid "Implementing priming using a static block may prevent the native compilation of your application.  Client initialization may start threads or open connections which are not compatible with the native compilation if the class is initialized at build time."
msgstr ""

#. type: Plain text
#: upstream/_guides/amazon-snapstart.adoc:139
msgid "The next section covers (2)."
msgstr ""

#. type: Title ==
#: upstream/_guides/amazon-snapstart.adoc:140
#, no-wrap
msgid "Resource registration"
msgstr ""

#. type: Plain text
#: upstream/_guides/amazon-snapstart.adoc:143
msgid "SnapStart uses the CRaC API to allow the application to execute custom code before the snapshotting or during the restoration."
msgstr ""

#. type: Plain text
#: upstream/_guides/amazon-snapstart.adoc:145
msgid "While it's the CRaC API, SnapStart is not CRaC and can do _things_ that would not work with others CRaC implementations."
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-snapstart.adoc:149
#, no-wrap
msgid "package org.acme.hello;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-snapstart.adoc:155
#, no-wrap
msgid ""
"import io.quarkus.runtime.Startup;\n"
"import org.crac.Context;\n"
"import org.crac.Core;\n"
"import org.crac.Resource;\n"
"import org.jboss.logging.Logger;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-snapstart.adoc:159
#, no-wrap
msgid ""
"import jakarta.annotation.PostConstruct;\n"
"import jakarta.enterprise.context.ApplicationScoped;\n"
"import jakarta.inject.Inject;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-snapstart.adoc:163
#, no-wrap
msgid ""
"@Startup\n"
"@ApplicationScoped\n"
"public class HelloPriming implements Resource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-snapstart.adoc:166
#, no-wrap
msgid ""
"    @Inject\n"
"    Logger logger;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-snapstart.adoc:172
#, no-wrap
msgid ""
"    @PostConstruct\n"
"    void init() {\n"
"        // Important - register the resource\n"
"        Core.getGlobalContext().register(this);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-snapstart.adoc:178
#, no-wrap
msgid ""
"    @Override\n"
"    public void beforeCheckpoint(Context<? extends Resource> context) throws Exception {\n"
"        logger.info(\"before checkout hook\");\n"
"        // initialize your client here.\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-snapstart.adoc:185
#, no-wrap
msgid ""
"    @Override\n"
"    public void afterRestore(Context<? extends Resource> context) throws Exception {\n"
"        logger.info(\"after checkout hook\");\n"
"        // if there is anything to do during the restoration, do it here.\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/amazon-snapstart.adoc:188
msgid "Restoration is limited to 2 seconds."
msgstr ""

#. type: Title ==
#: upstream/_guides/amazon-snapstart.adoc:189
#, no-wrap
msgid "TieredCompilation"
msgstr ""

#. type: Plain text
#: upstream/_guides/amazon-snapstart.adoc:193
msgid "It is also recommended to use _tiered compilation_ when using SnapStart.  To achieve this, set the `JAVA_TOOL_OPTIONS` environment property to `-XX:+TieredCompilation -XX:TieredStopAtLevel=1`."
msgstr ""

#. type: Plain text
#: upstream/_guides/amazon-snapstart.adoc:194
msgid "`TieredCompilation` can also be interesting for regular Lambda functions."
msgstr ""
