# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:52+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/opentracing.adoc:6
#, fuzzy, no-wrap
msgid "Using OpenTracing"
msgstr "使用OpenTracing"

#. type: Plain text
#: upstream/_guides/opentracing.adoc:12
#, fuzzy
msgid "This guide explains how your Quarkus application can utilize OpenTracing to provide distributed tracing for interactive web applications."
msgstr "本指南解释了你的Quarkus应用程序如何利用OpenTracing来为交互式网络应用程序提供分布式跟踪。"

#. type: Title ==
#: upstream/_guides/opentracing.adoc:13
#, fuzzy, no-wrap
msgid "Prerequisites"
msgstr "先决条件"

#. type: Title ==
#: upstream/_guides/opentracing.adoc:18
#, fuzzy, no-wrap
msgid "Architecture"
msgstr "建筑学"

#. type: Plain text
#: upstream/_guides/opentracing.adoc:21
#, fuzzy
msgid "In this guide, we create a straightforward REST application to demonstrate distributed tracing."
msgstr "在本指南中，我们创建了一个简单的REST应用程序来演示分布式跟踪。"

#. type: Title ==
#: upstream/_guides/opentracing.adoc:22
#, fuzzy, no-wrap
msgid "Solution"
msgstr "解决方案"

#. type: Plain text
#: upstream/_guides/opentracing.adoc:26
#, fuzzy
msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can skip right to the completed example."
msgstr "我们建议你按照下面几节的说明，一步一步地创建应用程序。不过，你可以直接跳到完成的例子。"

#. type: Plain text
#: upstream/_guides/opentracing.adoc:28
#, fuzzy
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "克隆 Git 仓库。 `git clone {quickstarts-clone-url}` ，或者下载一个{quickstarts-archive-url}[存档]。"

#. type: Plain text
#: upstream/_guides/opentracing.adoc:30
#, fuzzy
msgid "The solution is located in the `opentracing-quickstart` {quickstarts-tree-url}/opentracing-quickstart[directory]."
msgstr "该解决方案位于 `opentracing-quickstart` {quickstarts-tree-url}/opentracing-quickstart[目录]中。"

#. type: Title ==
#: upstream/_guides/opentracing.adoc:31
#, fuzzy, no-wrap
msgid "Creating the Maven project"
msgstr "创建Maven项目"

#. type: Plain text
#: upstream/_guides/opentracing.adoc:34
#, fuzzy
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "首先，我们需要一个新的项目。用以下命令创建一个新项目。"

#. type: Plain text
#: upstream/_guides/opentracing.adoc:41
#, fuzzy
msgid "This command generates the Maven project and imports the `smallrye-opentracing` extension, which includes the OpenTracing support and the default https://www.jaegertracing.io/[Jaeger] tracer."
msgstr "该命令生成Maven项目并导入 `smallrye-opentracing` 扩展，其中包括OpenTracing支持和默认的 link:https://www.jaegertracing.io/[Jaeger] 追踪器。"

#. type: Plain text
#: upstream/_guides/opentracing.adoc:44
#, fuzzy
msgid "If you already have your Quarkus project configured, you can add the `smallrye-opentracing` extension to your project by running the following command in your project base directory:"
msgstr "如果你已经配置了你的Quarkus项目，你可以通过在你的项目基础目录下运行以下命令，将 `smallrye-opentracing` 扩展到你的项目。"

#. type: Plain text
#: upstream/_guides/opentracing.adoc:49
#, fuzzy
msgid "This will add the following to your build file:"
msgstr "这将在你的构建文件中添加以下内容。"

#. type: Block title
#: upstream/_guides/opentracing.adoc:51 upstream/_guides/opentracing.adoc:197
#: upstream/_guides/opentracing.adoc:230 upstream/_guides/opentracing.adoc:270
#: upstream/_guides/opentracing.adoc:298
#, fuzzy, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: delimited block -
#: upstream/_guides/opentracing.adoc:57
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-smallrye-opentracing</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_guides/opentracing.adoc:60 upstream/_guides/opentracing.adoc:206
#: upstream/_guides/opentracing.adoc:239 upstream/_guides/opentracing.adoc:279
#: upstream/_guides/opentracing.adoc:307
#, fuzzy, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: delimited block -
#: upstream/_guides/opentracing.adoc:63
#, no-wrap
msgid "implementation(\"io.quarkus:quarkus-smallrye-opentracing\")\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/opentracing.adoc:65
#, fuzzy, no-wrap
msgid "Examine the JAX-RS resource"
msgstr "检查JAX-RS资源"

#. type: Plain text
#: upstream/_guides/opentracing.adoc:68
#, fuzzy
msgid "Create the `src/main/java/org/acme/opentracing/TracedResource.java` file with the following content:"
msgstr "创建具有以下内容的 `src/main/java/org/acme/opentracing/TracedResource.java` 文件。"

#. type: delimited block -
#: upstream/_guides/opentracing.adoc:72
#, no-wrap
msgid "package org.acme.opentracing;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/opentracing.adoc:78
#, no-wrap
msgid ""
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
"import org.jboss.logging.Logger;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/opentracing.adoc:81
#, no-wrap
msgid ""
"@Path(\"/hello\")\n"
"public class TracedResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/opentracing.adoc:83
#, no-wrap
msgid "    private static final Logger LOG = Logger.getLogger(TracedResource.class);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/opentracing.adoc:91
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String hello() {\n"
"        LOG.info(\"hello\"); // <1>\n"
"        return \"hello\";\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/opentracing.adoc:94
#, fuzzy
msgid "The log event carries OpenTracing information as well. In order to print OpenTracing information to the console output, the console log handler with the required OpenTracing event's keys needs to be defined in the `application.properties` file."
msgstr "日志事件也会携带OpenTracing信息。为了将 OpenTracing 信息打印到控制台输出，需要在 `application.properties` 文件中定义带有所需 OpenTracing 事件的键的控制台日志处理程序。"

#. type: Plain text
#: upstream/_guides/opentracing.adoc:99
#, fuzzy
msgid "Notice that there is no tracing specific code included in the application. By default, requests sent to this endpoint will be traced without any code changes being required. It is also possible to enhance the tracing information.  This can be achieved by https://github.com/smallrye/smallrye-opentracing/[SmallRye OpenTracing] an implementation of https://github.com/eclipse/microprofile-opentracing/[MicroProfile OpenTracing]."
msgstr "请注意，应用程序中没有包含任何追踪的具体代码。默认情况下，发送到这个端点的请求将被追踪，不需要修改任何代码。也有可能加强追踪信息。这可以通过 link:https://github.com/smallrye/smallrye-opentracing/[SmallRye OpenTracing] （ link:https://github.com/eclipse/microprofile-opentracing/[MicroProfile OpenTracing] 的一个实现）来实现。"

#. type: Title ===
#: upstream/_guides/opentracing.adoc:100
#, fuzzy, no-wrap
msgid "Create the configuration"
msgstr "创建配置"

#. type: Plain text
#: upstream/_guides/opentracing.adoc:103
#, fuzzy
msgid "There are two ways to configure the Jaeger tracer within the application."
msgstr "有两种方法可以在应用程序中配置Jaeger追踪器。"

#. type: Plain text
#: upstream/_guides/opentracing.adoc:105
#, fuzzy
msgid "The first approach is by providing the properties within the `src/main/resources/application.properties` file:"
msgstr "第一种方法是通过在 `src/main/resources/application.properties` 文件内提供属性。"

#. type: delimited block -
#: upstream/_guides/opentracing.adoc:112
#, no-wrap
msgid ""
"quarkus.jaeger.service-name=myservice // <1>\n"
"quarkus.jaeger.sampler-type=const // <2>\n"
"quarkus.jaeger.sampler-param=1 // <3>\n"
"quarkus.log.console.format=%d{HH:mm:ss} %-5p traceId=%X{traceId}, parentId=%X{parentId}, spanId=%X{spanId}, sampled=%X{sampled} [%c{2.}] (%t) %s%e%n // <4>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/opentracing.adoc:115
#, fuzzy
msgid "If the `quarkus.jaeger.service-name` property (or `JAEGER_SERVICE_NAME` environment variable) is not provided then a \"no-op\" tracer will be configured, resulting in no tracing data being reported to the backend."
msgstr "如果没有提供 `quarkus.jaeger.service-name` 属性（或 `JAEGER_SERVICE_NAME` 环境变量），那么将配置一个 \"无操作 \"的追踪器，导致没有追踪数据被报告给后端。"

#. type: Plain text
#: upstream/_guides/opentracing.adoc:116
#, fuzzy
msgid "Setup a sampler, that uses a constant sampling strategy."
msgstr "设置一个采样器，使用一个恒定的采样策略。"

#. type: Plain text
#: upstream/_guides/opentracing.adoc:117
#, fuzzy
msgid "Sample all requests. Set sampler-param to somewhere between 0 and 1, e.g. 0.50, if you do not wish to sample all requests."
msgstr "对所有的请求进行采样。如果你不希望对所有请求进行采样，请将采样器参数设置为0到1之间，例如0.50。"

#. type: Plain text
#: upstream/_guides/opentracing.adoc:118
#, fuzzy
msgid "Add trace IDs into log message."
msgstr "在日志信息中添加跟踪ID。"

#. type: Plain text
#: upstream/_guides/opentracing.adoc:120
#, fuzzy
msgid "The second approach is to supply the properties as https://www.jaegertracing.io/docs/latest/client-features/[environment variables]. These can be specified as `jvm.args` as shown in the following section."
msgstr "第二种方法是将属性作为 link:https://www.jaegertracing.io/docs/latest/client-features/[环境变量] 提供。这些可以被指定为 `jvm.args` ，如下节所示。"

#. type: Title ==
#: upstream/_guides/opentracing.adoc:121
#, fuzzy, no-wrap
msgid "Run the application"
msgstr "运行应用程序"

#. type: Plain text
#: upstream/_guides/opentracing.adoc:124
#, fuzzy
msgid "The first step is to start the tracing system to collect and display the captured traces:"
msgstr "第一步是启动追踪系统，收集和显示捕获的痕迹。"

#. type: delimited block -
#: upstream/_guides/opentracing.adoc:128
#, no-wrap
msgid "docker run -p 5775:5775/udp -p 6831:6831/udp -p 6832:6832/udp -p 5778:5778 -p 16686:16686 -p 14268:14268 jaegertracing/all-in-one:latest\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/opentracing.adoc:131
#, fuzzy
msgid "Now we are ready to run our application. If using `application.properties` to configure the tracer:"
msgstr "现在我们准备运行我们的应用程序。如果使用 `application.properties` 来配置追踪器。"

#. type: Plain text
#: upstream/_guides/opentracing.adoc:135
#, fuzzy
msgid "or if configuring the tracer via environment variables:"
msgstr "或通过环境变量配置追踪器。"

#. type: Plain text
#: upstream/_guides/opentracing.adoc:141
#, fuzzy
msgid "Once both the application and tracing system are started, you can make a request to the provided endpoint:"
msgstr "一旦应用程序和追踪系统都启动了，你就可以向提供的端点提出请求。"

#. type: delimited block -
#: upstream/_guides/opentracing.adoc:146
#, no-wrap
msgid ""
"$ curl http://localhost:8080/hello\n"
"hello\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/opentracing.adoc:148
#, fuzzy
msgid "When the first request has been submitted, the Jaeger tracer within the app will be initialized:"
msgstr "当第一个请求被提交后，应用程序中的Jaeger追踪器将被初始化。"

#. type: delimited block -
#: upstream/_guides/opentracing.adoc:153
#, no-wrap
msgid ""
"2019-10-16 09:35:23,464 INFO  [io.jae.Configuration] (executor-thread-1) Initialized tracer=JaegerTracer(version=Java-0.34.0, serviceName=myservice, reporter=RemoteReporter(sender=UdpSender(), closeEnqueueTimeout=1000), sampler=ConstSampler(decision=true, tags={sampler.type=const, sampler.param=true}), tags={hostname=localhost.localdomain, jaeger.version=Java-0.34.0, ip=127.0.0.1}, zipkinSharedRpcSpan=false, expandExceptionLogs=false, useTraceId128Bit=false)\n"
"13:20:11 INFO  traceId=1336b2b0a76a96a3, parentId=0, spanId=1336b2b0a76a96a3, sampled=true [or.ac.qu.TracedResource] (executor-thread-63) hello\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/opentracing.adoc:156
#, fuzzy
msgid "Then visit the http://localhost:16686[Jaeger UI] to see the tracing information."
msgstr "然后访问 link:http://localhost:16686[Jaeger用户界面] ，查看追踪信息。"

#. type: Plain text
#: upstream/_guides/opentracing.adoc:158
#, fuzzy
msgid "Hit `CTRL+C` to stop the application."
msgstr "点击 `CTRL+C` ，停止应用程序。"

#. type: Title ==
#: upstream/_guides/opentracing.adoc:159
#, fuzzy, no-wrap
msgid "Tracing additional methods"
msgstr "追踪其他方法"

#. type: Plain text
#: upstream/_guides/opentracing.adoc:163
#, fuzzy
msgid "REST endpoints are automatically traced.  If you need to trace additional methods, you can add the `org.eclipse.microprofile.opentracing.Traced` annotation to CDI bean classes or their non-private methods."
msgstr "REST端点是自动追踪的。如果你需要追踪更多的方法，你可以在CDI豆类或其非私有方法中添加 `org.eclipse.microprofile.opentracing.Traced` 注解。"

#. type: Plain text
#: upstream/_guides/opentracing.adoc:165
#, fuzzy
msgid "This can be useful to trace incoming requests from non-REST calls (like request coming from a message) or to create spans inside a trace."
msgstr "这对于追踪来自非REST调用的传入请求（如来自消息的请求）或在追踪中创建跨度非常有用。"

#. type: Plain text
#: upstream/_guides/opentracing.adoc:167
#, fuzzy
msgid "Here is an example of a `FrancophoneService` which methods are traced."
msgstr "这里有一个例子， `FrancophoneService` ，其中的方法被追踪。"

#. type: delimited block -
#: upstream/_guides/opentracing.adoc:171
#, no-wrap
msgid "import javax.enterprise.context.ApplicationScoped;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/opentracing.adoc:173
#, no-wrap
msgid "import org.eclipse.microprofile.opentracing.Traced;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/opentracing.adoc:177
#, no-wrap
msgid ""
"@Traced\n"
"@ApplicationScoped\n"
"public class FrancophoneService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/opentracing.adoc:182
#, no-wrap
msgid ""
"    public String bonjour() {\n"
"        return \"bonjour\";\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/opentracing.adoc:185
#, fuzzy
msgid "The best way to add OpenTracing capability to reactive messaging based applications is by adding the `Traced` annotation to all incoming methods."
msgstr "为基于反应式消息传递的应用程序添加OpenTracing功能的最佳方式是为所有传入方法添加 `Traced` 注释。"

#. type: Title ==
#: upstream/_guides/opentracing.adoc:186
#, fuzzy, no-wrap
msgid "Additional instrumentation"
msgstr "额外的仪器设备"

#. type: Plain text
#: upstream/_guides/opentracing.adoc:189
#, fuzzy
msgid "The https://github.com/opentracing-contrib[OpenTracing API Contributions project] offers additional instrumentation that can be used to add tracing to a large variety of technologies/components."
msgstr "link:https://github.com/opentracing-contrib[OpenTracing API贡献项目] 提供了额外的工具，可以用来将追踪功能添加到大量的技术/组件中。"

#. type: Plain text
#: upstream/_guides/opentracing.adoc:191
#, fuzzy
msgid "The instrumentation documented in this section has been tested with Quarkus and works in both standard and native mode."
msgstr "本节中记录的仪器已经用Quarkus测试过，在标准和本地模式下都能工作。"

#. type: Title ===
#: upstream/_guides/opentracing.adoc:192
#, fuzzy, no-wrap
msgid "JDBC"
msgstr "JDBC"

#. type: Plain text
#: upstream/_guides/opentracing.adoc:195
#, fuzzy
msgid "The https://github.com/opentracing-contrib/java-jdbc[JDBC instrumentation] will add a span for each JDBC queries done by your application, to enable it, add the following dependency to your build file:"
msgstr "link:https://github.com/opentracing-contrib/java-jdbc[JDBC工具] 将为你的应用程序进行的每个JDBC查询添加一个跨度，要启用它，请在你的构建文件中添加以下依赖。"

#. type: delimited block -
#: upstream/_guides/opentracing.adoc:203
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.opentracing.contrib</groupId>\n"
"    <artifactId>opentracing-jdbc</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/opentracing.adoc:209
#, no-wrap
msgid "implementation(\"io.opentracing.contrib:opentracing-jdbc\")\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/opentracing.adoc:212
#, fuzzy
msgid "As it uses a dedicated JDBC driver, you must configure your datasource and Hibernate to use it."
msgstr "由于它使用专用的JDBC驱动，你必须配置你的数据源和Hibernate来使用它。"

#. type: delimited block -
#: upstream/_guides/opentracing.adoc:222
#, no-wrap
msgid ""
"quarkus.datasource.db-kind=postgresql\n"
"# add ':tracing' to your database URL\n"
"quarkus.datasource.jdbc.url=jdbc:tracing:postgresql://localhost:5432/mydatabase\n"
"# use the 'TracingDriver' instead of the one for your database\n"
"quarkus.datasource.jdbc.driver=io.opentracing.contrib.jdbc.TracingDriver\n"
"# configure Hibernate dialect\n"
"quarkus.hibernate-orm.dialect=org.hibernate.dialect.PostgreSQLDialect\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/opentracing.adoc:225
#, fuzzy, no-wrap
msgid "Kafka"
msgstr "卡夫卡"

#. type: Plain text
#: upstream/_guides/opentracing.adoc:228
#, fuzzy
msgid "The https://github.com/opentracing-contrib/java-kafka-client[Kafka instrumentation] will add a span for each message sent to or received from a Kafka topic. To enable it, add the following dependency to your build file:"
msgstr "link:https://github.com/opentracing-contrib/java-kafka-client[Kafka工具] 将为每个发送到或从Kafka主题接收的消息添加一个跨度。要启用它，请在你的构建文件中添加以下依赖项。"

#. type: delimited block -
#: upstream/_guides/opentracing.adoc:236
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.opentracing.contrib</groupId>\n"
"    <artifactId>opentracing-kafka-client</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/opentracing.adoc:242
#, no-wrap
msgid "implementation(\"io.opentracing.contrib:opentracing-kafka-client\")\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/opentracing.adoc:245
#, fuzzy
msgid "It contains OpenTracing interceptors that must be registered on Kafka producers and consumers."
msgstr "它包含必须在Kafka生产者和消费者上注册的OpenTracing拦截器。"

#. type: Plain text
#: upstream/_guides/opentracing.adoc:247
#, fuzzy
msgid "If you followed the xref:kafka.adoc[Kafka guide], the interceptors can be added on the `generated-price` and the `prices` channels as follows:"
msgstr "如果你按照 link:kafka.html[Kafka指南] ，可以在 `generated-price` 和 `prices` 通道上添加拦截器，如下所示。"

#. type: delimited block -
#: upstream/_guides/opentracing.adoc:255
#, no-wrap
msgid ""
"# Configure the Kafka sink (we write to it)\n"
"mp.messaging.outgoing.generated-price.connector=smallrye-kafka\n"
"mp.messaging.outgoing.generated-price.topic=prices\n"
"mp.messaging.outgoing.generated-price.value.serializer=org.apache.kafka.common.serialization.IntegerSerializer\n"
"mp.messaging.outgoing.generated-price.interceptor.classes=io.opentracing.contrib.kafka.TracingProducerInterceptor\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/opentracing.adoc:260
#, no-wrap
msgid ""
"# Configure the Kafka source (we read from it)\n"
"mp.messaging.incoming.prices.connector=smallrye-kafka\n"
"mp.messaging.incoming.prices.value.deserializer=org.apache.kafka.common.serialization.IntegerDeserializer\n"
"mp.messaging.incoming.prices.interceptor.classes=io.opentracing.contrib.kafka.TracingConsumerInterceptor\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/opentracing.adoc:263
#, fuzzy
msgid "`interceptor.classes` accept a list of classes separated by a comma."
msgstr " `interceptor.classes` 接受一个用逗号分隔的班级列表。"

#. type: Title ===
#: upstream/_guides/opentracing.adoc:265
#, fuzzy, no-wrap
msgid "MongoDB client"
msgstr "MongoDB客户端"

#. type: Plain text
#: upstream/_guides/opentracing.adoc:268
msgid "The https://github.com/opentracing-contrib/java-mongo-driver[Mongo Driver instrumentation] will add a span for each command executed by your application. To enable it, add the following dependency to your build file:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/opentracing.adoc:276
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.opentracing.contrib</groupId>\n"
"    <artifactId>opentracing-mongo-common</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/opentracing.adoc:282
#, no-wrap
msgid "implementation(\"io.opentracing.contrib:opentracing-mongo-common\")\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/opentracing.adoc:286
msgid "It contains the OpenTracing CommandListener that will be registered on the configuration of the mongo client.  Following the xref:mongodb.adoc[MongoDB guide], the command listener will be registered defining the config property as follows:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/opentracing.adoc:291
#, no-wrap
msgid ""
"# Enable tracing commands in mongodb client \n"
"quarkus.mongodb.tracing.enabled=true\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/opentracing.adoc:293
#, no-wrap
msgid "Zipkin compatibility mode"
msgstr ""

#. type: Plain text
#: upstream/_guides/opentracing.adoc:296
msgid "To enable it, add the following dependency to your build file:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/opentracing.adoc:304
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.jaegertracing</groupId>\n"
"    <artifactId>jaeger-zipkin</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/opentracing.adoc:310
#, no-wrap
msgid "implementation(\"io.jaegertracing:jaeger-zipkin\")\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/opentracing.adoc:314
msgid "It contains the dependencies to convert the request to zipkin format.  The zipkin compatibility mode will be activated after defining the config property as follows:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/opentracing.adoc:319
#, no-wrap
msgid ""
"# Enable zipkin compatibility mode \n"
"quarkus.jaeger.zipkin.compatibility-mode=true \n"
msgstr ""

#. type: Title ==
#: upstream/_guides/opentracing.adoc:322
#, no-wrap
msgid "Jaeger Configuration Reference"
msgstr ""
