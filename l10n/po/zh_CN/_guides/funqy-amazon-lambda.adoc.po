# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:52+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/funqy-amazon-lambda.adoc:6
#, fuzzy, no-wrap
msgid "Funqy Amazon Lambda Binding"
msgstr "Funqy亚马逊Lambda绑定"

#. type: Plain text
#: upstream/_guides/funqy-amazon-lambda.adoc:13
#, fuzzy
msgid "The guide walks through quickstart code to show you how you can deploy Funqy functions to Amazon Lambda."
msgstr "该指南通过快速入门代码向您展示如何将Funqy函数部署到Amazon Lambda。"

#. type: Plain text
#: upstream/_guides/funqy-amazon-lambda.adoc:16
#, fuzzy
msgid "Funqy functions can be deployed using the AWS Lambda Java Runtime, or you can build a native executable and use Lambda Custom Runtime if you want a smaller memory footprint and faster cold boot startup time."
msgstr "Funqy函数可以使用AWS Lambda Java Runtime进行部署，如果你想要更小的内存占用和更快的冷启动启动时间，你也可以构建一个本地可执行文件并使用Lambda自定义Runtime。"

#. type: Title ==
#: upstream/_guides/funqy-amazon-lambda.adoc:19
#, fuzzy, no-wrap
msgid "Prerequisites"
msgstr "先决条件"

#. type: Plain text
#: upstream/_guides/funqy-amazon-lambda.adoc:24
#, fuzzy
msgid "Read about xref:funqy.adoc[Funqy Basics].  This is a short read!"
msgstr "阅读关于 link:funqy.html[Funqy基础知识] 。这是一个简短的阅读!"

#. type: Plain text
#: upstream/_guides/funqy-amazon-lambda.adoc:25
#, fuzzy
msgid "https://aws.amazon.com[An Amazon AWS account]"
msgstr "link:https://aws.amazon.com[一个亚马逊AWS账户]"

#. type: Plain text
#: upstream/_guides/funqy-amazon-lambda.adoc:26
#, fuzzy
msgid "https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-install.html[AWS CLI]"
msgstr "link:https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-install.html[AWS CLI]"

#. type: Plain text
#: upstream/_guides/funqy-amazon-lambda.adoc:27
#, fuzzy
msgid "https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-cli-install.html[AWS SAM CLI], for local testing"
msgstr "link:https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-cli-install.html[AWS SAM CLI] ，用于本地测试"

#. type: Plain text
#: upstream/_guides/funqy-amazon-lambda.adoc:29
#, fuzzy
msgid "Funqy Amazon Lambdas build off of our xref:amazon-lambda.adoc[Quarkus Amazon Lambda support]."
msgstr "Funqy Amazon Lambdas建立在我们的 link:amazon-lambda.html[Quarkus Amazon Lambda支持] 之上。"

#. type: Title ==
#: upstream/_guides/funqy-amazon-lambda.adoc:30
#, fuzzy, no-wrap
msgid "Installing AWS bits"
msgstr "安装AWS位"

#. type: Plain text
#: upstream/_guides/funqy-amazon-lambda.adoc:34
#, fuzzy
msgid "Installing all the AWS bits is probably the most difficult thing about this guide.  Make sure that you follow all the steps for installing AWS CLI."
msgstr "安装所有的AWS位可能是本指南中最困难的事情。请确保你遵循安装AWS CLI的所有步骤。"

#. type: Title ==
#: upstream/_guides/funqy-amazon-lambda.adoc:35
#, fuzzy, no-wrap
msgid "The Quickstart"
msgstr "快速入门"

#. type: Plain text
#: upstream/_guides/funqy-amazon-lambda.adoc:38
#, fuzzy
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "克隆 Git 仓库。 `git clone {quickstarts-clone-url}` ，或者下载一个{quickstarts-archive-url}[存档]。"

#. type: Plain text
#: upstream/_guides/funqy-amazon-lambda.adoc:40
#, fuzzy
msgid "The solution is located in the `funqy-amazon-lambda-quickstart` {quickstarts-tree-url}/funqy-quickstarts/funqy-amazon-lambda-quickstart[directory]."
msgstr "该解决方案位于 `funqy-amazon-lambda-quickstart` {quickstarts-tree-url}/funqy-quickstarts/funqy-amazon-lambda-quickstart[目录]中。"

#. type: Title ==
#: upstream/_guides/funqy-amazon-lambda.adoc:41
#, fuzzy, no-wrap
msgid "The Code"
msgstr "准则"

#. type: Plain text
#: upstream/_guides/funqy-amazon-lambda.adoc:45
#, fuzzy
msgid "There is nothing special about the code and more importantly nothing AWS specific.  Funqy functions can be deployed to many different environments and AWS Lambda is one of them.  The Java code is actually the same exact code as the {quickstarts-tree-url}/funqy-quickstarts/funqy-http-quickstart[funqy-http-quickstart]."
msgstr "代码没有什么特别之处，更重要的是没有AWS专用的代码。Funqy函数可以被部署到许多不同的环境中，AWS Lambda就是其中之一。Java代码实际上与{quickstarts-tree-url}/funqy-quickstarts/funqy-http-quickstart[funqy-http-quickstart]的代码完全相同。"

#. type: Title ==
#: upstream/_guides/funqy-amazon-lambda.adoc:47
#, fuzzy, no-wrap
msgid "Choose Your Function"
msgstr "选择你的功能"

#. type: Plain text
#: upstream/_guides/funqy-amazon-lambda.adoc:51
#, fuzzy
msgid "Only one Funqy function can be exported per Amazon Lambda deployment.  If you have multiple functions defined within your project, then you will need to choose the function within your Quarkus `application.properties`:"
msgstr "每个Amazon Lambda部署只能导出一个Funqy函数。如果你在你的项目中定义了多个函数，那么你需要在Quarkus `application.properties` 中选择函数。"

#. type: delimited block -
#: upstream/_guides/funqy-amazon-lambda.adoc:55
#, no-wrap
msgid "quarkus.funqy.export=greet\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/funqy-amazon-lambda.adoc:58
#, fuzzy
msgid "You can see how the quickstart has done it within its own {quickstarts-tree-url}/funqy-quickstarts/funqy-amazon-lambda-quickstart/src/main/resources/application.properties[application.properties]."
msgstr "你可以在自己的{quickstarts-tree-url}/funqy-quickstarts/funqy-amazon-lambda-quickstart/src/main/resources/application.properties[应用程序.属性]中看到快速启动是如何做到的。"

#. type: Plain text
#: upstream/_guides/funqy-amazon-lambda.adoc:60
#, fuzzy
msgid "Alternatively, you can set the `QUARKUS_FUNQY_EXPORT` environment variable when you create the Amazon Lambda using the `aws` cli."
msgstr "或者，你可以在使用 `aws` cli创建亚马逊Lambda时，设置 `QUARKUS_FUNQY_EXPORT` 环境变量。"

#. type: Title ==
#: upstream/_guides/funqy-amazon-lambda.adoc:61
#, fuzzy, no-wrap
msgid "Deploy to AWS Lambda Java Runtime"
msgstr "部署到AWS Lambda Java运行时"

#. type: Plain text
#: upstream/_guides/funqy-amazon-lambda.adoc:66
#, fuzzy
msgid "There are a few steps to get your Funqy function running on AWS Lambda.  The quickstart maven project generates a helpful script to create, update, delete, and invoke your functions for pure Java and native deployments.  This script is generated at build time."
msgstr "要让你的Funqy函数在AWS Lambda上运行，有几个步骤。quickstart maven项目会生成一个有用的脚本，用于创建、更新、删除和调用纯Java和本地部署的函数。这个脚本是在构建时生成的。"

#. type: Title ==
#: upstream/_guides/funqy-amazon-lambda.adoc:67
#, fuzzy, no-wrap
msgid "Build and Deploy"
msgstr "构建和部署"

#. type: Plain text
#: upstream/_guides/funqy-amazon-lambda.adoc:70
#, fuzzy
msgid "Build the project using Maven:"
msgstr "使用Maven构建该项目。"

#. type: Plain text
#: upstream/_guides/funqy-amazon-lambda.adoc:74
#, fuzzy
msgid "This will compile and package your code."
msgstr "这将对你的代码进行编译和打包。"

#. type: Title ==
#: upstream/_guides/funqy-amazon-lambda.adoc:75
#, fuzzy, no-wrap
msgid "Create an Execution Role"
msgstr "创建一个执行角色"

#. type: Plain text
#: upstream/_guides/funqy-amazon-lambda.adoc:81
#, fuzzy
msgid "View the https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-awscli.html[Getting Started Guide] for deploying a lambda with AWS CLI.  Specifically, make sure you have created an `Execution Role`.  You will need to define a `LAMBDA_ROLE_ARN` environment variable in your profile or console window, Alternatively, you can edit the `manage.sh` script that is generated by the build and put the role value directly there:"
msgstr "查看使用AWS CLI部署lambda的 link:https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-awscli.html[入门指南] 。具体来说，确保你已经创建了一个 `Execution Role` 。你需要在你的配置文件或控制台窗口中定义一个 `LAMBDA_ROLE_ARN` 环境变量，或者，你可以编辑由构建生成的 `manage.sh` 脚本，并在那里直接输入角色值。"

#. type: delimited block -
#: upstream/_guides/funqy-amazon-lambda.adoc:85
#, no-wrap
msgid "LAMBDA_ROLE_ARN=\"arn:aws:iam::1234567890:role/lambda-role\"\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/funqy-amazon-lambda.adoc:87
#, fuzzy, no-wrap
msgid "Extra Build Generated Files"
msgstr "额外的构建生成的文件"

#. type: Plain text
#: upstream/_guides/funqy-amazon-lambda.adoc:91
#, fuzzy
msgid "After you run the build, there are a few extra files generated by the `quarkus-funqy-amazon-lambda` extension.  These files are in the the build directory: `target/` for maven, `build/` for gradle."
msgstr "运行构建后，有几个额外的文件由 `quarkus-funqy-amazon-lambda` 扩展生成。这些文件在构建目录中： `target/` ，用于maven， `build/` ，用于gradle。"

#. type: Plain text
#: upstream/_guides/funqy-amazon-lambda.adoc:93
#, fuzzy
msgid "`function.zip` - lambda deployment file"
msgstr " `function.zip` - lambda部署文件"

#. type: Plain text
#: upstream/_guides/funqy-amazon-lambda.adoc:94
#, fuzzy
msgid "`manage.sh` - wrapper around aws lambda cli calls"
msgstr " `manage.sh` - 围绕aws lambda cli调用的包装器"

#. type: Plain text
#: upstream/_guides/funqy-amazon-lambda.adoc:95
#, fuzzy
msgid "`bootstrap-example.sh` - example bootstrap script for native deployments"
msgstr " `bootstrap-example.sh` - 用于本地部署的引导脚本示例"

#. type: Plain text
#: upstream/_guides/funqy-amazon-lambda.adoc:96
#, fuzzy
msgid "`sam.jvm.yaml` - (optional) for use with sam cli and local testing"
msgstr " `sam.jvm.yaml` - (可选)用于Sam cli和本地测试"

#. type: Plain text
#: upstream/_guides/funqy-amazon-lambda.adoc:97
#, fuzzy
msgid "`sam.native.yaml` - (optional) for use with sam cli and native local testing"
msgstr " `sam.native.yaml` - (可选)，用于Sam cli和本地测试"

#. type: Title ==
#: upstream/_guides/funqy-amazon-lambda.adoc:98
#, fuzzy, no-wrap
msgid "Create the function"
msgstr "创建函数"

#. type: Plain text
#: upstream/_guides/funqy-amazon-lambda.adoc:103
#, fuzzy
msgid "The `target/manage.sh` script is for managing your Funqy function using the AWS Lambda Java runtime.  This script is provided only for your convenience. Examine the output of the `manage.sh` script if you want to learn what aws commands are executed to create, delete, and update your functions."
msgstr " `target/manage.sh` 脚本是用于使用AWS Lambda Java运行时管理你的Funqy函数。提供这个脚本只是为了方便你。如果你想了解在创建、删除和更新你的函数时执行哪些aws命令，请检查 `manage.sh` 脚本的输出。"

#. type: Plain text
#: upstream/_guides/funqy-amazon-lambda.adoc:105
#, fuzzy
msgid "`manage.sh` supports four operation: `create`, `delete`, `update`, and `invoke`."
msgstr " `manage.sh` 支持四种操作。, , , 和 。 `create` `delete` `update` `invoke` "

#. type: Plain text
#: upstream/_guides/funqy-amazon-lambda.adoc:109
#, fuzzy
msgid "To verify your setup, that you have the AWS CLI installed, executed aws configure for the AWS access keys, and setup the `LAMBDA_ROLE_ARN` environment variable (as described above), please execute `manage.sh` without any parameters.  A usage statement will be printed to guide you accordingly."
msgstr "为了验证你的设置，你已经安装了AWS CLI，执行了AWS访问密钥的aws configure，并设置了 `LAMBDA_ROLE_ARN` 环境变量（如上所述），请执行 `manage.sh` ，不需要任何参数。将会打印出一个使用说明，以便对你进行相应的指导。"

#. type: Plain text
#: upstream/_guides/funqy-amazon-lambda.adoc:111
#, fuzzy
msgid "To see the `usage` statement, and validate AWS configuration:"
msgstr "要查看 `usage` 语句，并验证AWS配置。"

#. type: delimited block -
#: upstream/_guides/funqy-amazon-lambda.adoc:114
#, no-wrap
msgid "sh target/manage.sh\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/funqy-amazon-lambda.adoc:117
#, fuzzy
msgid "You can `create` your function using the following command:"
msgstr "你可以使用以下命令 `create` 你的函数。"

#. type: delimited block -
#: upstream/_guides/funqy-amazon-lambda.adoc:121
#, no-wrap
msgid "sh target/manage.sh create\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/funqy-amazon-lambda.adoc:124
#, fuzzy
msgid "or if you do not have `LAMBDA_ROLE_ARN` already defined in this shell:"
msgstr "或者如果你没有在这个shell中已经定义的 `LAMBDA_ROLE_ARN` 。"

#. type: delimited block -
#: upstream/_guides/funqy-amazon-lambda.adoc:128
#, no-wrap
msgid "LAMBDA_ROLE_ARN=\"arn:aws:iam::1234567890:role/lambda-role\" sh target/manage.sh create\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/funqy-amazon-lambda.adoc:132
#, fuzzy
msgid "Do not change the handler switch.  This must be hardcoded to `io.quarkus.funqy.lambda.FunqyStreamHandler::handleRequest`.  This special handler is Funqy's integration point with AWS Lambda."
msgstr "不要改变处理程序的开关。这必须硬编码为 `io.quarkus.funqy.lambda.FunqyStreamHandler::handleRequest` 。这个特殊的处理程序是Funqy与AWS Lambda的集成点。"

#. type: Plain text
#: upstream/_guides/funqy-amazon-lambda.adoc:135
#, fuzzy
msgid "If there are any problems creating the function, you must delete it with the `delete` function before re-running the `create` command."
msgstr "如果在创建函数时有任何问题，你必须在重新运行 `create` 命令之前用 `delete` 函数删除它。"

#. type: delimited block -
#: upstream/_guides/funqy-amazon-lambda.adoc:139
#, no-wrap
msgid "sh target/manage.sh delete\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/funqy-amazon-lambda.adoc:142
#, fuzzy
msgid "Commands may also be stacked:"
msgstr "命令也可以叠加。"

#. type: delimited block -
#: upstream/_guides/funqy-amazon-lambda.adoc:145
#, no-wrap
msgid "sh target/manage.sh delete create\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/funqy-amazon-lambda.adoc:147
#, fuzzy, no-wrap
msgid "Invoke the function"
msgstr "调用函数"

#. type: Plain text
#: upstream/_guides/funqy-amazon-lambda.adoc:150
#, fuzzy
msgid "Use the `invoke` command to invoke your function."
msgstr "使用 `invoke` 命令来调用你的函数。"

#. type: delimited block -
#: upstream/_guides/funqy-amazon-lambda.adoc:154
#, no-wrap
msgid "sh target/manage.sh invoke\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/funqy-amazon-lambda.adoc:158
#, fuzzy
msgid "The example function takes input passed in via the `--payload` switch which points to a json file in the root directory of the project."
msgstr "这个例子函数接受通过 `--payload` 开关传入的输入，该开关指向项目根目录下的一个json文件。"

#. type: Plain text
#: upstream/_guides/funqy-amazon-lambda.adoc:160
#, fuzzy
msgid "The function can also be invoked locally with the SAM CLI like this:"
msgstr "该功能也可以用SAM CLI在本地调用，比如这样。"

#. type: delimited block -
#: upstream/_guides/funqy-amazon-lambda.adoc:164
#: upstream/_guides/funqy-amazon-lambda.adoc:274
#, no-wrap
msgid "sam local invoke --template target/sam.jvm.yaml --event payload.json\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/funqy-amazon-lambda.adoc:167
#, fuzzy
msgid "If you are working with your native image build, simply replace the template name with the native version:"
msgstr "如果你正在使用你的本地图像构建，只需将模板名称替换为本地版本。"

#. type: delimited block -
#: upstream/_guides/funqy-amazon-lambda.adoc:171
#: upstream/_guides/funqy-amazon-lambda.adoc:281
#, no-wrap
msgid "sam local invoke --template target/sam.native.yaml --event payload.json\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/funqy-amazon-lambda.adoc:173
#, fuzzy, no-wrap
msgid "Update the function"
msgstr "更新功能"

#. type: Plain text
#: upstream/_guides/funqy-amazon-lambda.adoc:177
#, fuzzy
msgid "You can update the Java code as you see fit.  Once you've rebuilt, you can redeploy your function by executing the `update` command."
msgstr "你可以按你认为合适的方式更新Java代码。一旦你重建了，你可以通过执行 `update` 命令来重新部署你的函数。"

#. type: delimited block -
#: upstream/_guides/funqy-amazon-lambda.adoc:181
#, no-wrap
msgid "sh target/manage.sh update\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/funqy-amazon-lambda.adoc:183
#, fuzzy, no-wrap
msgid "Deploy to AWS Lambda Custom (native) Runtime"
msgstr "部署到AWS Lambda自定义（本地）运行时间"

#. type: Plain text
#: upstream/_guides/funqy-amazon-lambda.adoc:187
#, fuzzy
msgid "If you want a lower memory footprint and faster initialization times for your Funqy function, you can compile your Java code to a native executable.  Just make sure to rebuild your project with the `-Pnative` switch."
msgstr "如果你想让你的Funqy函数有更低的内存占用和更快的初始化时间，你可以把你的Java代码编译成本地可执行文件。只要确保用 `-Pnative` 开关重建你的项目。"

#. type: Plain text
#: upstream/_guides/funqy-amazon-lambda.adoc:189
#, fuzzy
msgid "For Linux hosts execute:"
msgstr "对于Linux主机执行。"

#. type: Plain text
#: upstream/_guides/funqy-amazon-lambda.adoc:195
#, fuzzy
msgid "If you are building on a non-Linux system, you will need to also pass in a property instructing Quarkus to use a Docker build as Amazon Lambda requires Linux binaries.  You can do this by passing this property to your build: `-Dnative-image.docker-build=true`.  This requires you to have Docker installed locally, however."
msgstr "如果你在非Linux系统上构建，你还需要传入一个属性，指示Quarkus使用Docker构建，因为Amazon Lambda需要Linux二进制文件。你可以通过向你的构建传递这个属性来实现： `-Dnative-image.docker-build=true` 。然而，这需要你在本地安装Docker。"

#. type: Plain text
#: upstream/_guides/funqy-amazon-lambda.adoc:201
#, fuzzy
msgid "Either of these commands will compile and create a native executable.  It also generates a zip file `target/function.zip`.  This zip file contains your native executable image renamed to `bootstrap`.  This is a requirement of the AWS Lambda Custom (Provided) Runtime."
msgstr "这两个命令中的任何一个都会编译并创建一个本地可执行文件。它还会生成一个zip文件 `target/function.zip` 。这个压缩文件包含你的本地可执行图像，重命名为 `bootstrap` 。这是AWS Lambda自定义（提供）运行时间的要求。"

#. type: Plain text
#: upstream/_guides/funqy-amazon-lambda.adoc:204
#, fuzzy
msgid "The instructions here are exactly as above with one change: you'll need to add `native` as the first parameter to the `manage.sh` script:"
msgstr "这里的说明与上面的完全一样，但有一个变化：你需要在 `manage.sh` 脚本中加入 `native` 作为第一个参数。"

#. type: delimited block -
#: upstream/_guides/funqy-amazon-lambda.adoc:208
#, no-wrap
msgid "sh target/manage.sh native create\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/funqy-amazon-lambda.adoc:213
#, fuzzy
msgid "As above, commands can be stacked.  The only requirement is that `native` be the first parameter should you wish to work with native image builds.  The script will take care of the rest of the details necessary to manage your native image function deployments."
msgstr "如上所述，命令可以叠加。唯一的要求是，如果你想使用本地镜像构建， `native` 是第一个参数。该脚本将处理其余的必要细节，以管理你的本地图像功能部署。"

#. type: Plain text
#: upstream/_guides/funqy-amazon-lambda.adoc:216
#, fuzzy
msgid "Examine the output of the `manage.sh` script if you want to learn what aws commands are executed to create, delete, and update your functions."
msgstr "如果你想了解在创建、删除和更新你的函数时执行了哪些aws命令，请检查 `manage.sh` 脚本的输出。"

#. type: Plain text
#: upstream/_guides/funqy-amazon-lambda.adoc:219
#, fuzzy
msgid "One thing to note about the create command for native is that the `aws lambda create-function` call must set a specific environment variable:"
msgstr "关于本地的创建命令，需要注意的一点是， `aws lambda create-function` 调用必须设置一个特定的环境变量。"

#. type: delimited block -
#: upstream/_guides/funqy-amazon-lambda.adoc:223
#, no-wrap
msgid "--environment 'Variables={DISABLE_SIGNAL_HANDLERS=true}'\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/funqy-amazon-lambda.adoc:225
#, fuzzy, no-wrap
msgid "Examine the POM"
msgstr "考察POM"

#. type: Plain text
#: upstream/_guides/funqy-amazon-lambda.adoc:229
#, fuzzy
msgid "There is nothing special about the POM other than the inclusion of the `quarkus-funqy-amazon-lambda` extension as a dependency.  The extension automatically generates everything you might need for your lambda deployment."
msgstr "除了将 `quarkus-funqy-amazon-lambda` 扩展作为一个依赖项之外，POM并没有什么特别之处。该扩展会自动生成你的lambda部署可能需要的一切。"

#. type: Title ==
#: upstream/_guides/funqy-amazon-lambda.adoc:230
#, fuzzy, no-wrap
msgid "Integration Testing"
msgstr "集成测试"

#. type: Plain text
#: upstream/_guides/funqy-amazon-lambda.adoc:235
#, fuzzy
msgid "Funqy Amazon Lambda support leverages the Quarkus AWS Lambda test framework so that you can unit tests your Funqy functions.  This is true for both JVM and native modes.  This test framework provides similar functionality to the SAM CLI, without the overhead of Docker."
msgstr "Funqy Amazon Lambda支持利用Quarkus AWS Lambda测试框架，这样你就可以对Funqy函数进行单元测试。这对于JVM和本地模式都是如此。这个测试框架提供了类似于SAM CLI的功能，没有Docker的开销。"

#. type: Plain text
#: upstream/_guides/funqy-amazon-lambda.adoc:238
#, fuzzy
msgid "If you open up {quickstarts-tree-url}/funqy-quickstarts/funqy-amazon-lambda-quickstart/src/test/java/org/acme/funqy/FunqyTest.java[FunqyTest.java] you'll see that the test replicates the AWS execution environment."
msgstr "如果你打开{quickstarts-tree-url}/funqy-quickstarts/funqy-amazon-lambda-quickstart/src/test/java/org/acme/funqy/FunqyTest.java[FunqyTest.java]，你会看到该测试复制了AWS的执行环境。"

#. type: delimited block -
#: upstream/_guides/funqy-amazon-lambda.adoc:242
#, no-wrap
msgid "package org.acme.funqy;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/funqy-amazon-lambda.adoc:247
#, no-wrap
msgid ""
"import io.quarkus.amazon.lambda.test.LambdaClient;\n"
"import io.quarkus.test.junit.QuarkusTest;\n"
"import org.junit.jupiter.api.Assertions;\n"
"import org.junit.jupiter.api.Test;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/funqy-amazon-lambda.adoc:257
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class FunqyTest {\n"
"    @Test\n"
"    public void testSimpleLambdaSuccess() throws Exception {\n"
"        Friend friend = new Friend(\"Bill\");\n"
"        Greeting out = LambdaClient.invoke(Greeting.class, friend);\n"
"        Assertions.assertEquals(\"Hello Bill\", out.getMessage());\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/funqy-amazon-lambda.adoc:259
#, fuzzy, no-wrap
msgid "Testing with the SAM CLI"
msgstr "使用SAM CLI进行测试"

#. type: Plain text
#: upstream/_guides/funqy-amazon-lambda.adoc:265
#, fuzzy
msgid "The https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-cli-install.html[AWS SAM CLI] allows you to run your functions locally on your laptop in a simulated Lambda environment.  This requires https://www.docker.com/products/docker-desktop[docker] to be installed.  This is an optional approach should you choose to take advantage of it.  Otherwise, the Quarkus JUnit integration should be sufficient for most of your needs."
msgstr "link:https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-cli-install.html[AWS SAM CLI] 允许你在笔记本电脑上模拟Lambda环境，在本地运行你的函数。这需要安装 link:https://www.docker.com/products/docker-desktop[docker] 。如果你选择利用它，这是一个可选的方法。否则，Quarkus的JUnit集成应该足以满足你的大部分需求。"

#. type: Plain text
#: upstream/_guides/funqy-amazon-lambda.adoc:267
#, fuzzy
msgid "A starter template has been generated for both JVM and native execution modes."
msgstr "已经为JVM和本地执行模式生成了一个启动模板。"

#. type: Plain text
#: upstream/_guides/funqy-amazon-lambda.adoc:270
#, fuzzy
msgid "Run the following SAM CLI command to locally test your function, passing the appropriate SAM `template`.  The `event` parameter takes any JSON file, in this case the sample `payload.json`."
msgstr "运行下面的SAM CLI命令来本地测试你的函数，传递适当的SAM `template` 。 `event` 参数采用任何JSON文件，在本例中是样本 `payload.json` 。"

#. type: Plain text
#: upstream/_guides/funqy-amazon-lambda.adoc:277
#, fuzzy
msgid "The native image can also be locally tested using the `sam.native.yaml` template:"
msgstr "本机图像也可以使用 `sam.native.yaml` 模板进行本地测试。"

#. type: Title ==
#: upstream/_guides/funqy-amazon-lambda.adoc:283
#, fuzzy, no-wrap
msgid "Modifying `function.zip`"
msgstr "修改 `function.zip` "

#. type: Plain text
#: upstream/_guides/funqy-amazon-lambda.adoc:288
#, fuzzy
msgid "There are times where you may have to add additional entries to the `function.zip` lambda deployment that is generated by the build.  To do this create a `zip.jvm` or `zip.native` directory within `src/main`.  Create `zip.jvm/` if you are doing a pure Java.  `zip.native/` if you are doing a native deployment."
msgstr "有的时候，你可能需要向由构建生成的 `function.zip` lambda部署添加额外的条目。要做到这一点，在 `src/main` 中创建一个 `zip.jvm` 或 `zip.native` 目录。如果你在做一个纯 Java，就创建 `zip.jvm/` 。如果你在做一个本地部署，就创建 `zip.native/` 。"

#. type: Plain text
#: upstream/_guides/funqy-amazon-lambda.adoc:290
#, fuzzy
msgid "Any you files and directories you create under your zip directory will be included within `function.zip`"
msgstr "你在你的压缩目录下创建的任何文件和目录都将包括在 `function.zip` "

#. type: Title ==
#: upstream/_guides/funqy-amazon-lambda.adoc:291
#, fuzzy, no-wrap
msgid "Custom `bootstrap` script"
msgstr "自定义 `bootstrap` 脚本"

#. type: Plain text
#: upstream/_guides/funqy-amazon-lambda.adoc:297
#, fuzzy
msgid "There are times you may want to set specific system properties or other arguments when lambda invokes your native Funqy deployment.  If you include a `bootstrap` script file within `zip.native`, the Funqy extension will automatically rename the executable to `runner` within `function.zip` and set the unix mode of the `bootstrap` script to executable."
msgstr "有些时候你可能想在lambda调用你的本地Funqy部署时设置特定的系统属性或其他参数。如果你在 `zip.native` 中包含一个 `bootstrap` 脚本文件，Funqy扩展会在 `function.zip` 中自动将可执行文件重命名为 `runner` ，并将 `bootstrap` 脚本的unix模式设为可执行。"

#. type: Plain text
#: upstream/_guides/funqy-amazon-lambda.adoc:299
msgid "The native executable must be referenced as `runner` if you include a custom `bootstrap` script."
msgstr ""

#. type: Plain text
#: upstream/_guides/funqy-amazon-lambda.adoc:300
msgid "The extension generates an example script within `target/bootstrap-example.sh`."
msgstr ""
