msgid ""
msgstr ""
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid "Compose Dev Services"
msgstr "金豪开发服务"

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid ""
"Compose Dev Services offer a way to define custom dev services using the "
"Compose specification."
msgstr "Compose Dev Services 提供了一种使用 Compose 规范定义自定义开发服务的方法。"

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid ""
"xref:dev-services.adoc[Quarkus Dev Services] automatically provisions "
"unconfigured services in development and test mode.\n"
"Most extensions providing connectivity to services also provide dev services "
"implementation using https://www.testcontainers.org/[Testcontainers] behind "
"the scenes.\n"
"Each dev service has some default configuration, such as the container image "
"to use, but is limited in terms of customization."
msgstr ""
"xref:dev-services.adoc[Quarkus Dev Services 可] "
"在开发和测试模式下自动提供未配置的服务。大多数提供服务连接的扩展还在幕后使用 link:https://www.testcontainers.org/"
"[Testcontainers] 提供开发服务实现。每个开发服务都有一些默认配置，例如要使用的容器映像，但自定义配置有限。"

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid ""
"While this level of automation is great for most use cases, there are times "
"when you need more control and coordination over provisioned services."
msgstr "虽然这种自动化水平对大多数用例来说都很不错，但有时您需要对已配置的服务进行更多的控制和协调。"

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid ""
"*Compose Dev Services* extends the Dev Services concept by allowing you to "
"define custom dev services using the https://compose-spec.io/[Compose "
"specification].\n"
"_The Compose Specification is a developer-focused standard for defining "
"cloud and platform agnostic container-based applications_."
msgstr ""
"*金豪开发服务* 扩展了开发服务概念，允许您使用 link:https://compose-spec.io/[金豪规范] 定义自定义开发服务。 "
"_Compose 规范是一个以开发人员为中心的标准，用于定义基于云和平台的容器应用_ 。"

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid ""
"Compose is a widely used tool for defining and managing multi-container "
"applications, for development and testing purposes.\n"
"A YAML description file, typically named `compose.yml`, defines the "
"services, networks, and volumes required for your application.\n"
"https://docs.docker.com/compose/[Docker Compose] is the reference "
"implementation and https://podman-desktop.io/docs/compose[Podman Desktop] "
"also provides out-of-the-box support for the Compose specification."
msgstr ""
"Compose 是一种广泛使用的工具，用于定义和管理多容器应用程序，以达到开发和测试的目的。一个 YAML 描述文件（通常命名为 `compose."
"yml` ）定义了应用程序所需的服务、网络和卷。 link:https://docs.docker.com/compose/[Docker "
"Compose] 是参考实现， link:https://podman-desktop.io/docs/compose[Podman Desktop] "
"也为 Compose 规范提供开箱即用的支持。"

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid ""
"Quarkus detects Compose files named `compose-devservices.yml` (or <<compose-"
"devservices-compose-files>>) in your project and starts the defined services "
"when your application runs in development or test mode.\n"
"Extensions providing dev services discover these custom services and use "
"them instead of creating default ones.\n"
"When the dev mode or tests are stopped, the services are automatically "
"stopped and cleaned up."
msgstr ""
"Quarkus 可检测项目中名为 `compose-devservices.yml` （或 <<compose-devservices-compose-"
"files>> ）的 Compose "
"文件，并在应用程序以开发或测试模式运行时启动已定义的服务。提供开发服务的扩展程序会发现这些自定义服务并使用它们，而不是创建默认服务。当开发模式或测试停止时，服务会自动停止并清理。"

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid ""
"This integration provides a seamless development experience while giving you "
"full control over your service configurations."
msgstr "这种集成可提供无缝的开发体验，同时让您完全控制服务配置。"

#: _guides/compose-dev-services.adoc
msgid "Prerequisites"
msgstr "先决条件"

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid "To use Compose Dev Services, you need:"
msgstr "要使用金豪开发服务，您需要"

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid ""
"A working *local* container environment: https://docs.docker.com/get-started/"
"get-docker/[Docker] or https://podman.io/docs/installation[Podman]"
msgstr ""
"可运行的 *本地* 容器环境： link:https://docs.docker.com/get-started/get-docker/[Docker] "
"或 link:https://podman.io/docs/installation[Podman]"

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid ""
"Compose tooling such as `docker-compose` or `podman-compose`\n"
"(Note that `docker compose` and `podman compose` commands internally call "
"these binaries) :"
msgstr ""
"合成工具，如 `docker-compose` 或 `podman-compose` （注意 `docker compose` 和 `podman "
"compose` 命令在内部调用这些二进制文件）："

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid ""
"For Docker: https://docs.docker.com/compose/install/[Installing Docker "
"Compose]"
msgstr ""
"针对 Docker： link:https://docs.docker.com/compose/install/[安装 Docker Compose]"

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid ""
"For Podman: https://podman-desktop.io/docs/compose/setting-up-"
"compose[Setting up Compose]"
msgstr ""
"Podman 专用： link:https://podman-desktop.io/docs/compose/setting-up-compose[设置 "
"Compose]"

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid "Compose Dev Services is only compatible with Compose V2."
msgstr "金豪开发服务仅与金豪 V2 兼容。"

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid "Using Compose Dev Services"
msgstr "使用金豪开发服务"

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid ""
"Let's see how to use Compose Dev Services with examples ranging from simple "
"to more complex scenarios."
msgstr "让我们通过从简单到复杂的示例来了解如何使用金豪开发服务。"

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid "Basic Example: PostgreSQL Database"
msgstr "基本示例：PostgreSQL 数据库"

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid ""
"In a Quarkus project already configured to use the `quarkus-jdbc-postgresql` "
"extension,\n"
"you can create a `compose-devservices.yml` file in the root of the project "
"and define a custom service using Compose:"
msgstr ""
"在已配置使用 `quarkus-jdbc-postgresql` 扩展的 Quarkus 项目中，可以在项目根目录下创建 `compose-"
"devservices.yml` 文件，并使用 Compose 定义自定义服务："

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid ""
"When you run the application in dev mode or execute tests, Compose Dev "
"Services will automatically start the PostgreSQL service defined in the "
"`compose-devservices.yml` file,\n"
"instead of using the default dev service provided by the `quarkus-jdbc-"
"postgresql` extension."
msgstr ""
"在开发模式下运行应用程序或执行测试时，金豪开发服务会自动启动 `compose-devservices.yml` 文件中定义的 PostgreSQL "
"服务，而不是使用 `quarkus-jdbc-postgresql` 扩展提供的默认开发服务。"

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid ""
"As per the above configuration, the PostgreSQL container port `5432` will be "
"exposed to a random host port\n"
"and the application datasource will be configured by extracting connection "
"information such as _user_, _password_, and the _database name_."
msgstr ""
"根据上述配置，PostgreSQL 容器端口 `5432` 将暴露给随机主机端口，应用程序数据源将通过提取连接信息（如 _用户_ 、 _密码_ 和 "
"_数据库名称_ ）来配置。"

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid "Multi-Service Example: Custom Network and Dependencies"
msgstr "多服务示例：自定义网络和依赖关系"

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid ""
"For more complex scenarios, you can define custom networks and service "
"dependencies:"
msgstr "对于更复杂的情况，您可以定义自定义网络和服务依赖关系："

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid ""
"Note that the `compose-devservices.yml` file can be customized as needed "
"with multiple services with dependencies to control the startup order,\n"
"custom networks to isolate service communication, and volumes for data "
"persistence and configuration."
msgstr ""
"请注意， `compose-devservices.yml` "
"文件可根据需要进行定制，其中包含多个服务，这些服务具有控制启动顺序的依赖关系、用于隔离服务通信的自定义网络，以及用于数据持久性和配置的卷。"

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid "Service Discovery"
msgstr "服务探索"

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid ""
"Services started by Compose Dev Services are automatically discovered by "
"extensions providing dev services.\n"
"Each extension discovers the services it needs and configures the "
"application accordingly."
msgstr "提供开发服务的扩展会自动发现由金豪开发服务启动的服务。每个扩展都会发现自己需要的服务，并相应地配置应用程序。"

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid ""
"Extensions rely on container image names and exposed ports to discover "
"services.\n"
"For example, the PostgreSQL Dev Service looks for a service with the image "
"name *containing* `postgres` and the exposed container port `5432`."
msgstr ""
"扩展依赖容器映像名称和暴露的端口来发现服务。例如，PostgreSQL Dev Service 会查找映像名称 *包含* `postgres` "
"、暴露的容器端口为 `5432` 的服务。"

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid "When a match is found, the extension will:"
msgstr "找到匹配后，扩展名将"

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid ""
"Extract connection information from the container (connection URL, "
"credentials, database name, etc.)"
msgstr "从容器中提取连接信息（连接 URL、凭证、数据库名称等）"

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid "Configure the application to use the discovered service"
msgstr "配置应用程序以使用发现的服务"

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid "Skip creating its own default Dev Service container"
msgstr "跳过创建自己的默认开发服务容器"

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid "Supported Extensions and Discovery Criteria"
msgstr "支持的扩展和发现标准"

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid ""
"The following is the list of platform extensions with dev services support:"
msgstr "以下是支持开发服务的平台扩展列表："

#: _guides/compose-dev-services.adoc
msgid "Extension"
msgstr "扩展"

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid "Image Names"
msgstr "图片名称"

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid "Exposed Port"
msgstr "外露端口"

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid "AMQP"
msgstr "AMQP"

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid "amqp, activemq-artemis, amq-broker, rabbitmq"
msgstr "amqp、activemq-artemis、amq-broker、rabbitmq"

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid "5672"
msgstr "5672"

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid "Apicurio Registry"
msgstr "Apicurio 登记处"

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid "apicurio"
msgstr "狎鸥亭"

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid "8080"
msgstr "8080"

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid "DB2"
msgstr "DB2"

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid "db2"
msgstr "db2"

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid "50000"
msgstr "50000"

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid "MySQL"
msgstr "MySQL"

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid "mysql"
msgstr "mysql"

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid "3306"
msgstr "3306"

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid "PostgreSQL"
msgstr "PostgreSQL"

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid "postgres"
msgstr "postgres"

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid "5432"
msgstr "5432"

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid "MariaDB"
msgstr "玛丽亚数据库"

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid "mariadb"
msgstr "mariadb"

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid "Microsoft SQL Server"
msgstr "微软 SQL 服务器"

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid "mssql"
msgstr "mssql"

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid "1433"
msgstr "1433"

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid "Oracle Database"
msgstr "甲骨文数据库"

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid "oracle"
msgstr "神谕"

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid "1521"
msgstr "1521"

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid "Kafka"
msgstr "卡夫卡"

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid "kafka, strimzi, redpanda"
msgstr "卡夫卡、斯特林齐、红熊猫"

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid "9092"
msgstr "9092"

#: _guides/compose-dev-services.adoc
msgid "Keycloak"
msgstr "Keycloak"

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid "keycloak"
msgstr "keycloak"

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid "Kubernetes"
msgstr "Kubernetes"

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid "kube-apiserver, k3s, kindest/node"
msgstr "kube-apiserver、k3s、kindest/node"

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid "6443"
msgstr "6443"

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid "MongoDB"
msgstr "MongoDB"

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid "mongo"
msgstr "羼杂"

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid "27017"
msgstr "27017"

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid "MQTT"
msgstr "MQTT"

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid "hivemq, eclipse-mosquitto"
msgstr "hivemq、eclipse-mosquitto"

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid "1883"
msgstr "1883"

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid "RabbitMQ"
msgstr "RabbitMQ"

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid "rabbitmq"
msgstr "rabbitmq"

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid "Pulsar"
msgstr "脉冲星"

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid "pulsar"
msgstr "脉冲星"

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid "6650"
msgstr "6650"

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid "Redis"
msgstr "Redis"

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid "redis"
msgstr "Redis"

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid "6379"
msgstr "6379"

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid "Infinispan"
msgstr "Infinispan"

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid "infinispan, datagrid"
msgstr "无穷大、数据网格"

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid "11222"
msgstr "11222"

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid "Elasticsearch"
msgstr "Elasticsearch"

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid "elasticsearch, opensearch"
msgstr "elasticsearch, opensearch"

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid "9200"
msgstr "9200"

#: _guides/compose-dev-services.adoc
msgid "Observability"
msgstr "可观察性"

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid "lgtm"
msgstr "lgtm"

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid "16686, 9411, 9090, 3000"
msgstr "16686, 9411, 9090, 3000"

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid "Configuring custom images for service discovery"
msgstr "为服务发现配置自定义图像"

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid ""
"You can customize the image names used for service discovery by setting the "
"appropriate properties in your `application.properties` file.\n"
"For example, to use a custom Kafka image:"
msgstr ""
"您可以通过在 `application.properties` 文件中设置相应的属性，自定义用于服务发现的映像名称。例如，要使用自定义的 Kafka "
"图像，请在  文件中设置相应的属性："

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid ""
"Each extension that provides Dev Services has its own configuration "
"properties for customizing the image name.\n"
"Refer to the specific extension documentation for details."
msgstr "提供 Dev 服务的每个扩展都有自己的配置属性，用于自定义映像名称。有关详情，请参阅特定扩展文档。"

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid "Using specific Compose files"
msgstr "使用特定的合成文件"

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid ""
"By default, Compose Dev Services looks for files in the project root named "
"`compose-devservices.[yml|yaml]` or `docker-compose-devservices.[yml|yaml]`."
msgstr ""
"默认情况下，金豪开发服务会在项目根目录下查找名为 `compose-devservices.[yml|yaml]` 或 `docker-compose-"
"devservices.[yml|yaml]` 的文件。"

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid ""
"You can specify custom files to use by setting the `quarkus.compose."
"devservices.files` property in the `application.properties` file:"
msgstr ""
"您可以在 `application.properties` 文件中设置 `quarkus.compose.devservices.files` "
"属性，指定要使用的自定义文件："

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid ""
"This allows you to use different dev service environments depending on the "
"Quarkus config profiles.\n"
"You can also specify multiple files by separating them with commas:"
msgstr "这样就可以根据 Quarkus 配置文件使用不同的开发服务环境。您还可以用逗号分隔指定多个文件："

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid "Using Compose profiles"
msgstr "使用 \"撰写 \"配置文件"

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid ""
"With profiles, Compose files can define a set of active profiles so that "
"started services are adjusted for various usages and environments.\n"
"You can specify the profiles to activate by setting the `quarkus.compose."
"devservices.profiles` property in the `application.properties` file:"
msgstr ""
"通过配置文件，金豪文件可以定义一组激活的配置文件，以便根据不同的使用情况和环境调整已启动的服务。通过在 `application.properties` "
"文件中设置 `quarkus.compose.devservices.profiles` 属性，可以指定要激活的配置文件："

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid "Ignoring Services"
msgstr "忽视服务"

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid ""
"You can configure Compose Dev Services to not discover specific services by "
"adding the `io.quarkus.devservices.compose.ignore` label to the service in "
"your Compose file:"
msgstr ""
"您可以在 Compose 文件中为服务添加 `io.quarkus.devservices.compose.ignore` 标签，将 Compose "
"Dev Services 配置为不发现特定服务："

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid ""
"When a service has this label set to `true`, it will be excluded from "
"service discovery, and extensions will not use it for Dev Services."
msgstr "当服务的标签设置为 `true` 时，它将被排除在服务发现之外，扩展也不会将其用于 Dev 服务。"

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid "Service Readiness"
msgstr "服务准备"

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid ""
"Compose Dev Services provides several ways to ensure services are ready "
"before your application tries to use them."
msgstr "Compose Dev Services 提供了几种方法，可确保在应用程序尝试使用服务之前，服务已准备就绪。"

#: _guides/compose-dev-services.adoc
msgid "Health Checks"
msgstr "健康检查"

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid ""
"Compose Dev Services respects the health checks defined in your Compose file."
"\n"
"It's recommended to configure health checks for your services to ensure they "
"are ready before your application tries to use them:"
msgstr "金豪开发服务尊重金豪文件中定义的健康检查。建议为服务配置健康检查，以确保它们在应用程序尝试使用之前就已准备就绪："

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid "Wait for Logs"
msgstr "等待日志"

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid ""
"You can configure Compose Dev Services to wait for specific log messages to "
"appear in the container logs before considering a service ready.\n"
"This is useful for services that don't provide health checks but log a "
"message when they're ready."
msgstr ""
"您可以将 Compose Dev Services "
"配置为等待特定日志消息出现在容器日志中，然后才认为服务就绪。这对于不提供健康检查但会在服务就绪时记录消息的服务非常有用。"

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid ""
"To wait for a specific log message, add a label with the prefix `io.quarkus."
"devservices.compose.wait_for.logs` to your service:"
msgstr ""
"要等待特定的日志信息，请在服务中添加前缀为 `io.quarkus.devservices.compose.wait_for.logs` 的标签："

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid ""
"You can also specify how many times a log message should appear by setting "
"the numeric suffix value:\n"
"`io.quarkus.devservices.compose.wait_for.logs.3: .\\*Worker started.*`"
msgstr ""
"您还可以通过设置数字后缀值来指定日志信息的显示次数： `io.quarkus.devservices.compose.wait_for.logs.3: ."
"*Worker started.*`"

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid "Wait for Ports"
msgstr "等待端口"

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid ""
"By default, Compose Dev Services waits for all exposed ports to be available "
"before considering a service ready.\n"
"This behavior can be customized using labels:"
msgstr "默认情况下，在认为服务就绪之前，Compose Dev Services 会等待所有暴露的端口都可用。可以使用标签自定义此行为："

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid "Global Timeout"
msgstr "全局超时"

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid ""
"You can configure the global timeout for Dev Services startup using the "
"`quarkus.devservices.timeout` property:"
msgstr "您可以使用 `quarkus.devservices.timeout` 属性配置 Dev Services 启动的全局超时："

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid ""
"This property sets the maximum time to wait for all Dev Services to start. "
"The default is 60 seconds."
msgstr "此属性设置所有 Dev 服务启动的最长等待时间。默认值为 60 秒。"

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid "Ordering Services"
msgstr "订购服务"

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid ""
"Compose Dev Services starts services in the order they are defined in the "
"Compose file.\n"
"If you need to start services in a specific order, you can use the "
"`depends_on` attribute:"
msgstr "金豪开发服务会按照金豪文件中定义的顺序启动服务。如果需要按特定顺序启动服务，可以使用 `depends_on` 属性："

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid "Exposing Service Configuration into the Application"
msgstr "在应用程序中公开服务配置"

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid ""
"Compose Dev Services automatically exposes the configuration of discovered "
"services to your application.\n"
"For example, when a database service is discovered with the following "
"compose service description:"
msgstr "Compose Dev Services 会自动向应用程序公开已发现服务的配置。例如，当数据库服务被发现时，其编译服务描述如下："

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid "Following application properties are automatically set:"
msgstr "自动设置以下应用程序属性"

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid ""
"The actual values are extracted from the service labels and environment "
"variables.\n"
"The host is set to the Docker host IP address, and the port is set to the "
"mapped port on the host."
msgstr "实际值是从服务标签和环境变量中提取的。主机被设置为 Docker 主机的 IP 地址，端口被设置为主机上的映射端口。"

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid ""
"For database services, if the label `io.quarkus.devservices.compose.jdbc."
"parameters` is set, the parameters are added to the JDBC URL."
msgstr ""
"对于数据库服务，如果设置了标签 `io.quarkus.devservices.compose.jdbc.parameters` ，参数就会添加到 "
"JDBC URL 中。"

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid "Custom config mapping using service labels"
msgstr "使用服务标签自定义配置映射"

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid ""
"You can customize how environment variables and exposed ports are mapped to "
"application configuration properties using service labels."
msgstr "您可以自定义使用服务标签将环境变量和暴露端口映射到应用程序配置属性的方式。"

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid "Mapping environment variables"
msgstr "映射环境变量"

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid ""
"To map an environment variable to a specific application configuration "
"property,\n"
"use the `io.quarkus.devservices.compose.config_map.env.<env-var-name>` label."
""
msgstr ""
"要将环境变量映射到特定的应用程序配置属性，请使用 `io.quarkus.devservices.compose.config_map.env.<env-"
"var-name>` 标签。"

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid "Let's take the example of an MQTT broker:"
msgstr "让我们以 MQTT 代理为例："

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid "With the `./conf` containing the `mosquitto.conf` file:"
msgstr "`./conf` 包含 `mosquitto.conf` 文件："

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid ""
"and the `password.txt` file containing the user and encrypted password:"
msgstr "以及包含用户和加密密码的 `password.txt` 文件："

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid "In this example:"
msgstr "在这个例子中"

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid ""
"The `MQTT_USER` environment variable with the value `user` is mapped to the "
"`mp.messaging.connector.smallrye-mqtt.username` property"
msgstr ""
"`MQTT_USER` 环境变量的值 `user` 被映射到 `mp.messaging.connector.smallrye-mqtt."
"username` 属性"

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid ""
"The `MQTT_PASSWORD` environment variable with the value `pass` is mapped to "
"the `mp.messaging.connector.smallrye-mqtt.password` property"
msgstr ""
"`MQTT_PASSWORD` 环境变量的值 `pass` 被映射到 `mp.messaging.connector.smallrye-mqtt."
"password` 属性"

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid ""
"With the `password_file` is configured in the `mosquitto.conf`,\n"
"environment variables are not used to set the username and password but to "
"map them to the application properties."
msgstr ""
"由于 `password_file` 是在 `mosquitto.conf` "
"中配置的，环境变量不是用来设置用户名和密码的，而是用来将它们映射到应用程序属性的。"

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid "Mapping exposed ports"
msgstr "映射暴露的端口"

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid ""
"To map an exposed port to a specific application configuration property,\n"
"use the `io.quarkus.devservices.compose.config_map.port.<container-port>` "
"label:"
msgstr ""
"要将暴露的端口映射到特定的应用程序配置属性，请使用 `io.quarkus.devservices.compose.config_map.port."
"<container-port>` 标签："

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid ""
"In the example above:\n"
"- Port 7432 is mapped to the `quarkus.datasource.jdbc.port` property\n"
"- Port 9080 is mapped to the `quarkus.http.port` property"
msgstr ""
"在上面的示例中： - 7432 端口映射到 `quarkus.datasource.jdbc.port` 属性 - 9080 端口映射到 "
"`quarkus.http.port` 属性"

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid ""
"The mapped properties will contain the host port that is mapped to the "
"container port,\n"
"which may be different from the container port if you're using dynamic port "
"mapping (e.g., `- '5432'` instead of `- '7432:5432'`)."
msgstr ""
"映射属性将包含映射到容器端口的主机端口，如果使用的是动态端口映射（例如， `- '5432'` 而不是 `- '7432:5432'` "
"），该端口可能与容器端口不同。"

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid "Exposing port mappings to running containers"
msgstr "向运行中的容器公开端口映射"

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid ""
"In some cases, containers need to know the host ports they're mapped to at "
"runtime.\n"
"For example, a Kafka broker needs to advertise its externally accessible "
"address to clients."
msgstr "在某些情况下，容器需要知道它们在运行时映射到的主机端口。例如，Kafka 代理需要向客户端公布其外部可访问地址。"

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid ""
"You can use the `io.quarkus.devservices.compose.exposed_ports` label to "
"specify a file path inside the container where port mappings will be written:"
""
msgstr ""
"您可以使用 `io.quarkus.devservices.compose.exposed_ports` 标签来指定容器内写入端口映射的文件路径："

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid ""
"When the container starts, Quarkus will copy a file at the specified path "
"containing environment variable-style port mappings:"
msgstr "容器启动时，Quarkus 会在指定路径下复制一个文件，其中包含环境变量式端口映射："

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid ""
"Each line follows the format `PORT_<containerPort>=<hostPort>`, where "
"_containerPort_ is the port exposed by the container and _hostPort_ is the "
"dynamically assigned port on the host.\n"
"The container command can wait until the file is present, and then source "
"this file to access these mappings as environment variables:"
msgstr ""
"每一行都遵循以下格式 `PORT_<containerPort>=<hostPort>` ，其中 _containerPort_ 是容器暴露的端口， "
"_hostPort_ 是主机上动态分配的端口。容器命令可以等待该文件出现，然后将该文件作为环境变量访问这些映射："

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid "Controlling Service Lifecycle with Compose"
msgstr "使用 Compose 控制服务生命周期"

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid ""
"Compose Dev Services provides several configuration options to control how "
"services are started, stopped and shared between application instances."
msgstr "金豪开发服务提供多个配置选项，可控制应用程序实例之间如何启动、停止和共享服务。"

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid ""
"When the application starts in development or test mode, Compose Dev "
"Services decides whether to start services or to discover already running "
"services based on the configuration.\n"
"When the application stops, Compose Dev Services stops the services it "
"started."
msgstr ""
"当应用程序以开发或测试模式启动时，金豪开发服务会根据配置决定是启动服务还是发现已在运行的服务。当应用程序停止时，金豪开发服务会停止已启动的服务。"

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid "Compose Project Name"
msgstr "编写项目名称"

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid ""
"Compose uses the project name to identify resources such as services, "
"networks, volumes, etc. in order to namespace and isolate different compose "
"projects.\n"
"This enables the discovery of existing resources and cleanup resources when "
"the application stops."
msgstr ""
"Compose 使用项目名称来识别服务、网络、卷等资源，以便命名和隔离不同的 Compose 项目。这样就能发现现有资源，并在应用程序停止时清理资源。"

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid "Compose Dev Services determines the project name as follows:"
msgstr "金豪开发服务公司确定项目名称的方法如下："

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid ""
"If the `quarkus.compose.devservices.project-name` property is set, it's used "
"as the project name"
msgstr "如果设置了 `quarkus.compose.devservices.project-name` 属性，则将其用作项目名称"

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid ""
"If the top-level `name` attribute is specified in the Compose file, it's "
"used as the project name"
msgstr "如果在 Compose 文件中指定了顶层 `name` 属性，则该属性将用作项目名称"

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid ""
"Otherwise, the default name `quarkus-devservices-<application-name>` is "
"chosen."
msgstr "否则，将选择默认名称 `quarkus-devservices-<application-name>` 。"

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid "Discovering already started Compose Services"
msgstr "发现已启动的作曲服务"

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid ""
"Once the project name is determined, Compose Dev Services first tries to "
"discover existing services with that project name."
msgstr "项目名称确定后，Compose Dev Services 会首先尝试查找具有该项目名称的现有服务。"

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid ""
"The already started compose project may have been started by another Quarkus "
"application running locally with the same project name,\n"
"or manually using the `docker compose up` or `podman compose up` commands."
msgstr ""
"已经启动的 compose 项目可能是由本地运行的另一个具有相同项目名称的 Quarkus 应用程序启动的，或者是使用 `docker compose "
"up` 或 `podman compose up` 命令手动启动的。"

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid ""
"Regardless of how the services were started,\n"
"Compose Dev Services will configure dev services and injected configuration "
"properties,\n"
"but won't stop the services when the application is stopped."
msgstr "无论服务是如何启动的，Compose Dev Services 都会配置开发服务和注入的配置属性，但不会在应用程序停止时停止服务。"

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid ""
"If no compose files are found in the project, and no `quarkus.compose."
"devservices.project-name` is set,\n"
"Compose Dev Services won't try to discover any services and will be disabled."
""
msgstr ""
"如果在项目中找不到 Compose 文件，也没有设置 `quarkus.compose.devservices.project-name` ，那么 "
"Compose Dev Services 将不会尝试发现任何服务，并将被禁用。"

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid "Compose Dev Services used for tests"
msgstr "组成用于测试的开发服务"

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid ""
"For Quarkus tests, a generated project name in the format `quarkus-"
"devservices-<application-name>-<random-suffix>` is used by default to ensure "
"isolation between test runs and running dev mode services.\n"
"If the top-level name attribute is specified in the Compose file, the "
"project name in the format `<compose-name>-<random-suffix>` is used."
msgstr ""
"对于 Quarkus 测试，默认使用格式为 `quarkus-devservices-<application-name>-<random-"
"suffix>` 的生成项目名称，以确保测试运行与运行的开发模式服务之间的隔离。如果在 Compose 文件中指定了顶层名称属性，则会使用格式为 "
"`<compose-name>-<random-suffix>` 的项目名称。"

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid ""
"This way, Quarkus tests start a separate copy of the services defined in the "
"compose files.\n"
"For example, when running continuous testing in development mode, tests will "
"have their own isolated set of services."
msgstr "这样，Quarkus 测试就能单独启动一份在组成文件中定义的服务。例如，在开发模式下运行持续测试时，测试将拥有自己独立的服务集。"

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid ""
"You can change this behavior by setting the `quarkus.compose.devservices."
"reuse-project-for-tests=true` property.\n"
"This allows tests to reuse services started separately in development mode."
msgstr ""
"您可以通过设置 `quarkus.compose.devservices.reuse-project-for-tests=true` "
"属性来改变这种行为。这样，测试就可以重复使用在开发模式下单独启动的服务。"

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid "Using Start/Stop Controls"
msgstr "使用启动/停止控制器"

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid ""
"In the default lifecycle, Compose Dev Services will start and stop services "
"automatically when the application starts and stops.\n"
"For more fine-grained control, you can use the `start-services` and `stop-"
"services` configuration properties."
msgstr ""
"在默认生命周期中，金豪开发服务会在应用程序启动和停止时自动启动和停止服务。要进行更精细的控制，可以使用 `start-services` 和 `stop-"
"services` 配置属性。"

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid ""
"When `quarkus.compose.devservices.start-services=false` is set,\n"
"Compose Dev Services will only try to discover existing services with the "
"determined project name, but won't start any new services, even if compose "
"files are present."
msgstr ""
"当设置 `quarkus.compose.devservices.start-services=false` "
"时，金豪开发服务将只尝试发现已确定项目名称的现有服务，但不会启动任何新服务，即使存在编译文件也是如此。"

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid ""
"When `quarkus.compose.devservices.stop-services=false` is set, services will "
"continue running after the application stops.\n"
"This allows services to be reused by other applications or subsequent runs "
"of the same application."
msgstr ""
"设置 `quarkus.compose.devservices.stop-services=false` "
"后，服务将在应用程序停止后继续运行。这样，其他应用程序或同一应用程序的后续运行就可以重复使用服务。"

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid ""
"You can also configure the timeout for stopping services with the `quarkus."
"compose.devservices.stop-timeout` property.\n"
"After the timeout, Compose Dev Services will forcefully stop the services.\n"
"The default timeout is deliberately chosen to be short (1 second) for fast "
"cleanup, but you can increase it as needed:"
msgstr ""
"您还可以使用 `quarkus.compose.devservices.stop-timeout` "
"属性配置停止服务的超时时间。超时后，金豪开发服务将强制停止服务。为了快速清理，我们特意选择了较短的默认超时（1 秒），但您也可以根据需要增加超时："

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid "Relation to existing Dev Services"
msgstr "与现有开发服务的关系"

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid ""
"Compose Dev Services work alongside existing Dev Services implementations "
"provided by Quarkus extensions.\n"
"The service discovery process follows this order of precedence:"
msgstr "金豪开发服务可与 Quarkus 扩展提供的现有开发服务实现一起工作。服务发现过程遵循以下优先顺序："

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid ""
"Dev Service implementations first try locating services via shared service "
"labels (e.g., services started by other applications)"
msgstr "开发服务实施首先尝试通过共享服务标签（如由其他应用程序启动的服务）定位服务"

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid ""
"If no shared services are found, they fallback to discovering services "
"started by Compose Dev Services"
msgstr "如果找不到共享服务，它们会退回到发现由 Compose Dev Services 启动的服务"

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid ""
"If no Compose services are found, the default Dev Services implementation is "
"used (typically starting a Testcontainers-based service)"
msgstr "如果没有找到 Compose 服务，则使用默认的 Dev Services 实现（通常是启动基于 Testcontainers 的服务）。"

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid ""
"When Compose Dev Service creates or discovers a project, regular dev service "
"implementations create containers inside the compose project default network."
"\n"
"This ensures that all services can communicate with each other using their "
"service names as hostnames within the same network."
msgstr ""
"当编译开发服务创建或发现一个项目时，常规开发服务实现会在编译项目默认网络内创建容器。这样就能确保所有服务都能在同一网络内使用自己的服务名称作为主机名相互通信。"

#: _guides/compose-dev-services.adoc
#, fuzzy
msgid "Configuration reference"
msgstr "配置参考"
