# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:52+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/scripting.adoc:6
#, fuzzy, no-wrap
msgid "Scripting with Quarkus"
msgstr "用Quarkus编写脚本"

#. type: Plain text
#: upstream/_guides/scripting.adoc:11
#, fuzzy
msgid "Quarkus provides integration with https://jbang.dev[jbang] which allows you to write Java scripts/applications requiring no Maven nor Gradle to get running."
msgstr "Quarkus提供了与 link:https://jbang.dev[jbang] 的集成，使你可以编写不需要Maven或Gradle就能运行的Java脚本/应用程序。"

#. type: Plain text
#: upstream/_guides/scripting.adoc:13
#, fuzzy
msgid "In this guide, we will see how you can write a REST application using just a single Java file."
msgstr "在本指南中，我们将看到你如何只用一个Java文件就能写出一个REST应用程序。"

#. type: Title ==
#: upstream/_guides/scripting.adoc:16
#, fuzzy, no-wrap
msgid "Prerequisites"
msgstr "先决条件"

#. type: Plain text
#: upstream/_guides/scripting.adoc:23
#, fuzzy
msgid "https://jbang.dev/download[JBang]"
msgstr "link:https://jbang.dev/download[姜文]"

#. type: Title ==
#: upstream/_guides/scripting.adoc:24
#, fuzzy, no-wrap
msgid "Solution"
msgstr "解决方案"

#. type: Plain text
#: upstream/_guides/scripting.adoc:27
#, fuzzy
msgid "Normally we would link to a Git repository to clone but in this case there is no additional files than the following:"
msgstr "通常我们会链接到一个Git仓库来克隆，但在这种情况下，除了下面的文件，没有其他的文件。"

#. type: delimited block -
#: upstream/_guides/scripting.adoc:35
#, no-wrap
msgid ""
"//usr/bin/env jbang \"$0\" \"$@\" ; exit $?\n"
"//DEPS io.quarkus.platform:quarkus-bom:{quarkus-version}@pom\n"
"//DEPS io.quarkus:quarkus-resteasy-reactive\n"
"//JAVAC_OPTIONS -parameters\n"
"//JAVA_OPTIONS -Djava.util.logging.manager=org.jboss.logmanager.LogManager\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/scripting.adoc:44
#, no-wrap
msgid ""
"import io.quarkus.runtime.Quarkus;\n"
"import javax.enterprise.context.ApplicationScoped;\n"
"import javax.inject.Inject;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
"import org.jboss.logging.Logger;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/scripting.adoc:48 upstream/_guides/scripting.adoc:173
#: upstream/_guides/scripting.adoc:295
#, no-wrap
msgid ""
"@Path(\"/hello\")\n"
"@ApplicationScoped\n"
"public class quarkusapp {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/scripting.adoc:53 upstream/_guides/scripting.adoc:178
#, no-wrap
msgid ""
"    @GET\n"
"    public String sayHello() {\n"
"        return \"hello\";\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/scripting.adoc:57 upstream/_guides/scripting.adoc:304
#, no-wrap
msgid ""
"    public static void main(String[] args) {\n"
"        Quarkus.run(args);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/scripting.adoc:60 upstream/_guides/scripting.adoc:307
#, no-wrap
msgid ""
"    @Inject\n"
"    GreetingService service;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/scripting.adoc:67 upstream/_guides/scripting.adoc:314
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    @Path(\"/greeting/{name}\")\n"
"    public String greeting(String name) {\n"
"        return service.greeting(name);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/scripting.adoc:70 upstream/_guides/scripting.adoc:317
#, no-wrap
msgid ""
"    @ApplicationScoped\n"
"    static public class GreetingService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/scripting.adoc:76 upstream/_guides/scripting.adoc:323
#, no-wrap
msgid ""
"        public String greeting(String name) {\n"
"            return \"hello \" + name;\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/scripting.adoc:78
#, fuzzy, no-wrap
msgid "Architecture"
msgstr "建筑学"

#. type: Plain text
#: upstream/_guides/scripting.adoc:81
#, fuzzy
msgid "In this guide, we create a straightforward application serving a `hello` endpoint with a single source file, no additional build files like `pom.xml` or `build.gradle` needed. To demonstrate dependency injection, this endpoint uses a `greeting` bean."
msgstr "在本指南中，我们创建了一个直接的应用程序，为一个 `hello` 端点提供服务，只需一个源文件，不需要额外的构建文件，如 `pom.xml` 或 `build.gradle` 。为了演示依赖性注入，这个端点使用了一个 `greeting` bean。"

#. type: Named 'alt' AttributeList argument for macro 'image'
#: upstream/_guides/scripting.adoc:82
#, fuzzy, no-wrap
msgid "Architecture,"
msgstr "建筑。"

#. type: Target for macro image
#: upstream/_guides/scripting.adoc:82
#, no-wrap
msgid "getting-started-architecture.png"
msgstr ""

#. type: Title ==
#: upstream/_guides/scripting.adoc:84
#, fuzzy, no-wrap
msgid "Creating the initial file"
msgstr "创建初始文件"

#. type: Plain text
#: upstream/_guides/scripting.adoc:87
#, fuzzy
msgid "First, we need a Java file. JBang lets you create an initial version using:"
msgstr "首先，我们需要一个Java文件。JBang让你用以下方法创建一个初始版本。"

#. type: delimited block -
#: upstream/_guides/scripting.adoc:92
#, no-wrap
msgid ""
"jbang init scripting/quarkusapp.java\n"
"cd scripting\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/scripting.adoc:95
#, fuzzy
msgid "This command generates a .java file that you can directly run on Linux and macOS, i.e. `./quarkusapp.java` - on Windows you need to use `jbang quarkusapp.java`."
msgstr "这个命令生成了一个.java文件，你可以直接在Linux和macOS上运行，即 `./quarkusapp.java` - 在Windows上你需要使用 `jbang quarkusapp.java` 。"

#. type: Plain text
#: upstream/_guides/scripting.adoc:97
#, fuzzy
msgid "This initial version will print `Hello World` when run."
msgstr "这个初始版本在运行时将打印 `Hello World` 。"

#. type: Plain text
#: upstream/_guides/scripting.adoc:99
#, fuzzy
msgid "Once generated, look at the `quarkusapp.java` file."
msgstr "一旦生成，看一下 `quarkusapp.java` 文件。"

#. type: Plain text
#: upstream/_guides/scripting.adoc:101
#, fuzzy
msgid "You will find at the top a line looking like this:"
msgstr "你会发现在顶部有一行看起来像这样。"

#. type: delimited block -
#: upstream/_guides/scripting.adoc:105
#, no-wrap
msgid "//usr/bin/env jbang \"$0\" \"$@\" ; exit $?\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/scripting.adoc:108
#, fuzzy
msgid "This line is what on Linux and macOS allows you to run it as a script. On Windows this line is ignored."
msgstr "这一行在Linux和macOS上允许你作为一个脚本运行。在Windows上，这一行被忽略。"

#. type: Plain text
#: upstream/_guides/scripting.adoc:110
#, fuzzy
msgid "The next lines"
msgstr "接下来的几行"

#. type: delimited block -
#: upstream/_guides/scripting.adoc:114
#, no-wrap
msgid "// //DEPS <dependency1> <dependency2>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/scripting.adoc:117
#, fuzzy
msgid "illustrate how you add dependencies to this script. This is a feature of JBang."
msgstr "说明你是如何向这个脚本添加依赖关系的。这是JBang的一个特点。"

#. type: Plain text
#: upstream/_guides/scripting.adoc:119
#, fuzzy
msgid "Go ahead and update this line to include the `quarkus-bom` and the `quarkus-resteasy-reactive` dependency like so:"
msgstr "继续更新这一行，包括 `quarkus-bom` 和 `quarkus-resteasy-reactive` 的依赖关系，像这样。"

#. type: delimited block -
#: upstream/_guides/scripting.adoc:124
#, no-wrap
msgid ""
"//DEPS io.quarkus.platform:quarkus-bom:{quarkus-version}@pom\n"
"//DEPS io.quarkus:quarkus-resteasy-reactive\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/scripting.adoc:127
#, fuzzy
msgid "Now, run `jbang quarkusapp.java` and you will see JBang resolving this dependency and building the jar with help from Quarkus' JBang integration."
msgstr "现在，运行 `jbang quarkusapp.java` ，你会看到JBang在Quarkus的JBang集成的帮助下解决了这个依赖关系并构建了jar。"

#. type: delimited block -
#: upstream/_guides/scripting.adoc:131 upstream/_guides/scripting.adoc:202
#, no-wrap
msgid "$ jbang quarkusapp.java\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/scripting.adoc:142
#, no-wrap
msgid ""
"[jbang] Resolving dependencies...\n"
"[jbang]     Resolving io.quarkus:quarkus-resteasy:{quarkus-version}...Done\n"
"[jbang] Dependencies resolved\n"
"[jbang] Building jar...\n"
"[jbang] Post build with io.quarkus.launcher.JBangIntegration\n"
"Aug 30, 2020 5:40:55 AM org.jboss.threads.Version <clinit>\n"
"INFO: JBoss Threads version 3.1.1.Final\n"
"Aug 30, 2020 5:40:56 AM io.quarkus.deployment.QuarkusAugmentor run\n"
"INFO: Quarkus augmentation completed in 722ms\n"
"Hello World\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/scripting.adoc:145
#, fuzzy
msgid "For now the application does nothing new."
msgstr "目前，该应用程序没有做任何新的事情。"

#. type: Block title
#: upstream/_guides/scripting.adoc:147
#, fuzzy, no-wrap
msgid "How do I edit this file and get content assist?"
msgstr "我如何编辑这个文件并获得内容协助？"

#. type: delimited block =
#: upstream/_guides/scripting.adoc:151
#, fuzzy
msgid "As there is nothing but a `.java` file, most IDE's don't handle content assist well.  To work around that you can run `jbang edit quarkusapp.java`, this will print out a directory that will have a temporary project setup you can use in your IDE."
msgstr "由于只有一个 `.java` 文件，大多数IDE都不能很好地处理内容辅助。为了解决这个问题，你可以运行 `jbang edit quarkusapp.java` ，这将打印出一个目录，其中有一个临时项目设置，你可以在你的IDE中使用。"

#. type: delimited block =
#: upstream/_guides/scripting.adoc:153
#, fuzzy
msgid "On Linux/macOS you can run `<idecommand> `jbang edit quarkusapp.java``."
msgstr "在Linux/MacOS上，你可以运行 `<idecommand> `jbang edit quarkusapp.java`` 。"

#. type: delimited block =
#: upstream/_guides/scripting.adoc:156
#, fuzzy
msgid "If you add dependencies while editing, you can get JBang to automatically refresh the IDE project using `jbang edit --live=<idecommand> quarkusapp.java`."
msgstr "如果你在编辑时添加了依赖项，你可以使用 `jbang edit --live=<idecommand> quarkusapp.java` ，让JBang自动刷新IDE项目。"

#. type: Title ===
#: upstream/_guides/scripting.adoc:159
#, fuzzy, no-wrap
msgid "The JAX-RS resources"
msgstr "JAX-RS的资源"

#. type: Plain text
#: upstream/_guides/scripting.adoc:162
#, fuzzy
msgid "Now let us replace the class with one that uses Quarkus features:"
msgstr "现在让我们用一个使用Quarkus特性的类来代替这个类。"

#. type: delimited block -
#: upstream/_guides/scripting.adoc:169
#, no-wrap
msgid ""
"import io.quarkus.runtime.Quarkus;\n"
"import javax.enterprise.context.ApplicationScoped;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/scripting.adoc:183
#, no-wrap
msgid ""
"    public static void main(String[] args) {\n"
"        Quarkus.run(args);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/scripting.adoc:186
#, fuzzy
msgid "It's a very simple class with a main method that starts Quarkus with a REST endpoint, returning \"hello\" to requests on \"/hello\"."
msgstr "这是一个非常简单的类，有一个主方法，用REST终端启动Quarkus，对\"/hello \"上的请求返回 \"hello\"。"

#. type: Block title
#: upstream/_guides/scripting.adoc:188
#, fuzzy, no-wrap
msgid "Why is the `main` method there?"
msgstr "为什么会有 `main` 方法？"

#. type: delimited block =
#: upstream/_guides/scripting.adoc:191
#, fuzzy
msgid "A `main` method is currently needed for the JBang integration to work - we might remove this requirement in the future."
msgstr "目前需要一个 `main` 方法来使JBang集成工作--我们将来可能会取消这一要求。"

#. type: Title ==
#: upstream/_guides/scripting.adoc:193
#, fuzzy, no-wrap
msgid "Running the application"
msgstr "运行应用程序"

#. type: Plain text
#: upstream/_guides/scripting.adoc:196
#, fuzzy
msgid "Now when you run the application you will see Quarkus start up."
msgstr "现在，当你运行该应用程序时，你会看到Quarkus启动了。"

#. type: Plain text
#: upstream/_guides/scripting.adoc:198
#, fuzzy
msgid "Use: `jbang quarkusapp.java`:"
msgstr "使用： `jbang quarkusapp.java` 。"

#. type: delimited block -
#: upstream/_guides/scripting.adoc:216
#, no-wrap
msgid ""
"[jbang] Building jar...\n"
"[jbang] Post build with io.quarkus.launcher.JBangIntegration\n"
"Aug 30, 2020 5:49:01 AM org.jboss.threads.Version <clinit>\n"
"INFO: JBoss Threads version 3.1.1.Final\n"
"Aug 30, 2020 5:49:02 AM io.quarkus.deployment.QuarkusAugmentor run\n"
"INFO: Quarkus augmentation completed in 681ms\n"
"__  ____  __  _____   ___  __ ____  ______\n"
" --/ __ \\/ / / / _ | / _ \\/ //_/ / / / __/\n"
" -/ /_/ / /_/ / __ |/ , _/ ,< / /_/ /\\ \\\n"
"--\\___\\_\\____/_/ |_/_/|_/_/|_|\\____/___/\n"
"2020-08-30 05:49:03,255 INFO  [io.quarkus] (main) Quarkus {quarkus-version} on JVM started in 0.638s. Listening on: http://0.0.0.0:8080\n"
"2020-08-30 05:49:03,272 INFO  [io.quarkus] (main) Profile prod activated.\n"
"2020-08-30 05:49:03,272 INFO  [io.quarkus] (main) Installed features: [cdi, resteasy-reactive]\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/scripting.adoc:219
#, fuzzy
msgid "Once started, you can request the provided endpoint:"
msgstr "一旦启动，你可以请求提供的端点。"

#. type: delimited block -
#: upstream/_guides/scripting.adoc:224
#, no-wrap
msgid ""
"$ curl -w \"\\n\" http://localhost:8080/hello\n"
"hello\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/scripting.adoc:227
#, fuzzy
msgid "After that, hit `CTRL+C` to stop the application."
msgstr "之后，点击 `CTRL+C` ，停止应用程序。"

#. type: Block title
#: upstream/_guides/scripting.adoc:229
#, fuzzy, no-wrap
msgid "Automatically add newline with `curl -w \"\\n\"`"
msgstr "自动添加换行符 `curl -w \"\\n\"` "

#. type: delimited block =
#: upstream/_guides/scripting.adoc:232
#, fuzzy
msgid "We are using `curl -w \"\\n\"` in this example to avoid your terminal printing a '%' or put both result and next command prompt on the same line."
msgstr "我们在这个例子中使用 `curl -w \"\\n\"` ，以避免你的终端打印出'%'或将结果和下一个命令提示放在同一行。"

#. type: Block title
#: upstream/_guides/scripting.adoc:235
#, fuzzy, no-wrap
msgid "Why is `quarkus-resteasy-reactive` not resolved?"
msgstr "为什么 `quarkus-resteasy-reactive` ，没有得到解决？"

#. type: delimited block =
#: upstream/_guides/scripting.adoc:239
#, fuzzy
msgid "In this second run you should not see a line saying it is resolving `quarkus-resteasy-reactive` as JBang caches the dependency resolution between runs.  If you want to clear the caches to force resolution use `jbang cache clear`."
msgstr "在第二次运行中，你不应该看到有一行说它正在解决 `quarkus-resteasy-reactive` ，因为JBang在两次运行之间缓存了依赖关系的解决。如果你想清除缓存以强制解决，可以使用 `jbang cache clear` 。"

#. type: Title ==
#: upstream/_guides/scripting.adoc:241
#, fuzzy, no-wrap
msgid "Using injection"
msgstr "使用注射法"

#. type: Plain text
#: upstream/_guides/scripting.adoc:245
#, fuzzy
msgid "Dependency injection in Quarkus is based on ArC which is a CDI-based dependency injection solution tailored for Quarkus' architecture.  You can learn more about it in the xref:cdi-reference.adoc[Contexts and Dependency Injection guide]."
msgstr "Quarkus中的依赖注入是基于ArC的，它是为Quarkus的架构量身定做的基于CDI的依赖注入解决方案。你可以在 link:cdi-reference.html[Contexts and Dependency Injection指南] 中了解更多关于它的信息。"

#. type: Plain text
#: upstream/_guides/scripting.adoc:247
#, fuzzy
msgid "ArC comes as a dependency of `quarkus-resteasy-reactive` so you already have it handy."
msgstr "ArC作为 `quarkus-resteasy-reactive` 的一个依赖项，所以你已经有了它。"

#. type: Plain text
#: upstream/_guides/scripting.adoc:249
#, fuzzy
msgid "Let's modify the application and add a companion bean."
msgstr "让我们修改应用程序并添加一个伴生豆。"

#. type: Plain text
#: upstream/_guides/scripting.adoc:252
#, fuzzy
msgid "Normally you would add a separate class, but as we are aiming to have it all in one file you will add a nested class."
msgstr "通常你会添加一个单独的类，但由于我们的目标是将其全部放在一个文件中，你将添加一个嵌套类。"

#. type: Plain text
#: upstream/_guides/scripting.adoc:254
#, fuzzy
msgid "Add the following *inside* the `quarkusapp` class body."
msgstr " *在* `quarkusapp` 类主体 *内* 添加以下内容。"

#. type: delimited block -
#: upstream/_guides/scripting.adoc:259
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"static public class GreetingService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/scripting.adoc:263
#, no-wrap
msgid ""
"    public String greeting(String name) {\n"
"        return \"hello \" + name;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/scripting.adoc:265
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Block title
#: upstream/_guides/scripting.adoc:268
#, fuzzy, no-wrap
msgid "Use of nested static public classes"
msgstr "使用嵌套的静态公有类"

#. type: delimited block =
#: upstream/_guides/scripting.adoc:271
#, fuzzy
msgid "We are using a nested static public class instead of a top level class for two reasons:"
msgstr "我们使用一个嵌套的静态公有类而不是顶层类，有两个原因。"

#. type: delimited block =
#: upstream/_guides/scripting.adoc:273
#, fuzzy
msgid "JBang currently does not support multiple source files."
msgstr "JBang目前不支持多源文件。"

#. type: delimited block =
#: upstream/_guides/scripting.adoc:274
#, fuzzy
msgid "All Java frameworks relying on introspection have challenges using top level classes as they are not as visible as public classes; and in Java there can only be one top level public class in a file."
msgstr "所有依赖自省的Java框架在使用顶层类时都面临挑战，因为它们不像公有类那样可见；而且在Java中，一个文件中只能有一个顶层公有类。"

#. type: Plain text
#: upstream/_guides/scripting.adoc:278
#, fuzzy
msgid "Edit the `quarksapp` class to inject the `GreetingService` and create a new endpoint using it, you should end up with something like:"
msgstr "编辑 `quarksapp` 类以注入 `GreetingService` ，并使用它创建一个新的端点，你最终应该得到类似的结果。"

#. type: delimited block -
#: upstream/_guides/scripting.adoc:283
#, no-wrap
msgid ""
"//usr/bin/env jbang \"$0\" \"$@\" ; exit $?\n"
"//DEPS io.quarkus:quarkus-resteasy-reactive:{quarkus-version}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/scripting.adoc:291
#, no-wrap
msgid ""
"import io.quarkus.runtime.Quarkus;\n"
"import javax.enterprise.context.ApplicationScoped;\n"
"import javax.inject.Inject;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/scripting.adoc:300
#, no-wrap
msgid ""
"    @GET\n"
"    public String sayHello() {\n"
"        return \"hello from Quarkus with jbang.dev\";\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/scripting.adoc:326
#, fuzzy
msgid "Now when you run `jbang quarkusapp.java` you can check what the new end point returns:"
msgstr "现在当你运行 `jbang quarkusapp.java` ，你可以检查新的端点返回什么。"

#. type: delimited block -
#: upstream/_guides/scripting.adoc:331
#, no-wrap
msgid ""
"$ curl -w \"\\n\" http://localhost:8080/hello/greeting/quarkus\n"
"hello null\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/scripting.adoc:334
#, fuzzy
msgid "Now that is unexpected, why is it returning `hello null` and not `hello quarkus`?"
msgstr "现在，这是意料之外的，为什么它返回 `hello null` ，而不是 `hello quarkus` ？"

#. type: Plain text
#: upstream/_guides/scripting.adoc:336
#, fuzzy
msgid "The reason is that RESTEasy Reactive relies on the `-parameters` compiler flag to be set to be able to map `{name}` to the `name` parameter."
msgstr "原因是RESTEasy Reactive依赖于 `-parameters` 编译器标志的设置，以便能够将 `{name}` 映射到 `name` 参数。"

#. type: Plain text
#: upstream/_guides/scripting.adoc:338
#, fuzzy
msgid "We fix that by adding the following comment instruction to the file:"
msgstr "我们通过在文件中添加以下注释指令来解决这个问题。"

#. type: delimited block -
#: upstream/_guides/scripting.adoc:342
#, no-wrap
msgid "//JAVAC_OPTIONS -parameters\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/scripting.adoc:345
#, fuzzy
msgid "Now when you run with `jbang quarkusapp.java` the end point should return what you expect:"
msgstr "现在，当你用 `jbang quarkusapp.java` ，终点应该返回你所期望的结果。"

#. type: delimited block -
#: upstream/_guides/scripting.adoc:350
#, no-wrap
msgid ""
"$ curl -w \"\\n\" http://localhost:8080/hello/greeting/quarkus\n"
"hello quarkus\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/scripting.adoc:352
#, fuzzy, no-wrap
msgid "Debugging"
msgstr "调试"

#. type: Plain text
#: upstream/_guides/scripting.adoc:356
#, fuzzy
msgid "To debug the application you use `jbang --debug quarkusapp.java` and you can use your IDE to connect on port 4004; if you want to use the more traditional Quarkus debug port you can use `jbang --debug=5005 quarkusapp.java`."
msgstr "为了调试应用程序，你可以使用 `jbang --debug quarkusapp.java` ，你可以使用你的IDE在4004端口连接；如果你想使用更传统的Quarkus调试端口，你可以使用 `jbang --debug=5005 quarkusapp.java` 。"

#. type: Plain text
#: upstream/_guides/scripting.adoc:358
#, fuzzy
msgid "Note: JBang debugging always suspends thus you need to connect the debugger to have the application run."
msgstr "注意：JBang的调试总是暂停的，因此你需要连接调试器来让应用程序运行。"

#. type: Title ==
#: upstream/_guides/scripting.adoc:359
#, fuzzy, no-wrap
msgid "Logging"
msgstr "伐木"

#. type: Plain text
#: upstream/_guides/scripting.adoc:362
#, fuzzy
msgid "To use logging in Quarkus scripting with JBang you do as usual, with configuring a logger, i.e."
msgstr "要在Quarkus脚本中使用JBang的日志记录，你可以像往常一样，配置一个日志记录器，即"

#. type: delimited block -
#: upstream/_guides/scripting.adoc:366
#, no-wrap
msgid "public static final Logger LOG = Logger.getLogger(quarkusapp.class);\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/scripting.adoc:369
#, fuzzy
msgid "To get it to work you need to add a Java option to ensure the logging is initialized properly, i.e."
msgstr "为了让它工作，你需要添加一个Java选项，以确保日志被正确初始化，即"

#. type: delimited block -
#: upstream/_guides/scripting.adoc:373
#, no-wrap
msgid "//JAVA_OPTIONS -Djava.util.logging.manager=org.jboss.logmanager.LogManager\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/scripting.adoc:376
#, fuzzy
msgid "With that in place running `jbang quarkusapp.java` will log and render as expected."
msgstr "有了这一点，运行 `jbang quarkusapp.java` ，就会像预期的那样记录和渲染。"

#. type: Title ==
#: upstream/_guides/scripting.adoc:377
#, fuzzy, no-wrap
msgid "Configuring Application"
msgstr "配置应用"

#. type: Plain text
#: upstream/_guides/scripting.adoc:380
#, fuzzy
msgid "You can use `//Q:CONFIG <property>=<value>` to set up static configuration for your application."
msgstr "你可以使用 `//Q:CONFIG <property>=<value>` ，为你的应用程序设置静态配置。"

#. type: Plain text
#: upstream/_guides/scripting.adoc:382
#, fuzzy
msgid "I.e. if you wanted to add the `smallrye-openapi` and `swagger-ui` extensions and have the Swagger UI always show up you would add the following:"
msgstr "例如，如果你想添加 `smallrye-openapi` 和 `swagger-ui` 扩展，并让 Swagger UI 始终显示出来，你可以添加以下内容。"

#. type: delimited block -
#: upstream/_guides/scripting.adoc:388
#, no-wrap
msgid ""
"//DEPS io.quarkus:quarkus-smallrye-openapi:{quarkus-version}\n"
"//DEPS io.quarkus:quarkus-swagger-ui:{quarkus-version}\n"
"//Q:CONFIG quarkus.swagger-ui.always-include=true\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/scripting.adoc:391
#, fuzzy
msgid "Now during build the `quarkus.swagger-ui.always-include` will be generated into the resulting jar and `http://0.0.0.0:8080/q/swagger-ui` will be available when run."
msgstr "现在，在构建过程中， `quarkus.swagger-ui.always-include` 将被生成到生成的jar中，并且 `<a href=\"http://0.0.0.0:8080/q/swagger-ui\" class=\"bare\">http://0.0.0.0:8080/q/swagger-ui</a>` 将在运行时可用。"

#. type: Title ==
#: upstream/_guides/scripting.adoc:392
#, fuzzy, no-wrap
msgid "Running as a native application"
msgstr "作为一个本地应用程序运行"

#. type: Plain text
#: upstream/_guides/scripting.adoc:395
#, fuzzy
msgid "If you have the `native-image` binary installed and `GRAALVM_HOME` set, you can get the native executable built and run using `jbang --native quarkusapp.java`:"
msgstr "如果你已经安装了 `native-image` 二进制文件，并设置了 `GRAALVM_HOME` ，你可以使用 `jbang --native quarkusapp.java` 获得本地可执行文件的构建和运行。"

#. type: delimited block -
#: upstream/_guides/scripting.adoc:399
#, no-wrap
msgid "$ jbang --native quarkusapp.java\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/scripting.adoc:412
#, no-wrap
msgid ""
"[jbang] Building jar...\n"
"[jbang] Post build with io.quarkus.launcher.JBangIntegration\n"
"Aug 30, 2020 6:21:15 AM org.jboss.threads.Version <clinit>\n"
"INFO: JBoss Threads version 3.1.1.Final\n"
"Aug 30, 2020 6:21:16 AM io.quarkus.deployment.pkg.steps.JarResultBuildStep buildNativeImageThinJar\n"
"INFO: Building native image source jar: /var/folders/yb/sytszfld4sg8vwr1h0w20jlw0000gn/T/quarkus-jbang3291688251685023074/quarkus-application-native-image-source-jar/quarkus-application-runner.jar\n"
"Aug 30, 2020 6:21:16 AM io.quarkus.deployment.pkg.steps.NativeImageBuildStep build\n"
"INFO: Building native image from /var/folders/yb/sytszfld4sg8vwr1h0w20jlw0000gn/T/quarkus-jbang3291688251685023074/quarkus-application-native-image-source-jar/quarkus-application-runner.jar\n"
"Aug 30, 2020 6:21:16 AM io.quarkus.deployment.pkg.steps.NativeImageBuildStep checkGraalVMVersion\n"
"INFO: Running Quarkus native-image plugin on GraalVM Version 20.1.0 (Java Version 11.0.7)\n"
"Aug 30, 2020 6:21:16 AM io.quarkus.deployment.pkg.steps.NativeImageBuildStep build\n"
"INFO: /Users/max/.sdkman/candidates/java/20.1.0.r11-grl/bin/native-image -J-Djava.util.logging.manager=org.jboss.logmanager.LogManager -J-Dsun.nio.ch.maxUpdateArraySize=100 -J-Dvertx.logger-delegate-factory-class-name=io.quarkus.vertx.core.runtime.VertxLogDelegateFactory -J-Dvertx.disableDnsResolver=true -J-Dio.netty.leakDetection.level=DISABLED -J-Dio.netty.allocator.maxOrder=1 -J-Duser.language=en -J-Dfile.encoding=UTF-8 --initialize-at-build-time= -H:InitialCollectionPolicy=com.oracle.svm.core.genscavenge.CollectionPolicy\\$BySpaceAndTime -H:+JNI -jar quarkus-application-runner.jar -H:FallbackThreshold=0 -H:+ReportExceptionStackTraces -H:-AddAllCharsets -H:EnableURLProtocols=http --no-server -H:-UseServiceLoaderFeature -H:+StackTrace quarkus-application-runner\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/scripting.adoc:422
#, no-wrap
msgid ""
"Aug 30, 2020 6:22:31 AM io.quarkus.deployment.QuarkusAugmentor run\n"
"INFO: Quarkus augmentation completed in 76010ms\n"
"__  ____  __  _____   ___  __ ____  ______\n"
" --/ __ \\/ / / / _ | / _ \\/ //_/ / / / __/\n"
" -/ /_/ / /_/ / __ |/ , _/ ,< / /_/ /\\ \\\n"
"--\\___\\_\\____/_/ |_/_/|_/_/|_|\\____/___/\n"
"2020-08-30 06:22:32,012 INFO  [io.quarkus] (main) Quarkus {quarkus-version} native started in 0.017s. Listening on: http://0.0.0.0:8080\n"
"2020-08-30 06:22:32,013 INFO  [io.quarkus] (main) Profile prod activated.\n"
"2020-08-30 06:22:32,013 INFO  [io.quarkus] (main) Installed features: [cdi, resteasy-reactive]\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/scripting.adoc:425
msgid "This native build will take some time on first run but any subsequent runs (without changing `quarkusapp.java`) will be close to instant thanks to JBang cache:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/scripting.adoc:436
#, no-wrap
msgid ""
"$ jbang --native quarkusapp.java\n"
"__  ____  __  _____   ___  __ ____  ______\n"
" --/ __ \\/ / / / _ | / _ \\/ //_/ / / / __/\n"
" -/ /_/ / /_/ / __ |/ , _/ ,< / /_/ /\\ \\\n"
"--\\___\\_\\____/_/ |_/_/|_/_/|_|\\____/___/\n"
"2020-08-30 06:23:36,846 INFO  [io.quarkus] (main) Quarkus {quarkus-version} native started in 0.015s. Listening on: http://0.0.0.0:8080\n"
"2020-08-30 06:23:36,846 INFO  [io.quarkus] (main) Profile prod activated.\n"
"2020-08-30 06:23:36,846 INFO  [io.quarkus] (main) Installed features: [cdi, resteasy-reactive]\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/scripting.adoc:438
#, no-wrap
msgid "Conclusion"
msgstr ""

#. type: Plain text
#: upstream/_guides/scripting.adoc:440
msgid "If you want to get started with Quarkus or write something quickly, Quarkus Scripting with jbang lets you do that. No Maven, no Gradle - just a Java file. In this guide we outlined the very basics on using Quarkus with JBang; if you want to learn more about what JBang can do, go see https://jbang.dev."
msgstr ""
