# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:52+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/context-propagation.adoc:6
#, fuzzy, no-wrap
msgid "Context Propagation in Quarkus"
msgstr "Quarkus中的语境传播"

#. type: Plain text
#: upstream/_guides/context-propagation.adoc:15
#, fuzzy, no-wrap
msgid ""
"Traditional blocking code uses link:https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/ThreadLocal.html[`ThreadLocal`]\n"
" variables to store contextual objects in order to avoid\n"
"passing them as parameters everywhere. Many Quarkus extensions require those contextual objects to operate\n"
"properly: xref:rest-json.adoc[RESTEasy Reactive], xref:cdi-reference.adoc[ArC] and xref:transaction.adoc[Transaction]\n"
"for example.\n"
msgstr "传统的阻塞式代码使用 link:https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/ThreadLocal.html[`ThreadLocal`] 变量来存储上下文对象，以避免将它们作为参数到处传递。许多Quarkus扩展需要这些上下文对象才能正常运行。例如 link:rest-json.html[RESTEasy Reactive] 、 link:cdi-reference.html[ArC] 和 link:transaction.html[Transaction] 。"

#. type: Plain text
#: upstream/_guides/context-propagation.adoc:20
#, fuzzy
msgid "If you write reactive/async code, you have to cut your work into a pipeline of code blocks that get executed \"later\", and in practice after the method you defined them in have returned. As such, `try/finally` blocks as well as `ThreadLocal` variables stop working, because your reactive code gets executed in another thread, after the caller ran its `finally` block."
msgstr "如果你写的是反应式/同步代码，你必须把你的工作切割成一个代码块的流水线，\"以后 \"执行，实际上是在你定义的方法返回之后。因此， `try/finally` 块以及 `ThreadLocal` 变量停止工作，因为你的反应式代码会在另一个线程中执行，在调用者运行其 `finally` 块之后。"

#. type: Plain text
#: upstream/_guides/context-propagation.adoc:25
#, fuzzy
msgid "link:https://github.com/smallrye/smallrye-context-propagation[SmallRye Context Propagation] an implementation of link:https://github.com/eclipse/microprofile-context-propagation[MicroProfile Context Propagation] was made to make those Quarkus extensions work properly in reactive/async settings. It works by capturing those contextual values that used to be in thread-locals, and restoring them when your code is called."
msgstr "link:https://github.com/smallrye/smallrye-context-propagation[SmallRye Context Propagation] 是 link:https://github.com/eclipse/microprofile-context-propagation[MicroProfile Context Propagation] 的一个实现，是为了让那些Quarkus扩展在反应式/同步设置中正常工作。它的工作原理是捕获那些曾经在线程位置的上下文值，并在你的代码被调用时恢复它们。"

#. type: Title ==
#: upstream/_guides/context-propagation.adoc:26
#, fuzzy, no-wrap
msgid "Solution"
msgstr "解决方案"

#. type: Plain text
#: upstream/_guides/context-propagation.adoc:30
#, fuzzy
msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can go right to the completed example."
msgstr "我们建议你按照下面几节的说明，一步一步地创建应用程序。然而，你可以直接进入已完成的例子。"

#. type: Plain text
#: upstream/_guides/context-propagation.adoc:32
#, fuzzy
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "克隆 Git 仓库。 `git clone {quickstarts-clone-url}` ，或者下载一个{quickstarts-archive-url}[存档]。"

#. type: Plain text
#: upstream/_guides/context-propagation.adoc:34
#, fuzzy
msgid "The solution is located in the `context-propagation-quickstart` {quickstarts-tree-url}/context-propagation-quickstart[directory]."
msgstr "该解决方案位于 `context-propagation-quickstart` {quickstarts-tree-url}/context-propagation-quickstart[目录]中。"

#. type: Title ==
#: upstream/_guides/context-propagation.adoc:35
#, fuzzy, no-wrap
msgid "Setting it up"
msgstr "设置它"

#. type: Plain text
#: upstream/_guides/context-propagation.adoc:39
#, fuzzy
msgid "If you are using link:http://smallrye.io/smallrye-mutiny[Mutiny] (the `quarkus-mutiny` extension), you just need to add the the `quarkus-smallrye-context-propagation` extension to enable context propagation."
msgstr "如果你使用 link:http://smallrye.io/smallrye-mutiny[Mutiny] （ `quarkus-mutiny` 扩展），你只需要添加 `quarkus-smallrye-context-propagation` 扩展来启用上下文传播。"

#. type: Plain text
#: upstream/_guides/context-propagation.adoc:41
#, fuzzy
msgid "In other words, add the following dependencies to your build file:"
msgstr "换句话说，在你的构建文件中添加以下依赖项。"

#. type: Block title
#: upstream/_guides/context-propagation.adoc:43
#, fuzzy, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: delimited block -
#: upstream/_guides/context-propagation.adoc:55
#, no-wrap
msgid ""
"<!-- RESTEasy Reactive extension if not already included -->\n"
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-resteasy-reactive</artifactId>\n"
"</dependency>\n"
"<!-- Context Propagation extension -->\n"
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-smallrye-context-propagation</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_guides/context-propagation.adoc:58
#, fuzzy, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: delimited block -
#: upstream/_guides/context-propagation.adoc:64
#, no-wrap
msgid ""
"// RESTEasy Reactive extension if not already included\n"
"implementation(\"io.quarkus:quarkus-resteasy-reactive\")\n"
"// Context Propagation extension\n"
"implementation(\"io.quarkus:quarkus-smallrye-context-propagation\")\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/context-propagation.adoc:67
#, fuzzy
msgid "With this, you will get context propagation for ArC, RESTEasy Reactive and transactions, if you are using them."
msgstr "有了它，你将获得ArC、RESTEasy Reactive和事务的上下文传播，如果你正在使用它们的话。"

#. type: Title ==
#: upstream/_guides/context-propagation.adoc:68
#, fuzzy, no-wrap
msgid "Usage example with Mutiny"
msgstr "叛变的用例"

#. type: Block title
#: upstream/_guides/context-propagation.adoc:71
#, fuzzy, no-wrap
msgid "Mutiny"
msgstr "叛变"

#. type: delimited block =
#: upstream/_guides/context-propagation.adoc:75
#, fuzzy
msgid "This section uses Mutiny reactive types.  If you are not familiar with Mutiny, check xref:mutiny-primer.adoc[Mutiny - an intuitive reactive programming library]."
msgstr "本节使用Mutiny反应式类型。如果你不熟悉Mutiny，请查看 link:mutiny-primer.html[Mutiny - 一个直观的反应式编程库] 。"

#. type: Plain text
#: upstream/_guides/context-propagation.adoc:80
#, fuzzy
msgid "Let's write a REST endpoint that reads the next 3 items from a xref:kafka.adoc[Kafka topic], stores them in a database using xref:hibernate-orm-panache.adoc[Hibernate ORM with Panache] (all in the same transaction) before returning them to the client, you can do it like this:"
msgstr "让我们写一个REST端点，从 link:kafka.html[Kafka主题] 中读取接下来的3个项目，使用 link:hibernate-orm-panache.html[Hibernate ORM与Panache] 将它们存储在数据库中（都在同一个事务中），然后再返回给客户端，你可以这样做。"

#. type: delimited block -
#: upstream/_guides/context-propagation.adoc:86
#: upstream/_guides/context-propagation.adoc:238
#, no-wrap
msgid ""
"    // Get the prices stream\n"
"    @Inject\n"
"    @Channel(\"prices\") Publisher<Double> prices;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/context-propagation.adoc:110
#, no-wrap
msgid ""
"    @Transactional\n"
"    @GET\n"
"    @Path(\"/prices\")\n"
"    @Produces(MediaType.SERVER_SENT_EVENTS)\n"
"    @RestStreamElementType(MediaType.TEXT_PLAIN)\n"
"    public Publisher<Double> prices() {\n"
"        // get the next three prices from the price stream\n"
"        return Multi.createFrom().publisher(prices)\n"
"                .select().first(3)\n"
"                // The items are received from the event loop, so cannot use Hibernate ORM (classic)\n"
"                // Switch to a worker thread, the transaction will be propagated\n"
"                .emitOn(Infrastructure.getDefaultExecutor())\n"
"                .map(price -> {\n"
"                    // store each price before we send them\n"
"                    Price priceEntity = new Price();\n"
"                    priceEntity.value = price;\n"
"                    // here we are all in the same transaction\n"
"                    // thanks to context propagation\n"
"                    priceEntity.persist();\n"
"                    return price;\n"
"                    // the transaction is committed once the stream completes\n"
"                });\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/context-propagation.adoc:114
#, fuzzy
msgid "Notice that thanks to Mutiny support for context propagation, this works out of the box.  The 3 items are persisted using the same transaction and this transaction is committed when the stream completes."
msgstr "请注意，由于Mutiny对上下文传播的支持，这一点是开箱即用的。这3个项目使用同一个事务进行持久化，并且这个事务在流完成后被提交。"

#. type: Title ==
#: upstream/_guides/context-propagation.adoc:115
#, fuzzy, no-wrap
msgid "Usage example for `CompletionStage`"
msgstr "的使用实例 `CompletionStage` "

#. type: Plain text
#: upstream/_guides/context-propagation.adoc:123
#, fuzzy
msgid "If you are using link:https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/concurrent/CompletionStage.html[`CompletionStage`] you need manual context propagation. You can do that by injecting a `ThreadContext` or `ManagedExecutor` that will propagate every context. For example, here we use the xref:vertx.adoc[Vert.x Web Client] to get the list of Star Wars people, then store them in the database using xref:hibernate-orm-panache.adoc[Hibernate ORM with Panache] (all in the same transaction) before returning them to the client as JSON using xref:rest-json.adoc[Jackson or JSON-B]:"
msgstr "如果你使用的是 link:https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/concurrent/CompletionStage.html[`CompletionStage`] 你需要手动传播上下文。你可以通过注入一个 `ThreadContext` 或 `ManagedExecutor` 来实现，它将传播每一个上下文。例如，在这里我们使用 link:vertx.html[Vert.x Web客户端] 来获取星球大战的人的名单，然后使用 link:hibernate-orm-panache.html[Hibernate ORM与Panache] 将他们存储在数据库中（都在同一个事务中），然后使用 link:rest-json.html[Jackson或JSON-B] 将他们作为JSON返回给客户端。"

#. type: delimited block -
#: upstream/_guides/context-propagation.adoc:129
#, no-wrap
msgid ""
"    @Inject ThreadContext threadContext;\n"
"    @Inject ManagedExecutor managedExecutor;\n"
"    @Inject Vertx vertx;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/context-propagation.adoc:156
#, no-wrap
msgid ""
"    @Transactional\n"
"    @GET\n"
"    @Path(\"/people\")\n"
"    public CompletionStage<List<Person>> people() throws SystemException {\n"
"        // Create a REST client to the Star Wars API\n"
"        WebClient client = WebClient.create(vertx,\n"
"                         new WebClientOptions()\n"
"                          .setDefaultHost(\"swapi.dev\")\n"
"                          .setDefaultPort(443)\n"
"                          .setSsl(true));\n"
"        // get the list of Star Wars people, with context capture\n"
"        return threadContext.withContextCapture(client.get(\"/api/people/\").send())\n"
"                .thenApplyAsync(response -> {\n"
"                    JsonObject json = response.bodyAsJsonObject();\n"
"                    List<Person> persons = new ArrayList<>(json.getInteger(\"count\"));\n"
"                    // Store them in the DB\n"
"                    // Note that we're still in the same transaction as the outer method\n"
"                    for (Object element : json.getJsonArray(\"results\")) {\n"
"                        Person person = new Person();\n"
"                        person.name = ((JsonObject) element).getString(\"name\");\n"
"                        person.persist();\n"
"                        persons.add(person);\n"
"                    }\n"
"                    return persons;\n"
"                }, managedExecutor);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/context-propagation.adoc:160
#, fuzzy
msgid "Using `ThreadContext` or `ManagedExecutor` you can wrap most useful functional types and `CompletionStage` in order to get context propagated."
msgstr "使用 `ThreadContext` 或 `ManagedExecutor` ，你可以包装大多数有用的功能类型和 `CompletionStage` ，以便获得上下文的传播。"

#. type: delimited block =
#: upstream/_guides/context-propagation.adoc:164
#, fuzzy
msgid "The injected `ManagedExecutor` uses the Quarkus thread pool."
msgstr "注入的 `ManagedExecutor` ，使用Quarkus线程池。"

#. type: Title ==
#: upstream/_guides/context-propagation.adoc:166
#, fuzzy, no-wrap
msgid "Overriding which contexts are propagated"
msgstr "覆盖哪些上下文被传播的问题"

#. type: Plain text
#: upstream/_guides/context-propagation.adoc:169
#, fuzzy
msgid "By default, all available contexts are propagated. However, you can override this behaviour in several ways."
msgstr "默认情况下，所有可用的上下文都被传播了。然而，你可以通过几种方式覆盖这种行为。"

#. type: Title ===
#: upstream/_guides/context-propagation.adoc:170
#, fuzzy, no-wrap
msgid "Using configuration"
msgstr "使用配置"

#. type: Plain text
#: upstream/_guides/context-propagation.adoc:173
#, fuzzy
msgid "The following configuration properties allow you to specify the default sets of propagated contexts:"
msgstr "下面的配置属性允许你指定传播的上下文的默认集。"

#. type: Table
#: upstream/_guides/context-propagation.adoc:176
#, fuzzy, no-wrap
msgid "Configuration Key"
msgstr "配置键"

#. type: Table
#: upstream/_guides/context-propagation.adoc:176
#: upstream/_guides/context-propagation.adoc:198
#, fuzzy, no-wrap
msgid "Description"
msgstr "描述"

#. type: Table
#: upstream/_guides/context-propagation.adoc:178
#, fuzzy, no-wrap
msgid "Default Value"
msgstr "默认值"

#. type: Table
#: upstream/_guides/context-propagation.adoc:179
#, fuzzy, no-wrap
msgid "`mp.context.ThreadContext.propagated`"
msgstr " `mp.context.ThreadContext.propagated` "

#. type: Table
#: upstream/_guides/context-propagation.adoc:180
#, fuzzy, no-wrap
msgid "The comma-separated set of propagated contexts"
msgstr "以逗号分隔的已传播语境的集合"

#. type: Table
#: upstream/_guides/context-propagation.adoc:182
#, fuzzy, no-wrap
msgid "`Remaining` (all non-explicitly list contexts)"
msgstr " `Remaining` (所有非明确列出的语境)"

#. type: Table
#: upstream/_guides/context-propagation.adoc:183
#, fuzzy, no-wrap
msgid "`mp.context.ThreadContext.cleared`"
msgstr " `mp.context.ThreadContext.cleared` "

#. type: Table
#: upstream/_guides/context-propagation.adoc:184
#, fuzzy, no-wrap
msgid "The comma-separated set of cleared contexts"
msgstr "以逗号分隔的被清除的上下文的集合"

#. type: Table
#: upstream/_guides/context-propagation.adoc:186
#, fuzzy, no-wrap
msgid "`None` (no context), unless neither the propagated nor cleared sets contain `Remaining`, in which case the default is `Remaining` (all non-explicitly listed contexts)"
msgstr " `None` (没有上下文），除非传播的和清除的集合都不包含 ，在这种情况下，默认为 （所有未明确列出的上下文）。 `Remaining` `Remaining` "

#. type: Table
#: upstream/_guides/context-propagation.adoc:187
#, fuzzy, no-wrap
msgid "`mp.context.ThreadContext.unchanged`"
msgstr " `mp.context.ThreadContext.unchanged` "

#. type: Table
#: upstream/_guides/context-propagation.adoc:188
#, fuzzy, no-wrap
msgid "The comma-separated set of unchanged contexts"
msgstr "以逗号分隔的未改变的上下文的集合"

#. type: Table
#: upstream/_guides/context-propagation.adoc:189
#, fuzzy, no-wrap
msgid "`None` (no context)"
msgstr " `None` (无背景)"

#. type: Plain text
#: upstream/_guides/context-propagation.adoc:193
#, fuzzy
msgid "The following contexts are available in Quarkus either out of the box, or depending on whether you include their extensions:"
msgstr "以下是Quarkus中可用的语境，要么是开箱即用，要么取决于你是否包含它们的扩展。"

#. type: Table
#: upstream/_guides/context-propagation.adoc:196
#, fuzzy, no-wrap
msgid "Context Nam"
msgstr "背景 南"

#. type: Table
#: upstream/_guides/context-propagation.adoc:196
#, fuzzy, no-wrap
msgid "Name Constant"
msgstr "名称恒定"

#. type: Table
#: upstream/_guides/context-propagation.adoc:199
#, fuzzy, no-wrap
msgid "`None`"
msgstr " `None` "

#. type: Table
#: upstream/_guides/context-propagation.adoc:200
#, fuzzy, no-wrap
msgid "https://javadoc.io/static/org.eclipse.microprofile.context-propagation/microprofile-context-propagation-api/1.2/org/eclipse/microprofile/context/ThreadContext.html#NONE[`ThreadContext.NONE`]"
msgstr "link:https://javadoc.io/static/org.eclipse.microprofile.context-propagation/microprofile-context-propagation-api/1.2/org/eclipse/microprofile/context/ThreadContext.html#NONE[`ThreadContext.NONE`]"

#. type: Table
#: upstream/_guides/context-propagation.adoc:202
#, fuzzy, no-wrap
msgid "Can be used to specify an empty set of contexts, but setting the value to empty works too"
msgstr "可以用来指定一个空的上下文集，但将值设置为空也可以。"

#. type: Table
#: upstream/_guides/context-propagation.adoc:203
#, fuzzy, no-wrap
msgid "`Remaining`"
msgstr " `Remaining` "

#. type: Table
#: upstream/_guides/context-propagation.adoc:204
#, fuzzy, no-wrap
msgid "https://javadoc.io/static/org.eclipse.microprofile.context-propagation/microprofile-context-propagation-api/1.2/org/eclipse/microprofile/context/ThreadContext.html#ALL_REMAINING[`ThreadContext.ALL_REMAINING`]"
msgstr "link:https://javadoc.io/static/org.eclipse.microprofile.context-propagation/microprofile-context-propagation-api/1.2/org/eclipse/microprofile/context/ThreadContext.html#ALL_REMAINING[`ThreadContext.ALL_REMAINING`]"

#. type: Table
#: upstream/_guides/context-propagation.adoc:206
#, fuzzy, no-wrap
msgid "All the contexts that are not explicitly listed in other sets"
msgstr "所有没有明确列在其他集合中的背景情况"

#. type: Table
#: upstream/_guides/context-propagation.adoc:207
#, fuzzy, no-wrap
msgid "`Transaction`"
msgstr " `Transaction` "

#. type: Table
#: upstream/_guides/context-propagation.adoc:208
#, fuzzy, no-wrap
msgid "https://javadoc.io/static/org.eclipse.microprofile.context-propagation/microprofile-context-propagation-api/1.2/org/eclipse/microprofile/context/ThreadContext.html#TRANSACTION[`ThreadContext.TRANSACTION`]"
msgstr "link:https://javadoc.io/static/org.eclipse.microprofile.context-propagation/microprofile-context-propagation-api/1.2/org/eclipse/microprofile/context/ThreadContext.html#TRANSACTION[`ThreadContext.TRANSACTION`]"

#. type: Table
#: upstream/_guides/context-propagation.adoc:210
#, fuzzy, no-wrap
msgid "The JTA transaction context"
msgstr "JTA的交易环境"

#. type: Table
#: upstream/_guides/context-propagation.adoc:211
#, fuzzy, no-wrap
msgid "`CDI`"
msgstr " `CDI` "

#. type: Table
#: upstream/_guides/context-propagation.adoc:212
#, fuzzy, no-wrap
msgid "https://javadoc.io/static/org.eclipse.microprofile.context-propagation/microprofile-context-propagation-api/1.2/org/eclipse/microprofile/context/ThreadContext.html#CDI[`ThreadContext.CDI`]"
msgstr "link:https://javadoc.io/static/org.eclipse.microprofile.context-propagation/microprofile-context-propagation-api/1.2/org/eclipse/microprofile/context/ThreadContext.html#CDI[`ThreadContext.CDI`]"

#. type: Table
#: upstream/_guides/context-propagation.adoc:214
#, fuzzy, no-wrap
msgid "The CDI (ArC) context"
msgstr "CDI（ArC）的背景"

#. type: Table
#: upstream/_guides/context-propagation.adoc:215
#, fuzzy, no-wrap
msgid "`Servlet`"
msgstr " `Servlet` "

#. type: Table
#: upstream/_guides/context-propagation.adoc:216
#: upstream/_guides/context-propagation.adoc:220
#, fuzzy, no-wrap
msgid "N/A"
msgstr "不适用"

#. type: Table
#: upstream/_guides/context-propagation.adoc:218
#, fuzzy, no-wrap
msgid "The servlet context"
msgstr "小程序上下文"

#. type: Table
#: upstream/_guides/context-propagation.adoc:219
#, fuzzy, no-wrap
msgid "`JAX-RS`"
msgstr " `JAX-RS` "

#. type: Table
#: upstream/_guides/context-propagation.adoc:222
#, fuzzy, no-wrap
msgid "The RESTEasy Classic context"
msgstr "RESTEasy经典的背景"

#. type: Table
#: upstream/_guides/context-propagation.adoc:223
#, fuzzy, no-wrap
msgid "`Application`"
msgstr " `Application` "

#. type: Table
#: upstream/_guides/context-propagation.adoc:224
#, fuzzy, no-wrap
msgid "https://javadoc.io/static/org.eclipse.microprofile.context-propagation/microprofile-context-propagation-api/1.2/org/eclipse/microprofile/context/ThreadContext.html#APPLICATION[`ThreadContext.APPLICATION`]"
msgstr "link:https://javadoc.io/static/org.eclipse.microprofile.context-propagation/microprofile-context-propagation-api/1.2/org/eclipse/microprofile/context/ThreadContext.html#APPLICATION[`ThreadContext.APPLICATION`]"

#. type: Table
#: upstream/_guides/context-propagation.adoc:225
#, fuzzy, no-wrap
msgid "The current `ThreadContextClassLoader`"
msgstr "目前 `ThreadContextClassLoader` "

#. type: Title ===
#: upstream/_guides/context-propagation.adoc:227
#, fuzzy, no-wrap
msgid "Overriding the propagated contexts using annotations"
msgstr "使用注释重写传播的上下文"

#. type: Plain text
#: upstream/_guides/context-propagation.adoc:232
#, fuzzy
msgid "In order for automatic context propagation, such as Mutiny uses, to be overridden in specific methods, you can use the https://javadoc.io/doc/io.smallrye/smallrye-context-propagation-api/latest/io/smallrye/context/api/CurrentThreadContext.html[`@CurrentThreadContext`] annotation:"
msgstr "为了让自动上下文传播，比如Mutiny使用的，在特定方法中被覆盖，你可以使用 link:https://javadoc.io/doc/io.smallrye/smallrye-context-propagation-api/latest/io/smallrye/context/api/CurrentThreadContext.html[`@CurrentThreadContext`] 注解。"

#. type: delimited block -
#: upstream/_guides/context-propagation.adoc:250
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/prices\")\n"
"    @Produces(MediaType.SERVER_SENT_EVENTS)\n"
"    @RestStreamElementType(MediaType.TEXT_PLAIN)\n"
"    // Get rid of all context propagation, since we don't need it here\n"
"    @CurrentThreadContext(unchanged = ThreadContext.ALL_REMAINING)\n"
"    public Publisher<Double> prices() {\n"
"        // get the next three prices from the price stream\n"
"        return Multi.createFrom().publisher(prices)\n"
"                .select().first(3);\n"
"    }\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/context-propagation.adoc:252
#, fuzzy, no-wrap
msgid "Overriding the propagated contexts using CDI injection"
msgstr "使用CDI注入重写传播的上下文"

#. type: Plain text
#: upstream/_guides/context-propagation.adoc:255
#, fuzzy
msgid "You can also inject a custom-built `ThreadContext` using the https://javadoc.io/doc/io.smallrye/smallrye-context-propagation-api/latest/io/smallrye/context/api/ThreadContextConfig.html[`@ThreadContextConfig`] annotation on your injection point:"
msgstr " `ThreadContext` 你也可以在注入点上使用 link:https://javadoc.io/doc/io.smallrye/smallrye-context-propagation-api/latest/io/smallrye/context/api/ThreadContextConfig.html[`@ThreadContextConfig`] 注释在你的注入点上。"

#. type: delimited block -
#: upstream/_guides/context-propagation.adoc:265
#, no-wrap
msgid ""
"    // Get the prices stream\n"
"    @Inject\n"
"    @Channel(\"prices\") Publisher<Double> prices;\n"
"    // Get a ThreadContext that doesn't propagate context\n"
"    @Inject\n"
"    @ThreadContextConfig(unchanged = ThreadContext.ALL_REMAINING)\n"
"    SmallRyeThreadContext threadContext;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/context-propagation.adoc:278
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/prices\")\n"
"    @Produces(MediaType.SERVER_SENT_EVENTS)\n"
"    @RestStreamElementType(MediaType.TEXT_PLAIN)\n"
"    public Publisher<Double> prices() {\n"
"        // Get rid of all context propagation, since we don't need it here\n"
"        try(CleanAutoCloseable ac = SmallRyeThreadContext.withThreadContext(threadContext)){\n"
"            // get the next three prices from the price stream\n"
"            return Multi.createFrom().publisher(prices)\n"
"                    .select().first(3);\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/context-propagation.adoc:281
#, fuzzy
msgid "Likewise, there is a similar way to inject a configured instance of `ManagedExecutor` using the https://javadoc.io/doc/io.smallrye/smallrye-context-propagation-api/latest/io/smallrye/context/api/ManagedExecutorConfig.html[`@ManagedExecutorConfig`] annotation:"
msgstr "同样，也有一种类似的方法来注入一个配置好的 `ManagedExecutor` 的实例，使用 link:https://javadoc.io/doc/io.smallrye/smallrye-context-propagation-api/latest/io/smallrye/context/api/ManagedExecutorConfig.html[`@ManagedExecutorConfig`] 注解注入配置的实例。"

#. type: delimited block -
#: upstream/_guides/context-propagation.adoc:288
#, no-wrap
msgid ""
"    // Custom ManagedExecutor with different async limit, queue and no propagation\n"
"    @Inject\n"
"    @ManagedExecutorConfig(maxAsync = 2, maxQueued = 3, cleared = ThreadContext.ALL_REMAINING)\n"
"    ManagedExecutor configuredCustomExecutor;\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/context-propagation.adoc:290
#, fuzzy, no-wrap
msgid "Sharing configured CDI instances of ManagedExecutor and ThreadContext"
msgstr "共享配置的CDI实例的ManagedExecutor和ThreadContext"

#. type: Plain text
#: upstream/_guides/context-propagation.adoc:295
#, fuzzy
msgid "If you need to inject the same `ManagedExecutor` or `ThreadContext` into several places and share it's capacity, you can name the instance with https://javadoc.io/doc/io.smallrye/smallrye-context-propagation-api/latest/io/smallrye/context/api/NamedInstance.html[`@NamedInstance`] annotation.  `@NamedInstance` is a CDI qualifier and all injections of the same type and name will therefore share the same underlying instance.  If you also need to customize your instance, you can do so using `@ManagedExecutorConfig`/`ThreadContextConfig` annotation on one of its injection points:"
msgstr "如果你需要将同一个 `ManagedExecutor` 或 `ThreadContext` 注入到几个地方并分享它的容量，你可以用注释来命名这个实例。 link:https://javadoc.io/doc/io.smallrye/smallrye-context-propagation-api/latest/io/smallrye/context/api/NamedInstance.html[`@NamedInstance`] 注释。 `@NamedInstance` 是一个CDI限定符，因此所有相同类型和名称的注入将共享同一个基础实例。如果你还需要定制你的实例，你可以在它的一个注入点上使用 `@ManagedExecutorConfig` / `ThreadContextConfig` 注释来实现。"

#. type: delimited block -
#: upstream/_guides/context-propagation.adoc:303
#, no-wrap
msgid ""
"    // Custom configured ManagedExecutor with name\n"
"    @Inject\n"
"    @ManagedExecutorConfig(maxAsync = 2, maxQueued = 3, cleared = ThreadContext.ALL_REMAINING)\n"
"    @NamedInstance(\"myExecutor\")\n"
"    ManagedExecutor sharedConfiguredExecutor;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/context-propagation.adoc:308
#, no-wrap
msgid ""
"    // Since this executor has the same name, it will be the same instance as above\n"
"    @Inject\n"
"    @NamedInstance(\"myExecutor\")\n"
"    ManagedExecutor sameExecutor;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/context-propagation.adoc:314
#, no-wrap
msgid ""
"    // Custom ThreadContext with a name\n"
"    @Inject\n"
"    @ThreadContextConfig(unchanged = ThreadContext.ALL_REMAINING)\n"
"    @NamedInstance(\"myContext\")\n"
"    ThreadContext sharedConfiguredThreadContext;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/context-propagation.adoc:319
#, no-wrap
msgid ""
"    // Given equal value of @NamedInstance, this ThreadContext will be the same as the above one\n"
"    @Inject\n"
"    @NamedInstance(\"myContext\")\n"
"    ThreadContext sameContext;\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/context-propagation.adoc:321
#, fuzzy, no-wrap
msgid "Context Propagation for CDI"
msgstr "CDI的语境传播"

#. type: Plain text
#: upstream/_guides/context-propagation.adoc:325
#, fuzzy
msgid "In terms of CDI, `@RequestScoped`, `@ApplicationScoped` and `@Singleton` beans get propagated and are available in other threads.  `@Dependent` beans as well as any custom scoped beans cannot be automatically propagated via CDI Context Propagation."
msgstr "在CDI方面， `@RequestScoped` 、 `@ApplicationScoped` 和 `@Singleton` Bean会被传播并在其他线程中可用。 `@Dependent` Bean以及任何自定义范围的Bean不能通过CDI上下文传播自动传播。"

#. type: Plain text
#: upstream/_guides/context-propagation.adoc:332
#, fuzzy
msgid "`@ApplicationScoped` and `@Singleton` beans are always active scopes and as such are easy to deal with - context propagation tasks can work with those beans so long as the CDI container is running.  However, `@RequestScoped` beans are a different story. They are only active for a short period of time which can be bound either to HTTP request or some other request/task when manually activated/deactivated.  In this case user must be aware that once the original thread gets to an end of a request, it will terminate the context, calling `@PreDestroy` on those beans and then clearing them from the context.  Subsequent attempts to access those beans from other threads can result in unexpected behaviour.  It is therefore recommended to make sure all tasks using request scoped beans via context propagation are performed in such a manner that they don't outlive the original request duration."
msgstr " `@ApplicationScoped` 和 Bean总是活动的作用域，因此很容易处理--只要CDI容器在运行，上下文传播任务就可以与这些bean一起工作。然而， Bean是一个不同的情况。它们只在很短的时间内处于活动状态，在手动激活/停用时可以与HTTP请求或其他一些请求/任务绑定。在这种情况下，用户必须注意，一旦原始线程的请求结束，它将终止上下文，在这些Bean上调用 ，然后将它们从上下文中清除。随后试图从其他线程访问这些Bean可能会导致意外的行为。因此，我们建议确保所有通过上下文传播使用请求范围Bean的任务都以这样的方式执行，即它们不会超过原始请求的持续时间。 `@Singleton` `@RequestScoped` `@PreDestroy` "

#. type: delimited block =
#: upstream/_guides/context-propagation.adoc:337
msgid "Due to the above described behavior, it is recommended to avoid using `@PreDestroy` on `@RequestScoped` beans when working with Context Propagation in CDI."
msgstr ""
