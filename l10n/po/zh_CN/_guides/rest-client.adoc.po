# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:52+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/rest-client.adoc:6
#, fuzzy, no-wrap
msgid "Using the REST Client"
msgstr "使用REST客户端"

#. type: delimited block =
#: upstream/_guides/rest-client.adoc:13
#, fuzzy
msgid "This guide is about the REST Client compatible with https://resteasy.dev[RESTEasy Classic] which used to be the default JAX-RS implementation until Quarkus 2.8."
msgstr "本指南介绍的是与 link:https://resteasy.dev[RESTEasy Classic] 兼容的REST客户端，在Quarkus 2.8之前，它一直是默认的JAX-RS实现。"

#. type: delimited block =
#: upstream/_guides/rest-client.adoc:17
#, fuzzy
msgid "It is now recommended to use RESTEasy Reactive, which supports equally well traditional blocking workloads and reactive workloads.  For more information about RESTEasy Reactive, please see the xref:rest-client-reactive.adoc[REST Client Reactive guide] and, for the server side, the xref:rest-json.adoc[introductory REST JSON guide] or the more detailed xref:resteasy-reactive.adoc[RESTEasy Reactive guide]."
msgstr "现在建议使用RESTEasy Reactive，它同样支持传统的阻塞式工作负载和反应式工作负载。关于RESTEasy Reactive的更多信息，请参见 link:rest-client-reactive.html[REST客户端Reactive指南] ，对于服务器端，请参见 link:rest-json.html[介绍性的REST JSON指南] 或更详细的 link:resteasy-reactive.html[RESTEasy Reactive指南] 。"

#. type: Plain text
#: upstream/_guides/rest-client.adoc:21
#, fuzzy
msgid "This guide explains how to use the RESTEasy REST Client in order to interact with REST APIs with very little effort."
msgstr "本指南解释了如何使用RESTEasy REST客户端，以便以极少的工作量与REST API进行交互。"

#. type: Plain text
#: upstream/_guides/rest-client.adoc:23
#, fuzzy
msgid "there is another guide if you need to write server xref:rest-json.adoc[JSON REST APIs]."
msgstr "如果你需要编写服务器 link:rest-json.html[JSON REST APIs] ，还有另一份指南。"

#. type: Title ==
#: upstream/_guides/rest-client.adoc:24
#, fuzzy, no-wrap
msgid "Prerequisites"
msgstr "先决条件"

#. type: Title ==
#: upstream/_guides/rest-client.adoc:28
#, fuzzy, no-wrap
msgid "Solution"
msgstr "解决方案"

#. type: Plain text
#: upstream/_guides/rest-client.adoc:32
#, fuzzy
msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can go right to the completed example."
msgstr "我们建议你按照下面几节的说明，一步一步地创建应用程序。然而，你可以直接进入已完成的例子。"

#. type: Plain text
#: upstream/_guides/rest-client.adoc:34
#, fuzzy
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "克隆 Git 仓库。 `git clone {quickstarts-clone-url}` ，或者下载一个 {quickstarts-archive-url}[存档] 。"

#. type: Plain text
#: upstream/_guides/rest-client.adoc:36
#, fuzzy
msgid "The solution is located in the `rest-client-quickstart` {quickstarts-tree-url}/rest-client-quickstart[directory]."
msgstr "该解决方案位于 `rest-client-quickstart` {quickstarts-tree-url}/rest-client-quickstart[目录]中。"

#. type: Title ==
#: upstream/_guides/rest-client.adoc:37
#, fuzzy, no-wrap
msgid "Creating the Maven project"
msgstr "创建Maven项目"

#. type: Plain text
#: upstream/_guides/rest-client.adoc:40
#, fuzzy
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "首先，我们需要一个新的项目。用以下命令创建一个新项目。"

#. type: Plain text
#: upstream/_guides/rest-client.adoc:46
#, fuzzy
msgid "This command generates the Maven project with a REST endpoint and imports:"
msgstr "该命令生成带有REST端点的Maven项目并导入。"

#. type: Plain text
#: upstream/_guides/rest-client.adoc:48
#, fuzzy
msgid "the `resteasy` and `resteasy-jackson` extensions for the REST server support;"
msgstr " `resteasy` 和 `resteasy-jackson` 扩展的REST服务器支持。"

#. type: Plain text
#: upstream/_guides/rest-client.adoc:49
#, fuzzy
msgid "the `rest-client` and `rest-client-jackson` extensions for the REST client support."
msgstr " `rest-client` 和 `rest-client-jackson` 扩展对REST客户端的支持。"

#. type: Plain text
#: upstream/_guides/rest-client.adoc:52
#, fuzzy
msgid "If you already have your Quarkus project configured, you can add the `rest-client` and the `rest-client-jackson` extensions to your project by running the following command in your project base directory:"
msgstr "如果你已经配置了你的Quarkus项目，你可以通过在你的项目基本目录下运行以下命令，将 `rest-client` 和 `rest-client-jackson` 扩展到你的项目中。"

#. type: Plain text
#: upstream/_guides/rest-client.adoc:57
#, fuzzy
msgid "This will add the following to your `pom.xml`:"
msgstr "这将在你的 `pom.xml` 中添加以下内容。"

#. type: Block title
#: upstream/_guides/rest-client.adoc:59 upstream/_guides/rest-client.adoc:638
#, fuzzy, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: delimited block -
#: upstream/_guides/rest-client.adoc:69
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-rest-client</artifactId>\n"
"</dependency>\n"
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-rest-client-jackson</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_guides/rest-client.adoc:72 upstream/_guides/rest-client.adoc:650
#, fuzzy, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: delimited block -
#: upstream/_guides/rest-client.adoc:76
#, no-wrap
msgid ""
"implementation(\"io.quarkus:quarkus-rest-client\")\n"
"implementation(\"io.quarkus:quarkus-rest-client-jackson\")\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/rest-client.adoc:78
#, fuzzy, no-wrap
msgid "Setting up the model"
msgstr "设置模型"

#. type: Plain text
#: upstream/_guides/rest-client.adoc:82
#, fuzzy
msgid "In this guide we will be demonstrating how to consume part of the REST API supplied by the link:https://stage.code.quarkus.io[stage.code.quarkus.io] service.  Our first order of business is to set up the model we will be using, in the form of an `Extension` POJO."
msgstr "在本指南中，我们将演示如何使用由 link:https://stage.code.quarkus.io[stage.code.quarkus.io] 服务提供的部分REST API。我们的首要任务是以 `Extension` POJO的形式来设置我们要使用的模型。"

#. type: Plain text
#: upstream/_guides/rest-client.adoc:84
#, fuzzy
msgid "Create a `src/main/java/org/acme/rest/client/Extension.java` file and set the following content:"
msgstr "创建一个 `src/main/java/org/acme/rest/client/Extension.java` 文件并设置以下内容。"

#. type: delimited block -
#: upstream/_guides/rest-client.adoc:88 upstream/_guides/rest-client.adoc:110
#: upstream/_guides/rest-client.adoc:156 upstream/_guides/rest-client.adoc:256
#: upstream/_guides/rest-client.adoc:291 upstream/_guides/rest-client.adoc:334
#: upstream/_guides/rest-client.adoc:362 upstream/_guides/rest-client.adoc:417
#: upstream/_guides/rest-client.adoc:445 upstream/_guides/rest-client.adoc:510
#: upstream/_guides/rest-client.adoc:544 upstream/_guides/rest-client.adoc:670
#, no-wrap
msgid "package org.acme.rest.client;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client.adoc:90
#, no-wrap
msgid "import java.util.List;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client.adoc:92
#, no-wrap
msgid "public class Extension {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client.adoc:97
#, no-wrap
msgid ""
"    public String id;\n"
"    public String name;\n"
"    public String shortName;\n"
"    public List<String> keywords;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client.adoc:99 upstream/_guides/rest-client.adoc:355
#: upstream/_guides/rest-client.adoc:393 upstream/_guides/rest-client.adoc:731
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/rest-client.adoc:102
#, fuzzy
msgid "The model above is only a subset of the fields provided by the service, but it suffices for the purposes of this guide."
msgstr "上面的模型只是该服务提供的字段的一个子集，但对于本指南的目的来说，它已经足够了。"

#. type: Title ==
#: upstream/_guides/rest-client.adoc:103
#, fuzzy, no-wrap
msgid "Create the interface"
msgstr "创建接口"

#. type: Plain text
#: upstream/_guides/rest-client.adoc:106
#, fuzzy
msgid "Using the RESTEasy REST Client is as simple as creating an interface using the proper JAX-RS and MicroProfile annotations. In our case the interface should be created at `src/main/java/org/acme/rest/client/ExtensionsService.java` and have the following content:"
msgstr "使用RESTEasy REST客户端就像使用适当的JAX-RS和MicroProfile注解来创建一个接口一样简单。在我们的例子中，该接口应在 `src/main/java/org/acme/rest/client/ExtensionsService.java` ，并有以下内容。"

#. type: delimited block -
#: upstream/_guides/rest-client.adoc:113 upstream/_guides/rest-client.adoc:343
#: upstream/_guides/rest-client.adoc:426
#, no-wrap
msgid ""
"import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
"import org.jboss.resteasy.annotations.jaxrs.QueryParam;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client.adoc:117 upstream/_guides/rest-client.adoc:164
#, no-wrap
msgid ""
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import java.util.Set;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client.adoc:121 upstream/_guides/rest-client.adoc:168
#: upstream/_guides/rest-client.adoc:347 upstream/_guides/rest-client.adoc:432
#, no-wrap
msgid ""
"@Path(\"/extensions\")\n"
"@RegisterRestClient\n"
"public interface ExtensionsService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client.adoc:125
#, no-wrap
msgid ""
"    @GET\n"
"    Set<Extension> getById(@QueryParam String id);\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/rest-client.adoc:128
#, fuzzy
msgid "The `getById` method gives our code the ability to get an extension by id from the Code Quarkus API. The client will handle all the networking and marshalling leaving our code clean of such technical details."
msgstr " `getById` 方法使我们的代码能够从Code Quarkus API中通过id获得一个扩展。客户端将处理所有的网络和编组，使我们的代码不受这些技术细节的影响。"

#. type: Plain text
#: upstream/_guides/rest-client.adoc:130
#, fuzzy
msgid "The purpose of the annotations in the code above is the following:"
msgstr "上述代码中的注释的目的如下。"

#. type: Plain text
#: upstream/_guides/rest-client.adoc:133
#, fuzzy
msgid "`@RegisterRestClient` allows Quarkus to know that this interface is meant to be available for CDI injection as a REST Client"
msgstr " `@RegisterRestClient` 允许Quarkus知道这个接口是用来作为REST客户端注入CDI的。"

#. type: Plain text
#: upstream/_guides/rest-client.adoc:134
#, fuzzy
msgid "`@Path`, `@GET` and `@PathParam` are the standard JAX-RS annotations used to define how to access the service"
msgstr " `@Path` , `@GET` 和 `@PathParam` 是标准的 JAX-RS 注解，用于定义如何访问服务。"

#. type: delimited block =
#: upstream/_guides/rest-client.adoc:141
#, fuzzy
msgid "When a JSON extension is installed such as `quarkus-rest-client-jackson` or `quarkus-rest-client-jsonb`, Quarkus will use the `application/json` media type by default for most return values, unless the media type is explicitly set via `@Produces` or `@Consumes` annotations (there are some exceptions for well known types, such as `String` and `File`, which default to `text/plain` and `application/octet-stream` respectively)."
msgstr "当安装了一个JSON扩展，如 `quarkus-rest-client-jackson` 或 `quarkus-rest-client-jsonb` ，Quarkus将对大多数返回值默认使用 `application/json` 媒体类型，除非通过 `@Produces` 或 `@Consumes` 注释明确设置媒体类型（对于众所周知的类型有一些例外，如 `String` 和 `File` ，它们分别默认为 `text/plain` 和 `application/octet-stream` ）。"

#. type: delimited block =
#: upstream/_guides/rest-client.adoc:144
#, fuzzy
msgid "If you don't want JSON by default you can set `quarkus.resteasy-json.default-json=false` and the default will change back to being auto-negotiated. If you set this you will need to add `@Produces(MediaType.APPLICATION_JSON)` and `@Consumes(MediaType.APPLICATION_JSON)` to your endpoints in order to use JSON."
msgstr "如果你默认不需要JSON，你可以设置 `quarkus.resteasy-json.default-json=false` ，默认会变回为自动协商。如果你设置了这个，你将需要在你的端点上添加 `@Produces(MediaType.APPLICATION_JSON)` 和 `@Consumes(MediaType.APPLICATION_JSON)` ，以便使用JSON。"

#. type: delimited block =
#: upstream/_guides/rest-client.adoc:147
#, fuzzy
msgid "If you don't rely on the JSON default, it is heavily recommended to annotate your endpoints with the `@Produces` and `@Consumes` annotations to define precisely the expected content-types.  It will allow to narrow down the number of JAX-RS providers (which can be seen as converters) included in the native executable."
msgstr "如果您不依赖 JSON 默认值，我们强烈建议用 `@Produces` 和 `@Consumes` 注解来注释您的端点，以精确定义预期的内容类型。这将允许缩小本地可执行文件中包含的JAX-RS提供者（可以看作是转换器）的数量。"

#. type: Title ===
#: upstream/_guides/rest-client.adoc:149
#, fuzzy, no-wrap
msgid "Path Parameters"
msgstr "路径参数"

#. type: Plain text
#: upstream/_guides/rest-client.adoc:152
#, fuzzy
msgid "If the GET request requires path parameters you can leverage the `@PathParam(\"parameter-name\")` annotation instead of (or in addition to) the `@QueryParam`. Path and query parameters can be combined, as required, as illustrated in a mock example below."
msgstr "如果GET请求需要路径参数，你可以利用 `@PathParam(\"parameter-name\")` 注解来代替（或补充） `@QueryParam` 。路径和查询参数可以根据需要结合起来，如下面的模拟例子所示。"

#. type: delimited block -
#: upstream/_guides/rest-client.adoc:160
#, no-wrap
msgid ""
"import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
"import org.jboss.resteasy.annotations.jaxrs.PathParam;\n"
"import org.jboss.resteasy.annotations.jaxrs.QueryParam;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client.adoc:173
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/stream/{stream}\")\n"
"    Set<Extension> getByStream(@PathParam String stream, @QueryParam(\"id\") String id);\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/rest-client.adoc:176
#, fuzzy, no-wrap
msgid "Create the configuration"
msgstr "创建配置"

#. type: Plain text
#: upstream/_guides/rest-client.adoc:180
#, fuzzy
msgid "In order to determine the base URL to which REST calls will be made, the REST Client uses configuration from `application.properties`.  The name of the property needs to follow a certain convention which is best displayed in the following code:"
msgstr "为了确定REST调用的基本URL，REST客户端使用来自 `application.properties` 的配置。 属性的名称需要遵循一定的惯例，最好在以下代码中显示。"

#. type: delimited block -
#: upstream/_guides/rest-client.adoc:186
#, no-wrap
msgid ""
"# Your configuration properties\n"
"quarkus.rest-client.\"org.acme.rest.client.ExtensionsService\".url=https://stage.code.quarkus.io/api # // <1>\n"
"quarkus.rest-client.\"org.acme.rest.client.ExtensionsService\".scope=javax.inject.Singleton # // <2>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/rest-client.adoc:190
#, fuzzy
msgid "Having this configuration means that all requests performed using `ExtensionsService` will use `https://stage.code.quarkus.io` as the base URL.  Using the configuration above, calling the `getById` method of `ExtensionsService` with a value of `io.quarkus:quarkus-rest-client` would result in an HTTP GET request being made to `https://stage.code.quarkus.io/api/extensions?id=io.quarkus:quarkus-rest-client`."
msgstr "拥有这种配置意味着所有使用 `ExtensionsService` 进行的请求将使用 `<a href=\"https://stage.code.quarkus.io\" class=\"bare\">https://stage.code.quarkus.io</a>` 作为基本URL。使用上述配置，调用 `ExtensionsService` 的 `getById` 方法，其值为 `io.quarkus:quarkus-rest-client` ，将导致一个HTTP GET请求被发送到 `<a href=\"https://stage.code.quarkus.io/api/extensions?id=io.quarkus:quarkus-rest-client\" class=\"bare\">https://stage.code.quarkus.io/api/extensions?id=io.quarkus:quarkus-rest-client</a>` ."

#. type: Plain text
#: upstream/_guides/rest-client.adoc:192
#, fuzzy
msgid "Having this configuration means that the default scope of `ExtensionsService` will be `@Singleton`. Supported scope values are `@Singleton`, `@Dependent`, `@ApplicationScoped` and `@RequestScoped`. The default scope is `@Dependent`.  The default scope can also be defined on the interface."
msgstr "拥有这种配置意味着 `ExtensionsService` 的默认范围将是 `@Singleton` 。支持的范围值是 `@Singleton` , `@Dependent` , `@ApplicationScoped` 和 `@RequestScoped` 。默认的作用域是 `@Dependent` 。默认的范围也可以在接口上定义。"

#. type: Plain text
#: upstream/_guides/rest-client.adoc:194
#, fuzzy
msgid "Note that `org.acme.rest.client.ExtensionsService` _must_ match the fully qualified name of the `ExtensionsService` interface we created in the previous section."
msgstr "注意， `org.acme.rest.client.ExtensionsService` _必须_ 与我们在上一节中创建的 `ExtensionsService` 接口的完全合格名称相匹配。"

#. type: delimited block =
#: upstream/_guides/rest-client.adoc:198
#, fuzzy
msgid "The standard MicroProfile Rest Client properties notation can also be used to configure the client:"
msgstr "标准的MicroProfile Rest Client属性符号也可以用来配置客户端。"

#. type: delimited block -
#: upstream/_guides/rest-client.adoc:203
#, no-wrap
msgid ""
"org.acme.rest.client.ExtensionsService/mp-rest/url=https://stage.code.quarkus.io/api\n"
"org.acme.rest.client.ExtensionsService/mp-rest/scope=javax.inject.Singleton\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/rest-client.adoc:206
#, fuzzy
msgid "If a property is specified via both the Quarkus notation and the MicroProfile notation, the Quarkus notation takes a precedence."
msgstr "如果一个属性同时通过Quarkus符号和MicroProfile符号指定，Quarkus符号优先。"

#. type: delimited block =
#: upstream/_guides/rest-client.adoc:210
#, fuzzy
msgid "To facilitate the configuration, you can use the `@RegisterRestClient` `configKey` property that allows to use another configuration root than the fully qualified name of your interface."
msgstr "为了方便配置，你可以使用 `@RegisterRestClient` `configKey` 属性，允许使用另一个配置根，而不是你的接口的完全合格的名称。"

#. type: delimited block -
#: upstream/_guides/rest-client.adoc:218
#, no-wrap
msgid ""
"@RegisterRestClient(configKey=\"extensions-api\")\n"
"public interface ExtensionsService {\n"
"    [...]\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client.adoc:225
#, no-wrap
msgid ""
"# Your configuration properties\n"
"quarkus.rest-client.extensions-api.url=https://stage.code.quarkus.io/api\n"
"quarkus.rest-client.extensions-api.scope=javax.inject.Singleton\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/rest-client.adoc:227
#, fuzzy, no-wrap
msgid "Disabling Hostname Verification"
msgstr "禁用主机名验证"

#. type: Plain text
#: upstream/_guides/rest-client.adoc:230
#, fuzzy
msgid "To disable the SSL hostname verification for a specific REST client, add the following property to your configuration:"
msgstr "要禁用特定REST客户端的SSL主机名验证，请在配置中添加以下属性。"

#. type: delimited block -
#: upstream/_guides/rest-client.adoc:234
#, no-wrap
msgid "quarkus.rest-client.extensions-api.hostname-verifier=io.quarkus.restclient.NoopHostnameVerifier\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/rest-client.adoc:236
#, fuzzy, no-wrap
msgid "Disabling SSL verifications"
msgstr "禁用SSL验证"

#. type: Plain text
#: upstream/_guides/rest-client.adoc:239
#, fuzzy
msgid "To disable all SSL verifications, add the following property to your configuration:"
msgstr "要禁用所有SSL验证，请在配置中添加以下属性。"

#. type: delimited block -
#: upstream/_guides/rest-client.adoc:243
#, no-wrap
msgid "quarkus.tls.trust-all=true\n"
msgstr ""

#. type: delimited block =
#: upstream/_guides/rest-client.adoc:247
#, fuzzy
msgid "This setting should not be used in production as it will disable any kind of SSL verification."
msgstr "这个设置不应该在生产中使用，因为它将禁用任何形式的SSL验证。"

#. type: Title ==
#: upstream/_guides/rest-client.adoc:249
#, fuzzy, no-wrap
msgid "Create the JAX-RS resource"
msgstr "创建JAX-RS资源"

#. type: Plain text
#: upstream/_guides/rest-client.adoc:252
#, fuzzy
msgid "Create the `src/main/java/org/acme/rest/client/ExtensionsResource.java` file with the following content:"
msgstr "创建具有以下内容的 `src/main/java/org/acme/rest/client/ExtensionsResource.java` 文件。"

#. type: delimited block -
#: upstream/_guides/rest-client.adoc:259 upstream/_guides/rest-client.adoc:372
#: upstream/_guides/rest-client.adoc:455
#, no-wrap
msgid ""
"import org.eclipse.microprofile.rest.client.inject.RestClient;\n"
"import org.jboss.resteasy.annotations.jaxrs.PathParam;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client.adoc:264
#, no-wrap
msgid ""
"import javax.inject.Inject;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import java.util.Set;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client.adoc:267 upstream/_guides/rest-client.adoc:375
#: upstream/_guides/rest-client.adoc:460
#, no-wrap
msgid ""
"@Path(\"/extension\")\n"
"public class ExtensionsResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client.adoc:271 upstream/_guides/rest-client.adoc:379
#: upstream/_guides/rest-client.adoc:464
#, no-wrap
msgid ""
"    @Inject\n"
"    @RestClient\n"
"    ExtensionsService extensionsService;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client.adoc:278
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/id/{id}\")\n"
"    public Set<Extension> id(@PathParam String id) {\n"
"        return extensionsService.getById(id);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/rest-client.adoc:281
#, fuzzy
msgid "Note that in addition to the standard CDI `@Inject` annotation, we also need to use the MicroProfile `@RestClient` annotation to inject `ExtensionsService`."
msgstr "注意，除了标准的CDI `@Inject` 注释外，我们还需要使用MicroProfile `@RestClient` 注释来注入 `ExtensionsService` 。"

#. type: Title ==
#: upstream/_guides/rest-client.adoc:282
#, fuzzy, no-wrap
msgid "Update the test"
msgstr "更新测试"

#. type: Plain text
#: upstream/_guides/rest-client.adoc:286
#, fuzzy
msgid "We also need to update the functional test to reflect the changes made to the endpoint.  Edit the `src/test/java/org/acme/rest/client/ExtensionsResourceTest.java` file and change the content of the `testExtensionIdEndpoint` method to:"
msgstr "我们还需要更新功能测试，以反映对端点所作的改变。编辑 `src/test/java/org/acme/rest/client/ExtensionsResourceTest.java` 文件，将 `testExtensionIdEndpoint` 方法的内容改为："

#. type: delimited block -
#: upstream/_guides/rest-client.adoc:296
#, no-wrap
msgid ""
"import static io.restassured.RestAssured.given;\n"
"import static org.hamcrest.CoreMatchers.hasItem;\n"
"import static org.hamcrest.CoreMatchers.is;\n"
"import static org.hamcrest.Matchers.greaterThan;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client.adoc:299
#, no-wrap
msgid ""
"import org.acme.rest.client.resources.WireMockExtensionsResource;\n"
"import org.junit.jupiter.api.Test;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client.adoc:302
#, no-wrap
msgid ""
"import io.quarkus.test.common.QuarkusTestResource;\n"
"import io.quarkus.test.junit.QuarkusTest;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client.adoc:306
#, no-wrap
msgid ""
"@QuarkusTest\n"
"@QuarkusTestResource(WireMockExtensionsResource.class)\n"
"public class ExtensionsResourceTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client.adoc:320
#, no-wrap
msgid ""
"    @Test\n"
"    public void testExtensionsIdEndpoint() {\n"
"        given()\n"
"            .when().get(\"/extension/id/io.quarkus:quarkus-rest-client\")\n"
"            .then()\n"
"            .statusCode(200)\n"
"            .body(\"$.size()\", is(1),\n"
"                \"[0].id\", is(\"io.quarkus:quarkus-rest-client\"),\n"
"                \"[0].name\", is(\"REST Client\"),\n"
"                \"[0].keywords.size()\", greaterThan(1),\n"
"                \"[0].keywords\", hasItem(\"rest-client\"));\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/rest-client.adoc:323
#, fuzzy
msgid "The code above uses link:http://rest-assured.io/[REST Assured]'s link:https://github.com/rest-assured/rest-assured/wiki/GettingStarted#jsonpath[json-path] capabilities."
msgstr "上面的代码使用了 link:http://rest-assured.io/[REST Assured] 的 link:https://github.com/rest-assured/rest-assured/wiki/GettingStarted#jsonpath[json-path] 功能。"

#. type: Title ==
#: upstream/_guides/rest-client.adoc:325
#, fuzzy, no-wrap
msgid "Async Support"
msgstr "异步支持"

#. type: Plain text
#: upstream/_guides/rest-client.adoc:330
#, fuzzy
msgid "The rest client supports asynchronous rest calls.  Async support comes in 2 flavors: you can return a `CompletionStage` or a `Uni` (requires the `quarkus-rest-client-mutiny` extension).  Let's see it in action by adding a `getByIdAsync` method in our `ExtensionsService` REST interface. The code should look like:"
msgstr "休息客户端支持异步的休息调用。异步支持有两种味道：你可以返回一个 `CompletionStage` 或一个 `Uni` （需要 `quarkus-rest-client-mutiny` 扩展）。让我们通过在我们的 `ExtensionsService` REST接口中添加一个 `getByIdAsync` 方法来看看它的作用。代码应该是这样的。"

#. type: delimited block -
#: upstream/_guides/rest-client.adoc:337 upstream/_guides/rest-client.adoc:365
#: upstream/_guides/rest-client.adoc:420 upstream/_guides/rest-client.adoc:448
#: upstream/_guides/rest-client.adoc:513
#, no-wrap
msgid ""
"import java.util.Set;\n"
"import java.util.concurrent.CompletionStage;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client.adoc:340 upstream/_guides/rest-client.adoc:423
#: upstream/_guides/rest-client.adoc:516
#, no-wrap
msgid ""
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client.adoc:350 upstream/_guides/rest-client.adoc:530
#: upstream/_guides/rest-client.adoc:580
#, no-wrap
msgid ""
"    @GET\n"
"    Set<Extension> getById(@QueryParam String id);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client.adoc:353 upstream/_guides/rest-client.adoc:533
#: upstream/_guides/rest-client.adoc:583
#, no-wrap
msgid ""
"    @GET\n"
"    CompletionStage<Set<Extension>> getByIdAsync(@QueryParam String id);\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/rest-client.adoc:358
#, fuzzy
msgid "Open the `src/main/java/org/acme/rest/client/ExtensionsResource.java` file and update it with the following content:"
msgstr "打开 `src/main/java/org/acme/rest/client/ExtensionsResource.java` 文件，用以下内容更新它。"

#. type: delimited block -
#: upstream/_guides/rest-client.adoc:369 upstream/_guides/rest-client.adoc:452
#, no-wrap
msgid ""
"import javax.inject.Inject;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client.adoc:385
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/id/{id}\")\n"
"    public Set<Extension> id(@PathParam String id) {\n"
"        return extensionsService.getById(id);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client.adoc:391
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/id-async/{id}\")\n"
"    public CompletionStage<Set<Extension>> idAsync(@PathParam String id) {\n"
"        return extensionsService.getByIdAsync(id);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/rest-client.adoc:396
#, fuzzy
msgid "To test asynchronous methods, add the test method below in `ExtensionsResourceTest`:"
msgstr "为了测试异步方法，在 `ExtensionsResourceTest` ，添加下面的测试方法。"

#. type: delimited block -
#: upstream/_guides/rest-client.adoc:410
#, no-wrap
msgid ""
"@Test\n"
"public void testExtensionIdAsyncEndpoint() {\n"
"    given()\n"
"        .when().get(\"/extension/id-async/io.quarkus:quarkus-rest-client\")\n"
"        .then()\n"
"        .statusCode(200)\n"
"        .body(\"$.size()\", is(1),\n"
"            \"[0].id\", is(\"io.quarkus:quarkus-rest-client\"),\n"
"            \"[0].name\", is(\"REST Client\"),\n"
"            \"[0].keywords.size()\", greaterThan(1),\n"
"            \"[0].keywords\", hasItem(\"rest-client\"));\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/rest-client.adoc:413
#, fuzzy
msgid "The `Uni` version is very similar:"
msgstr " `Uni` 版本非常相似。"

#. type: delimited block -
#: upstream/_guides/rest-client.adoc:428 upstream/_guides/rest-client.adoc:457
#: upstream/_guides/rest-client.adoc:522
#, no-wrap
msgid "import io.smallrye.mutiny.Uni;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client.adoc:434 upstream/_guides/rest-client.adoc:467
#, no-wrap
msgid "    // ...\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client.adoc:438 upstream/_guides/rest-client.adoc:537
#: upstream/_guides/rest-client.adoc:587
#, no-wrap
msgid ""
"    @GET\n"
"    Uni<Set<Extension>> getByIdAsUni(@QueryParam String id);\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/rest-client.adoc:441
#, fuzzy
msgid "The `ExtensionsResource` becomes:"
msgstr " `ExtensionsResource` 变成了。"

#. type: delimited block -
#: upstream/_guides/rest-client.adoc:474
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/id-uni/{id}\")\n"
"    public Uni<Set<Extension>> idMutiny(@PathParam String id) {\n"
"        return extensionsService.getByIdAsUni(id);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Block title
#: upstream/_guides/rest-client.adoc:477
#, fuzzy, no-wrap
msgid "Mutiny"
msgstr "叛变"

#. type: delimited block =
#: upstream/_guides/rest-client.adoc:481
#, fuzzy
msgid "The previous snippet uses Mutiny reactive types.  If you are not familiar with Mutiny, check xref:mutiny-primer.adoc[Mutiny - an intuitive reactive programming library]."
msgstr "前面的片段使用了Mutiny反应式类型。如果你不熟悉Mutiny，请查看 link:mutiny-primer.html[Mutiny - 一个直观的反应式编程库] 。"

#. type: Plain text
#: upstream/_guides/rest-client.adoc:485
#, fuzzy
msgid "When returning a `Uni`, every _subscription_ invokes the remote service.  It means you can re-send the request by re-subscribing on the `Uni`, or use a `retry` as follows:"
msgstr "当返回一个 `Uni` ，每个 _订阅_ 都会调用远程服务。这意味着你可以通过在 `Uni` 上重新订阅来重新发送请求，或者使用如下的 `retry` 。"

#. type: delimited block -
#: upstream/_guides/rest-client.adoc:490
#, no-wrap
msgid "@Inject @RestClient ExtensionsService extensionsService;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client.adoc:492
#, no-wrap
msgid "// ...\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client.adoc:495
#, no-wrap
msgid ""
"extensionsService.getByIdAsUni(id)\n"
"    .onFailure().retry().atMost(10);\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/rest-client.adoc:500
#, fuzzy
msgid "If you use a `CompletionStage`, you would need to call the service's method to retry.  This difference comes from the laziness aspect of Mutiny and its subscription protocol.  More details about this can be found in https://smallrye.io/smallrye-mutiny/#_uni_and_multi[the Mutiny documentation]."
msgstr "如果你使用 `CompletionStage` ，你将需要调用服务的方法来重试。这个区别来自于Mutiny的懒惰方面和它的订阅协议。关于这方面的更多细节可以在 link:https://smallrye.io/smallrye-mutiny/#_uni_and_multi[Mutiny文档] 中找到。"

#. type: Title ==
#: upstream/_guides/rest-client.adoc:501
#, fuzzy, no-wrap
msgid "Custom headers support"
msgstr "支持自定义页眉"

#. type: Plain text
#: upstream/_guides/rest-client.adoc:504
#, fuzzy
msgid "The MicroProfile REST client allows amending request headers by registering a `ClientHeadersFactory` with the `@RegisterClientHeaders` annotation."
msgstr "MicroProfile REST客户端允许通过在 `@RegisterClientHeaders` 注释中注册一个 `ClientHeadersFactory` 来修改请求头。"

#. type: Plain text
#: upstream/_guides/rest-client.adoc:506
#, fuzzy
msgid "Let's see it in action by adding a `@RegisterClientHeaders` annotation pointing to a `RequestUUIDHeaderFactory` class in our `ExtensionsService` REST interface:"
msgstr "让我们通过在我们的 `ExtensionsService` REST接口中添加一个指向 `RequestUUIDHeaderFactory` 类的 `@RegisterClientHeaders` 注解来看看它的作用。"

#. type: delimited block -
#: upstream/_guides/rest-client.adoc:520
#, no-wrap
msgid ""
"import org.eclipse.microprofile.rest.client.annotation.RegisterClientHeaders;\n"
"import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
"import org.jboss.resteasy.annotations.jaxrs.QueryParam;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client.adoc:527
#, no-wrap
msgid ""
"@Path(\"/extensions\")\n"
"@RegisterRestClient\n"
"@RegisterClientHeaders(RequestUUIDHeaderFactory.class)\n"
"public interface ExtensionsService {\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/rest-client.adoc:540
#, fuzzy
msgid "And the `RequestUUIDHeaderFactory` would look like:"
msgstr "而 `RequestUUIDHeaderFactory` ，看起来就像。"

#. type: delimited block -
#: upstream/_guides/rest-client.adoc:546
#, no-wrap
msgid "import org.eclipse.microprofile.rest.client.ext.ClientHeadersFactory;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client.adoc:551
#, no-wrap
msgid ""
"import javax.enterprise.context.ApplicationScoped;\n"
"import javax.ws.rs.core.MultivaluedHashMap;\n"
"import javax.ws.rs.core.MultivaluedMap;\n"
"import java.util.UUID;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client.adoc:554
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class RequestUUIDHeaderFactory implements ClientHeadersFactory {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client.adoc:562
#, no-wrap
msgid ""
"    @Override\n"
"    public MultivaluedMap<String, String> update(MultivaluedMap<String, String> incomingHeaders, MultivaluedMap<String, String> clientOutgoingHeaders) {\n"
"        MultivaluedMap<String, String> result = new MultivaluedHashMap<>();\n"
"        result.add(\"X-request-uuid\", UUID.randomUUID().toString());\n"
"        return result;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/rest-client.adoc:566
#, fuzzy
msgid "As you see in the example above, you can make your `ClientHeadersFactory` implementation a CDI bean by annotating it with a scope-defining annotation, such as `@Singleton`, `@ApplicationScoped`, etc."
msgstr "正如你在上面的例子中所看到的，你可以通过给你的 `ClientHeadersFactory` 实现加上范围定义注解来使它成为CDI Bean，例如 `@Singleton` , `@ApplicationScoped` , 等等。"

#. type: Title ===
#: upstream/_guides/rest-client.adoc:568
#, fuzzy, no-wrap
msgid "Default header factory"
msgstr "默认的页眉工厂"

#. type: Plain text
#: upstream/_guides/rest-client.adoc:571
#, fuzzy
msgid "You can also use `@RegisterClientHeaders` annotation without any custom factory specified. In that case the `DefaultClientHeadersFactoryImpl` factory will be used and all headers listed in `org.eclipse.microprofile.rest.client.propagateHeaders` configuration property will be amended. Individual header names are comma-separated."
msgstr "你也可以使用 `@RegisterClientHeaders` 注释而不指定任何自定义工厂。在这种情况下， `DefaultClientHeadersFactoryImpl` 工厂将被使用， `org.eclipse.microprofile.rest.client.propagateHeaders` 配置属性中列出的所有标头将被修正。单个头文件的名称是以逗号分隔的。"

#. type: delimited block -
#: upstream/_guides/rest-client.adoc:577
#, no-wrap
msgid ""
"@Path(\"/extensions\")\n"
"@RegisterRestClient\n"
"@RegisterClientHeaders\n"
"public interface ExtensionsService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client.adoc:593
#, no-wrap
msgid "org.eclipse.microprofile.rest.client.propagateHeaders=Authorization,Proxy-Authorization\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/rest-client.adoc:595
#, fuzzy, no-wrap
msgid "Package and run the application"
msgstr "包装和运行应用程序"

#. type: Plain text
#: upstream/_guides/rest-client.adoc:598
#, fuzzy
msgid "Run the application with:"
msgstr "用以下方式运行应用程序。"

#. type: Plain text
#: upstream/_guides/rest-client.adoc:602
#, fuzzy
msgid "Open your browser to http://localhost:8080/extension/id/io.quarkus:quarkus-rest-client."
msgstr "打开你的浏览器， http://localhost:8080/extension/id/io.quarkus:quarkus-rest-client "

#. type: Plain text
#: upstream/_guides/rest-client.adoc:604
#, fuzzy
msgid "You should see a JSON object containing some basic information about the REST Client extension."
msgstr "你应该看到一个JSON对象，包含一些关于REST客户端扩展的基本信息。"

#. type: Plain text
#: upstream/_guides/rest-client.adoc:606
#, fuzzy
msgid "As usual, the application can be packaged using:"
msgstr "像往常一样，该应用程序可以用以下方式打包。"

#. type: Plain text
#: upstream/_guides/rest-client.adoc:610
#, fuzzy
msgid "And executed with `java -jar target/quarkus-app/quarkus-run.jar`."
msgstr "并以 `java -jar target/quarkus-app/quarkus-run.jar` 。"

#. type: Plain text
#: upstream/_guides/rest-client.adoc:612
#, fuzzy
msgid "You can also generate the native executable with:"
msgstr "你也可以用以下方法生成本地可执行文件。"

#. type: Title ==
#: upstream/_guides/rest-client.adoc:615
#, fuzzy, no-wrap
msgid "REST Client and RESTEasy interactions"
msgstr "REST客户端和RESTEasy的互动"

#. type: Plain text
#: upstream/_guides/rest-client.adoc:619
#, fuzzy
msgid "In Quarkus, the REST Client extension and xref:rest-json.adoc[the RESTEasy extension] share the same infrastructure.  One important consequence of this consideration is that they share the same list of providers (in the JAX-RS meaning of the word)."
msgstr "在Quarkus中，REST客户端扩展和 link:rest-json.html[RESTEasy扩展] 共享相同的基础设施。这种考虑的一个重要结果是，它们共享相同的提供者列表（按照JAX-RS这个词的含义）。"

#. type: Plain text
#: upstream/_guides/rest-client.adoc:622
#, fuzzy
msgid "For instance, if you declare a `WriterInterceptor`, it will by default intercept both the servers calls and the client calls, which might not be the desired behavior."
msgstr "例如，如果你声明一个 `WriterInterceptor` ，它将默认拦截服务器和客户端的调用，这可能不是你想要的行为。"

#. type: Plain text
#: upstream/_guides/rest-client.adoc:624
#, fuzzy
msgid "However, you can change this default behavior and constrain a provider to:"
msgstr "然而，你可以改变这种默认行为，并将一个提供者约束为。"

#. type: Plain text
#: upstream/_guides/rest-client.adoc:626
#, fuzzy
msgid "only consider *client* calls by adding the `@ConstrainedTo(RuntimeType.CLIENT)` annotation to your provider;"
msgstr "通过向你的提供者添加 `@ConstrainedTo(RuntimeType.CLIENT)` 注释，只考虑 *客户端* 调用。"

#. type: Plain text
#: upstream/_guides/rest-client.adoc:627
#, fuzzy
msgid "only consider *server* calls by adding the `@ConstrainedTo(RuntimeType.SERVER)` annotation to your provider."
msgstr "通过向你的提供者添加 `@ConstrainedTo(RuntimeType.SERVER)` 注释，只考虑 *服务器* 调用。"

#. type: Title ==
#: upstream/_guides/rest-client.adoc:629
#, fuzzy, no-wrap
msgid "Using a Mock HTTP Server for tests"
msgstr "使用模拟HTTP服务器进行测试"

#. type: Plain text
#: upstream/_guides/rest-client.adoc:634
#, fuzzy
msgid "Setting up a mock HTTP server, against which tests are run, is a common testing pattern.  Examples of such servers are link:http://wiremock.org/[Wiremock] and link:https://docs.hoverfly.io/projects/hoverfly-java/en/latest/index.html[Hoverfly].  In this section we'll demonstrate how Wiremock can be leveraged for testing the `ExtensionsService` which was developed above."
msgstr "设置一个模拟的HTTP服务器，针对它来运行测试，是一种常见的测试模式。这种服务器的例子有 link:http://wiremock.org/[Wiremock] 和 link:https://docs.hoverfly.io/projects/hoverfly-java/en/latest/index.html[Hoverfly] 。在本节中，我们将演示如何利用Wiremock来测试上述开发的 `ExtensionsService` 。"

#. type: Plain text
#: upstream/_guides/rest-client.adoc:636
#, fuzzy
msgid "First of all, Wiremock needs to be added as a test dependency. For a Maven project that would happen like so:"
msgstr "首先，Wiremock需要被添加为一个测试依赖项。对于一个Maven项目来说，应该这样做。"

#. type: delimited block -
#: upstream/_guides/rest-client.adoc:646
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>com.github.tomakehurst</groupId>\n"
"    <artifactId>wiremock-jre8</artifactId>\n"
"    <scope>test</scope>\n"
"    <version>${wiremock.version}</version> <1>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/rest-client.adoc:648 upstream/_guides/rest-client.adoc:655
#, fuzzy
msgid "Use a proper Wiremock version. All available versions can be found link:https://search.maven.org/artifact/com.github.tomakehurst/wiremock-jre8[here]."
msgstr "使用适当的Wiremock版本。所有可用的版本都可以 link:https://search.maven.org/artifact/com.github.tomakehurst/wiremock-jre8[在这里] 找到。"

#. type: delimited block -
#: upstream/_guides/rest-client.adoc:653
#, no-wrap
msgid "testImplementation(\"com.github.tomakehurst:wiremock-jre8:$wiremockVersion\") <1>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/rest-client.adoc:659
#, fuzzy
msgid "In Quarkus tests when some service needs to be started before the Quarkus tests are ran, we utilize the `@io.quarkus.test.common.QuarkusTestResource` annotation to specify a `io.quarkus.test.common.QuarkusTestResourceLifecycleManager` which can start the service and supply configuration values that Quarkus will use."
msgstr "在Quarkus测试中，当一些服务需要在Quarkus测试运行前启动时，我们利用 `@io.quarkus.test.common.QuarkusTestResource` 注释来指定一个 `io.quarkus.test.common.QuarkusTestResourceLifecycleManager` ，它可以启动服务并提供Quarkus将使用的配置值。"

#. type: delimited block =
#: upstream/_guides/rest-client.adoc:663
#, fuzzy
msgid "For more details about `@QuarkusTestResource` refer to xref:getting-started-testing.adoc#quarkus-test-resource[this part of the documentation]."
msgstr "关于 `@QuarkusTestResource` 的更多细节，请参考 link:getting-started-testing.html#quarkus-test-resource[这部分文件] 。"

#. type: Plain text
#: upstream/_guides/rest-client.adoc:666
#, fuzzy
msgid "Let's create an implementation of `QuarkusTestResourceLifecycleManager` called `WiremockExtensions` like so:"
msgstr "让我们像这样创建一个名为 `WiremockExtensions` 的 `QuarkusTestResourceLifecycleManager` 的实现。"

#. type: delimited block -
#: upstream/_guides/rest-client.adoc:673
#, no-wrap
msgid ""
"import java.util.Collections;\n"
"import java.util.Map;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client.adoc:676
#, no-wrap
msgid ""
"import com.github.tomakehurst.wiremock.WireMockServer;\n"
"import io.quarkus.test.common.QuarkusTestResourceLifecycleManager;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client.adoc:678
#, no-wrap
msgid "import static com.github.tomakehurst.wiremock.client.WireMock.*; // <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client.adoc:680
#, no-wrap
msgid "public class WireMockExtensions implements QuarkusTestResourceLifecycleManager {  // <2>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client.adoc:682
#, no-wrap
msgid "    private WireMockServer wireMockServer;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client.adoc:687
#, no-wrap
msgid ""
"    @Override\n"
"    public Map<String, String> start() {\n"
"        wireMockServer = new WireMockServer();\n"
"        wireMockServer.start(); // <3>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client.adoc:697
#, no-wrap
msgid ""
"        wireMockServer.stubFor(get(urlEqualTo(\"/extensions?id=io.quarkus:quarkus-rest-client\"))   // <4>\n"
"                .willReturn(aResponse()\n"
"                        .withHeader(\"Content-Type\", \"application/json\")\n"
"                        .withBody(\n"
"                            \"[{\" +\n"
"                            \"\\\"id\\\": \\\"io.quarkus:quarkus-rest-client\\\",\" +\n"
"                            \"\\\"name\\\": \\\"REST Client\\\"\" +\n"
"                            \"}]\"\n"
"                        )));\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client.adoc:699
#, no-wrap
msgid "        wireMockServer.stubFor(get(urlMatching(\".*\")).atPriority(10).willReturn(aResponse().proxiedFrom(\"https://stage.code.quarkus.io/api\")));   // <5>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client.adoc:702
#, no-wrap
msgid ""
"        return Collections.singletonMap(\"quarkus.rest-client.\\\"org.acme.rest.client.ExtensionsService\\\".url\", wireMockServer.baseUrl()); // <6>\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client.adoc:710
#, no-wrap
msgid ""
"    @Override\n"
"    public void stop() {\n"
"        if (null != wireMockServer) {\n"
"            wireMockServer.stop();  // <7>\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/rest-client.adoc:713
#, fuzzy
msgid "Statically importing the methods in the Wiremock package makes it easier to read the test."
msgstr "静态导入Wiremock包中的方法，使得阅读测试更容易。"

#. type: Plain text
#: upstream/_guides/rest-client.adoc:714
#, fuzzy
msgid "The `start` method is invoked by Quarkus before any test is run and returns a `Map` of configuration properties that apply during the test execution."
msgstr " `start` 方法在任何测试运行之前被Quarkus调用，并返回在测试执行期间适用的配置属性 `Map` 。"

#. type: Plain text
#: upstream/_guides/rest-client.adoc:715
#, fuzzy
msgid "Launch Wiremock."
msgstr "启动Wiremock。"

#. type: Plain text
#: upstream/_guides/rest-client.adoc:716
#, fuzzy
msgid "Configure Wiremock to stub the calls to `/extensions?id=io.quarkus:quarkus-rest-client` by returning a specific canned response."
msgstr "配置Wiremock，通过返回一个特定的预制响应来存留对 `/extensions?id=io.quarkus:quarkus-rest-client` 的调用。"

#. type: Plain text
#: upstream/_guides/rest-client.adoc:717
#, fuzzy
msgid "All HTTP calls that have not been stubbed are handled by calling the real service. This is done for demonstration purposes, as it is not something that would usually happen in a real test."
msgstr "所有没有被存根的HTTP调用都通过调用真正的服务来处理。这样做是为了演示，因为它通常不会发生在实际测试中。"

#. type: Plain text
#: upstream/_guides/rest-client.adoc:719
#, fuzzy
msgid "As the `start` method returns configuration that applies for tests, we set the rest-client property that controls the base URL which is used by the implementation of `ExtensionsService` to the base URL where Wiremock is listening for incoming requests."
msgstr "由于 `start` 方法返回适用于测试的配置，我们将控制基本URL的rest-client属性设置为Wiremock监听传入请求的基本URL，该属性被 `ExtensionsService` 的实现所使用。"

#. type: Plain text
#: upstream/_guides/rest-client.adoc:720
#, fuzzy
msgid "When all tests have finished, shutdown Wiremock."
msgstr "当所有测试完成后，关闭Wiremock。"

#. type: Plain text
#: upstream/_guides/rest-client.adoc:723
#, fuzzy
msgid "The `ExtensionsResourceTest` test class needs to be annotated like so:"
msgstr " `ExtensionsResourceTest` 测试类需要被这样注解。"

#. type: delimited block -
#: upstream/_guides/rest-client.adoc:729
#, no-wrap
msgid ""
"@QuarkusTest\n"
"@QuarkusTestResource(WireMockExtensions.class)\n"
"public class ExtensionsResourceTest {\n"
msgstr ""

#. type: delimited block =
#: upstream/_guides/rest-client.adoc:736
#, fuzzy
msgid "`@QuarkusTestResource` applies to all tests, not just `ExtensionsResourceTest`."
msgstr " `@QuarkusTestResource` 适用于所有测试，而不仅仅是 。 `ExtensionsResourceTest` "

#. type: Title ==
#: upstream/_guides/rest-client.adoc:738
#, fuzzy, no-wrap
msgid "Further reading"
msgstr "进一步阅读"

#. type: Plain text
#: upstream/_guides/rest-client.adoc:740
msgid "link:https://download.eclipse.org/microprofile/microprofile-rest-client-2.0/microprofile-rest-client-spec-2.0.html[MicroProfile Rest Client specification]"
msgstr ""
