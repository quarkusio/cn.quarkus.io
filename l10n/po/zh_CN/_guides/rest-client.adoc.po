# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-10-25 13:13+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: _guides/rest-client.adoc
#, fuzzy
msgid "Using the REST Client"
msgstr "使用 REST 客户端"

#: _guides/rest-client.adoc
#, fuzzy
msgid ""
"This guide explains how to use the REST Client in order to interact with REST APIs.\n"
"REST Client is the REST Client implementation compatible with Quarkus REST (formerly RESTEasy Reactive)."
msgstr "本指南介绍如何使用 REST Client 与 REST API 交互。REST Client 是与 Quarkus REST（前身为 RESTEasy Reactive）兼容的 REST 客户端实现。"

#: _guides/rest-client.adoc
#, fuzzy
msgid ""
"If your application uses a client and exposes REST endpoints, please use xref:rest.adoc[Quarkus REST]\n"
"for the server part."
msgstr "如果您的应用程序使用客户端并公开 REST 端点，请在服务器部分使用 xref:rest.adoc[Quarkus REST] 。"

#. type: Title ==
#: _guides/rest-client.adoc
#, no-wrap
msgid "Prerequisites"
msgstr "先决条件"

#. type: Title ==
#: _guides/rest-client.adoc
#, no-wrap
msgid "Solution"
msgstr "解决方案"

#: _guides/rest-client.adoc
msgid ""
"We recommend that you follow the instructions in the next sections and create the application step by step.\n"
"However, you can go right to the completed example."
msgstr "我们建议您按照下一节的说明逐步创建应用程序。然而，您可以直接转到已完成的示例。"

#. type: Plain text
#: _guides/rest-client.adoc
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "克隆 Git 仓库: `git clone {quickstarts-clone-url}` ，或下载一个 {quickstarts-archive-url}[存档] 。"

#. type: Plain text
#: _guides/rest-client.adoc
#, fuzzy
msgid "The solution is located in the `rest-client-quickstart` link:{quickstarts-tree-url}/rest-client-quickstart[directory]."
msgstr "该解决方案位于 `rest-client-quickstart` {quickstarts-tree-url}/rest-client-quickstart[目录]中。"

#. type: Title ==
#: _guides/rest-client.adoc
#, no-wrap
msgid "Creating the Maven project"
msgstr "创建Maven项目"

#. type: Plain text
#: _guides/rest-client.adoc
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "首先，我们需要一个新的工程项目。用以下命令创建一个新项目："

#. type: Plain text
#: _guides/rest-client.adoc
#, fuzzy
msgid "This command generates the Maven project with a REST endpoint and imports:"
msgstr "该命令生成带有REST端点的Maven项目并导入。"

#: _guides/rest-client.adoc
#, fuzzy
msgid "the `rest-jackson` extension for the REST server support. Use `rest` instead if you do not wish to use Jackson;"
msgstr "`rest-jackson` 扩展来支持 REST 服务器。如果不想使用 Jackson，请使用 `rest` ；"

#: _guides/rest-client.adoc
#, fuzzy
msgid "the `rest-client-jackson` extension for the REST client support. Use `rest-client` instead if you do not wish to use Jackson"
msgstr "`rest-client-jackson` 扩展来支持 REST 客户端。如果不想使用 Jackson，请使用 `rest-client` 。"

#: _guides/rest-client.adoc
#, fuzzy
msgid ""
"If you already have your Quarkus project configured, you can add the `rest-client-jackson` extension\n"
"to your project by running the following command in your project base directory:"
msgstr "如果已经配置了 Quarkus 项目，可以在项目基本目录下运行以下命令，将 `rest-client-jackson` 扩展添加到项目中："

#: _guides/rest-client.adoc
msgid "This will add the following to your build file:"
msgstr "这会在你的构建文件中添加以下内容:"

#. type: Block title
#: _guides/rest-client.adoc
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: Block title
#: _guides/rest-client.adoc
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: Title ==
#: _guides/rest-client.adoc
#, fuzzy, no-wrap
msgid "Setting up the model"
msgstr "设置模型"

#: _guides/rest-client.adoc
#, fuzzy
msgid ""
"In this guide we will be demonstrating how to consume part of the REST API supplied by the link:https://stage.code.quarkus.io[stage.code.quarkus.io] service.\n"
"Our first order of business is to set up the model we will be using, in the form of a `Extension` POJO."
msgstr "在本指南中，我们将演示如何使用 link:https://stage.code.quarkus.io[stage.code.quarkus.io] 服务提供的部分 REST API。我们的首要任务是以 `Extension` POJO 的形式设置我们将要使用的模型。"

#. type: Plain text
#: _guides/rest-client.adoc
#, fuzzy
msgid "Create a `src/main/java/org/acme/rest/client/Extension.java` file and set the following content:"
msgstr "创建一个 `src/main/java/org/acme/rest/client/Extension.java` 文件并设置以下内容。"

#. type: Plain text
#: _guides/rest-client.adoc
#, fuzzy
msgid "The model above is only a subset of the fields provided by the service, but it suffices for the purposes of this guide."
msgstr "上面的模型只是该服务提供的字段的一个子集，但对于本指南的目的来说已经足够了。"

#. type: Title ==
#: _guides/rest-client.adoc
#, fuzzy, no-wrap
msgid "Create the interface"
msgstr "创建接口"

#: _guides/rest-client.adoc
#, fuzzy
msgid "Using the REST Client is as simple as creating an interface using the proper Jakarta REST and MicroProfile annotations. In our case the interface should be created at `src/main/java/org/acme/rest/client/ExtensionsService.java` and have the following content:"
msgstr "使用 REST 客户端非常简单，只需使用适当的 Jakarta REST 和 MicroProfile 注释创建一个接口即可。在我们的例子中，接口应在 `src/main/java/org/acme/rest/client/ExtensionsService.java` 上创建，并包含以下内容："

#. type: Plain text
#: _guides/rest-client.adoc
#, fuzzy
msgid "The `getById` method gives our code the ability to get an extension by id from the Code Quarkus API. The client will handle all the networking and marshalling leaving our code clean of such technical details."
msgstr " `getById` 方法使我们的代码能够从Code Quarkus API中通过id获得一个扩展。客户端将处理所有的网络和编组，使我们的代码不受这些技术细节的影响。"

#. type: Plain text
#: _guides/rest-client.adoc
#, fuzzy
msgid "The purpose of the annotations in the code above is the following:"
msgstr "上述代码中的注释的目的如下。"

#: _guides/rest-client.adoc
#, fuzzy
msgid ""
"`@RegisterRestClient` allows Quarkus to know that this interface is meant to be available for\n"
"CDI injection as a REST Client"
msgstr "`@RegisterRestClient` 允许 Quarkus 知道该接口将作为 REST 客户端用于 CDI 注入"

#. type: Plain text
#: _guides/rest-client.adoc
#, fuzzy
msgid "`@Path`, `@GET` and `@QueryParam` are the standard Jakarta REST annotations used to define how to access the service"
msgstr " `@Path` , `@GET` 和 `@PathParam` 是标准的 JAX-RS 注解，用于定义如何访问服务。"

#: _guides/rest-client.adoc
#, fuzzy
msgid ""
"When the `quarkus-rest-client-jackson` extension is installed, Quarkus will use the `application/json` media type\n"
"by default for most return values, unless the media type is explicitly set via `@Produces` or `@Consumes` annotations."
msgstr "安装 `quarkus-rest-client-jackson` 扩展后，除非通过 `@Produces` 或 `@Consumes` 注释明确设置媒体类型，否则 Quarkus 将默认对大多数返回值使用 `application/json` 媒体类型。"

#: _guides/rest-client.adoc
#, fuzzy
msgid ""
"If you don't rely on the JSON default, it is heavily recommended to annotate your endpoints with the `@Produces` and `@Consumes` annotations to define precisely the expected content-types.\n"
"It will allow to narrow down the number of Jakarta REST providers (which can be seen as converters) included in the native executable."
msgstr "如果不依赖 JSON 默认值，强烈建议使用 `@Produces` 和 `@Consumes` 注释来注解端点，以精确定义预期的内容类型。这样可以减少本地可执行文件中包含的 Jakarta REST 提供程序（可视为转换器）的数量。"

#: _guides/rest-client.adoc
#, fuzzy
msgid ""
"The `getById` method above is a blocking call. It should not be invoked on the event loop.\n"
"The <<async-support>> section describes how to make non-blocking calls."
msgstr "上述 `getById` 方法是一个阻塞调用。不应在事件循环中调用。 <<async-support>> 部分将介绍如何进行非阻塞调用。"

#: _guides/rest-client.adoc
#, fuzzy
msgid "Query Parameters"
msgstr "查询参数"

#: _guides/rest-client.adoc
#, fuzzy
msgid ""
"The easiest way to specify a query parameter is to annotate a client method parameter with the `@QueryParam` or the `@RestQuery`.\n"
"The `@RestQuery` is equivalent of the `@QueryParam`, but with optional name. Additionally, it can be also used to pass query parameters\n"
"as a `Map`, which is convenient if parameters are not known in advance."
msgstr "指定查询参数的最简单方法是用 `@QueryParam` 或 `@RestQuery` 来注解客户端方法参数。 `@RestQuery` 相当于 `@QueryParam` ，但名称可选。此外，它还可用于以 `Map` 的形式传递查询参数，这在事先不知道参数的情况下非常方便。"

#: _guides/rest-client.adoc
#, fuzzy
msgid "Request query will include parameter with key `name`"
msgstr "请求查询将包含带关键字的参数 `name`"

#: _guides/rest-client.adoc
#, fuzzy
msgid "Each `Map` entry represents exactly one query parameter"
msgstr "每个 `Map` 条目正好代表一个查询参数"

#: _guides/rest-client.adoc
#, fuzzy
msgid "`MultivaluedMap` allows you to send array values"
msgstr "`MultivaluedMap` 允许您发送数组值"

#: _guides/rest-client.adoc
#, fuzzy
msgid "Using @ClientQueryParam"
msgstr "使用 @ClientQueryParam"

#: _guides/rest-client.adoc
#, fuzzy
msgid ""
"Another way to add query parameters to a request is to use `@io.quarkus.rest.client.reactive.ClientQueryParam` on either the REST client interface or a specific method of the interface.\n"
"The annotation can specify the query parameter name while the value can either be a constant, a configuration property or it can be determined by invoking a method."
msgstr "为请求添加查询参数的另一种方法是在 REST 客户端接口或接口的特定方法上使用 `@io.quarkus.rest.client.reactive.ClientQueryParam` 。注解可以指定查询参数名称，而值可以是常量、配置属性，也可以通过调用方法来确定。"

#: _guides/rest-client.adoc
#, fuzzy
msgid "The following example shows the various possible usages:"
msgstr "下面的示例展示了各种可能的用法："

#: _guides/rest-client.adoc
#, fuzzy
msgid ""
"By placing `@ClientQueryParam` on the interface, we ensure that `my-param` will be added to all requests of the client.\n"
"Because we used the `${...}` syntax, the actual value of the parameter will be obtained using the `my.property-value` configuration property."
msgstr "通过将 `@ClientQueryParam` 放在接口上，我们确保 `my-param` 将被添加到客户端的所有请求中。由于我们使用了 `${…​}` 语法，参数的实际值将通过 `my.property-value` 配置属性获取。"

#: _guides/rest-client.adoc
#, fuzzy
msgid "When `getWithOtherParam` is called, in addition to the `my-param` query parameter, `some-other-param` with the value of `other` will also be added."
msgstr "调用 `getWithOtherParam` 时，除了 `my-param` 查询参数外，还将添加 `some-other-param` 和 `other` 值。"

#: _guides/rest-client.adoc
#, fuzzy
msgid "when `getFromMethod` is called, in addition to the `my-param` query parameter, `param-from-method` with the value of `test` (because that's what the `withParam` method returns when invoked with `param-from-method`) will also be added."
msgstr "调用 `getFromMethod` 时，除了 `my-param` 查询参数外，还将添加带有 `test` 值的 `param-from-method` （因为 `withParam` 方法在调用 `param-from-method` 时返回的就是 值）。"

#: _guides/rest-client.adoc
#, fuzzy
msgid ""
"Note that if an interface method contains an argument annotated with `@QueryParam`, that argument will take\n"
"priority over anything specified in any `@ClientQueryParam` annotation."
msgstr "请注意，如果接口方法中包含一个注释为 `@QueryParam` 的参数，该参数的优先级将高于任何 `@ClientQueryParam` 注释中指定的参数。"

#: _guides/rest-client.adoc
#, fuzzy
msgid "More information about this annotation can be found on the javadoc of link:https://javadoc.io/doc/io.quarkus/quarkus-rest-client/latest/io/quarkus/rest/client/reactive/ClientQueryParam.html[`@ClientQueryParam`]."
msgstr "有关此注解的更多信息，请参见 link:https://javadoc.io/doc/io.quarkus/quarkus-rest-client/latest/io/quarkus/rest/client/reactive/ClientQueryParam.html[@ClientQueryParam] ."

#: _guides/rest-client.adoc
#, fuzzy
msgid "Form Parameters"
msgstr "表格参数"

#: _guides/rest-client.adoc
#, fuzzy
msgid "Form parameters can be specified using `@RestForm` (or `@FormParam`) annotations:"
msgstr "可使用 `@RestForm` （或 `@FormParam` ）注释指定表单参数："

#: _guides/rest-client.adoc
#, fuzzy
msgid "Using @ClientFormParam"
msgstr "使用 @ClientFormParam"

#: _guides/rest-client.adoc
#, fuzzy
msgid "Form parameters can also be specified using `@ClientFormParam`, similar to `@ClientQueryParam`:"
msgstr "也可以使用 `@ClientFormParam` 指定表格参数，与 `@ClientQueryParam` 类似："

#: _guides/rest-client.adoc
#, fuzzy
msgid "More information about this annotation can be found on the javadoc of link:https://javadoc.io/doc/io.quarkus/quarkus-rest-client/latest/io/quarkus/rest/client/reactive/ClientFormParam.html[`@ClientFormParam`]."
msgstr "有关此注解的更多信息，请参见 link:https://javadoc.io/doc/io.quarkus/quarkus-rest-client/latest/io/quarkus/rest/client/reactive/ClientFormParam.html[@ClientFormParam] ."

#. type: Title ===
#: _guides/rest-client.adoc
#, fuzzy, no-wrap
msgid "Path Parameters"
msgstr "路径参数"

#: _guides/rest-client.adoc
#, fuzzy
msgid ""
"If the GET request requires path parameters you can leverage the `@PathParam(\"parameter-name\")` annotation instead of\n"
"(or in addition to) the `@QueryParam`. Path and query parameters can be combined, as required, as illustrated in the example below."
msgstr "如果 GET 请求需要路径参数，可以利用 `@PathParam(\"parameter-name\")` 注释来代替（或补充） `@QueryParam` 。路径参数和查询参数可以根据需要进行组合，如下例所示。"

#: _guides/rest-client.adoc
#, fuzzy
msgid "Sending large payloads"
msgstr "发送大型有效载荷"

#: _guides/rest-client.adoc
#, fuzzy
msgid "The REST Client is capable of sending arbitrarily large HTTP bodies without buffering the contents in memory, if one of the following types is used:"
msgstr "如果使用以下类型之一，REST 客户端就能发送任意大的 HTTP 主体，而无需在内存中缓冲内容："

#: _guides/rest-client.adoc
#, fuzzy
msgid "`InputStream`"
msgstr "`InputStream`"

#: _guides/rest-client.adoc
#, fuzzy
msgid "`Multi<io.vertx.mutiny.core.buffer.Buffer>`"
msgstr "`Multi<io.vertx.mutiny.core.buffer.Buffer>`"

#: _guides/rest-client.adoc
#, fuzzy
msgid "Furthermore, the client can also send arbitrarily large files if one of the following types is used:"
msgstr "此外，如果使用以下类型之一，客户端还可以发送任意大的文件："

#: _guides/rest-client.adoc
#, fuzzy
msgid "`File`"
msgstr "`File`"

#: _guides/rest-client.adoc
#, fuzzy
msgid "`Path`"
msgstr "`Path`"

#. type: Title ==
#: _guides/rest-client.adoc
#, no-wrap
msgid "Create the configuration"
msgstr "创建配置"

#: _guides/rest-client.adoc
#, fuzzy
msgid ""
"In order to determine the base URL to which REST calls will be made, the REST Client uses configuration from `application.properties`.\n"
"The name of the property needs to follow a certain convention which is best displayed in the following code:"
msgstr "为了确定 REST 调用的基本 URL，REST 客户端使用了 `application.properties` 中的配置。属性名称需要遵循一定的约定，最好在下面的代码中显示出来："

#: _guides/rest-client.adoc
#, fuzzy
msgid ""
"Having this configuration means that all requests performed using `org.acme.rest.client.ExtensionsService` will use `https://stage.code.quarkus.io/api` as the base URL.\n"
"Using the configuration above, calling the `getById` method of `ExtensionsService` with a value of `io.quarkus:quarkus-rest-client` would result in an HTTP GET request being made to `https://stage.code.quarkus.io/api/extensions?id=io.quarkus:quarkus-rest-client`."
msgstr "有了这个配置，所有使用 `org.acme.rest.client.ExtensionsService` 执行的请求都将使用 `https://stage.code.quarkus.io/api` 作为基本 URL。使用上述配置，调用 `ExtensionsService` 的 `getById` 方法（值为 `io.quarkus:quarkus-rest-client` ）将导致向以下地址发出 HTTP GET 请求 `https://stage.code.quarkus.io/api/extensions?id=io.quarkus:quarkus-rest-client` ."

#. type: Plain text
#: _guides/rest-client.adoc
#, fuzzy
msgid "Note that `org.acme.rest.client.ExtensionsService` _must_ match the fully qualified name of the `ExtensionsService` interface we created in the previous section."
msgstr "注意， `org.acme.rest.client.ExtensionsService` _必须_ 与我们在上一节中创建的 `ExtensionsService` 接口的完全合格名称相匹配。"

#: _guides/rest-client.adoc
#, fuzzy
msgid "To facilitate the configuration, you can use the `@RegisterRestClient` `configKey` property that allows to use different configuration root than the fully qualified name of your interface."
msgstr "为方便配置，可使用 `@RegisterRestClient` `configKey` 属性，该属性允许使用与接口全称不同的配置根。"

#. type: Title ===
#: _guides/rest-client.adoc
#, fuzzy, no-wrap
msgid "Disabling Hostname Verification"
msgstr "禁用主机名验证"

#. type: Plain text
#: _guides/rest-client.adoc
#, fuzzy
msgid "To disable the SSL hostname verification for a specific REST client, add the following property to your configuration:"
msgstr "要禁用特定REST客户端的SSL主机名验证，请在配置中添加以下属性。"

#. type: delimited block =
#: _guides/rest-client.adoc
#, fuzzy
msgid "This setting should not be used in production as it will disable the SSL hostname verification."
msgstr "这个设置不应该在生产中使用，因为它将禁用SSL主机名验证。"

#: _guides/rest-client.adoc
#, fuzzy
msgid "HTTP/2 Support"
msgstr "HTTP/2 支持"

#: _guides/rest-client.adoc
#, fuzzy
msgid "HTTP/2 is disabled by default in REST Client. If you want to enable it, you can set:"
msgstr "REST 客户端默认禁用 HTTP/2。如果要启用，可以设置："

#: _guides/rest-client.adoc
#, fuzzy
msgid "Alternatively, you can enable the Application-Layer Protocol Negotiation (alpn) TLS extension and the client will negotiate which HTTP version to use over the ones compatible by the server. By default, it will try to use HTTP/2 first and if it's not enabled, it will use HTTP/1.1. If you want to enable it, you can set:"
msgstr "另外，也可以启用应用层协议协商（alpn）TLS 扩展，客户端将协商使用哪个 HTTP 版本，而不是服务器兼容的版本。默认情况下，客户端会首先尝试使用 HTTP/2，如果未启用，则会使用 HTTP/1.1。如果要启用，可以设置："

#. type: Title ==
#: _guides/rest-client.adoc
#, fuzzy, no-wrap
msgid "Create the Jakarta REST resource"
msgstr "创建JAX-RS资源"

#. type: Plain text
#: _guides/rest-client.adoc
#, fuzzy
msgid "Create the `src/main/java/org/acme/rest/client/ExtensionsResource.java` file with the following content:"
msgstr "创建具有以下内容的 `src/main/java/org/acme/rest/client/ExtensionsResource.java` 文件。"

#: _guides/rest-client.adoc
#, fuzzy
msgid "There are two interesting parts in this listing:"
msgstr "这份清单中有两个有趣的部分："

#: _guides/rest-client.adoc
#, fuzzy
msgid "the client stub is injected with the `@RestClient` annotation instead of the usual CDI `@Inject`"
msgstr "注入客户端存根时使用 `@RestClient` 注解，而不是通常的 CDI `@Inject`"

#: _guides/rest-client.adoc
#, fuzzy
msgid "Programmatic client creation with QuarkusRestClientBuilder"
msgstr "使用 QuarkusRestClientBuilder 创建程序化客户端"

#: _guides/rest-client.adoc
#, fuzzy
msgid ""
"Instead of annotating the client with `@RegisterRestClient`, and injecting\n"
"a client with `@RestClient`, you can also create REST Client programmatically.\n"
"You do that with the `QuarkusRestClientBuilder`."
msgstr "您也可以通过编程创建 REST 客户端，而不是用 `@RegisterRestClient` 来注解客户端，用 `@RestClient` 来注入客户端。您可以使用 `QuarkusRestClientBuilder` 。"

#: _guides/rest-client.adoc
#, fuzzy
msgid "With this approach the client interface could look as follows:"
msgstr "采用这种方法，客户端界面可以如下所示："

#: _guides/rest-client.adoc
#, fuzzy
msgid "And the service as follows:"
msgstr "服务内容如下"

#: _guides/rest-client.adoc
#, fuzzy
msgid "The `QuarkusRestClientBuilder` interface is a Quarkus-specific API to programmatically create clients with additional configuration options. Otherwise, you can also use the `RestClientBuilder` interface from the Microprofile API:"
msgstr "`QuarkusRestClientBuilder` 接口是 Quarkus 专用的 API，用于以编程方式创建带有附加配置选项的客户端。否则，你也可以使用微配置文件 API 中的 `RestClientBuilder` 接口："

#: _guides/rest-client.adoc
#, fuzzy
msgid "Use Custom HTTP Options"
msgstr "使用自定义 HTTP 选项"

#: _guides/rest-client.adoc
#, fuzzy
msgid "The REST Client internally uses https://vertx.io/docs/apidocs/io/vertx/core/http/HttpClient.html[the Vert.x HTTP Client] to make the network connections. The REST Client extensions allows configuring some settings via properties, for example:"
msgstr "REST 客户端内部使用 link:https://vertx.io/docs/apidocs/io/vertx/core/http/HttpClient.html[Vert.x HTTP 客户端] 进行网络连接。REST 客户端扩展允许通过属性配置某些设置，例如"

#: _guides/rest-client.adoc
#, fuzzy
msgid "`quarkus.rest-client.client-prefix.connect-timeout` to configure the connect timeout in milliseconds."
msgstr "`quarkus.rest-client.client-prefix.connect-timeout` 以毫秒为单位配置连接超时。"

#: _guides/rest-client.adoc
#, fuzzy
msgid "`quarkus.rest-client.client-prefix.max-redirects` to limit the number of redirects."
msgstr "`quarkus.rest-client.client-prefix.max-redirects` 来限制重定向的次数。"

#: _guides/rest-client.adoc
#, fuzzy
msgid "However, there are many more options within the Vert.x HTTP Client to configure the connections. See all the options in the Vert.x HTTP Client Options API in https://vertx.io/docs/apidocs/io/vertx/core/http/HttpClientOptions.html[this link]."
msgstr "不过，Vert.x HTTP 客户端中还有更多配置连接的选项。在 link:https://vertx.io/docs/apidocs/io/vertx/core/http/HttpClientOptions.html[此链接] 中查看 Vert.x HTTP 客户端选项 API 中的所有选项。"

#: _guides/rest-client.adoc
#, fuzzy
msgid "To fully customize the Vert.x HTTP Client instance that the REST Client is internally using, you can provide your custom HTTP Client Options instance via CDI or when programmatically creating your client."
msgstr "要完全自定义 REST 客户端内部使用的 Vert.x HTTP 客户端实例，可以通过 CDI 或在以编程方式创建客户端时提供自定义 HTTP 客户端选项实例。"

#: _guides/rest-client.adoc
#, fuzzy
msgid "Let's see an example about how to provide the HTTP Client Options via CDI:"
msgstr "让我们来看一个如何通过 CDI 提供 HTTP 客户端选项的示例："

#: _guides/rest-client.adoc
#, fuzzy
msgid "Now, all the REST Clients will be using your custom HTTP Client Options."
msgstr "现在，所有 REST 客户端都将使用您自定义的 HTTP 客户端选项。"

#: _guides/rest-client.adoc
#, fuzzy
msgid "Another approach is to provide the custom HTTP Client options when creating the client programmatically:"
msgstr "另一种方法是在以编程方式创建客户端时提供自定义 HTTP 客户端选项："

#: _guides/rest-client.adoc
#, fuzzy
msgid "the client will use the registered HTTP Client options over the HTTP Client options provided via CDI if any."
msgstr "客户端将使用注册的 HTTP 客户端选项，而不是通过 CDI 提供的 HTTP 客户端选项（如果有的话）。"

#. type: Title ==
#: _guides/rest-client.adoc
#, fuzzy, no-wrap
msgid "Redirection"
msgstr "重新定向"

#: _guides/rest-client.adoc
#, fuzzy
msgid "A HTTP server can redirect a response to another location by sending a response with a status code that starts with \"3\" and a HTTP header \"Location\" holding the URL to be redirected to. When the REST Client receives a redirection response from a HTTP server, it won't automatically perform another request to the new location. We can enable the automatic redirection in REST Client by adding the \"follow-redirects\" property:"
msgstr "HTTP 服务器可以通过发送状态代码以 \"3 \"开头的响应和包含要重定向到的 URL 的 HTTP 标头 \"Location\"，将响应重定向到另一个位置。当 REST 客户端收到 HTTP 服务器的重定向响应时，它不会自动向新位置执行另一个请求。我们可以通过添加 \"follow-redirects \"属性来启用 REST 客户端的自动重定向功能："

#. type: Plain text
#: _guides/rest-client.adoc
#, fuzzy
msgid "`quarkus.rest-client.follow-redirects` to enable redirection for all REST clients."
msgstr " `quarkus.rest-client.client-prefix.max-redirects` 来限制重定向的数量。"

#. type: Plain text
#: _guides/rest-client.adoc
#, fuzzy
msgid "`quarkus.rest-client.<client-prefix>.follow-redirects` to enable redirection for a specific REST client."
msgstr " `quarkus.rest-client.client-prefix.max-redirects` 来限制重定向的数量。"

#. type: Plain text
#: _guides/rest-client.adoc
#, fuzzy
msgid "If this property is true, then REST Client will perform a new request that it receives a redirection response from the HTTP server."
msgstr "如果这个属性为真，那么REST客户端将执行一个新的请求，它从HTTP服务器收到一个重定向响应。"

#. type: Plain text
#: _guides/rest-client.adoc
#, fuzzy
msgid "Additionally, we can limit the number of redirections using the property \"max-redirects\"."
msgstr "此外，我们可以使用属性 \"max-redirects \"限制重定向的数量。"

#: _guides/rest-client.adoc
#, fuzzy
msgid "One important note is that according to the https://www.rfc-editor.org/rfc/rfc2616#section-10.3.8[RFC2616] specs, by default the redirection will only happen for GET or HEAD methods. However, in REST Client, you can provide your custom redirect handler to enable redirection on POST or PUT methods, or to follow a more complex logic, via either using the `@ClientRedirectHandler` annotation, CDI or programmatically when creating your client."
msgstr "需要注意的一点是，根据 link:https://www.rfc-editor.org/rfc/rfc2616#section-10.3.8[RFC2616] 规范，默认情况下，重定向只针对 GET 或 HEAD 方法。不过，在 REST 客户端中，您可以通过使用 `@ClientRedirectHandler` 注解、CDI 或在创建客户端时以编程方式提供自定义重定向处理程序，以启用 POST 或 PUT 方法的重定向，或遵循更复杂的逻辑。"

#: _guides/rest-client.adoc
#, fuzzy
msgid "Let's see an example about how to register your own custom redirect handler using the `@ClientRedirectHandler` annotation:"
msgstr "让我们来看一个示例，了解如何使用 `@ClientRedirectHandler` 注解注册自己的自定义重定向处理程序："

#: _guides/rest-client.adoc
#, fuzzy
msgid "The \"alwaysRedirect\" redirect handler will only be used by the specified REST Client which in this example is the \"ExtensionsService\" client."
msgstr "alwaysRedirect \"重定向处理程序只会被指定的 REST 客户端使用，在本例中就是 \"ExtensionsService \"客户端。"

#: _guides/rest-client.adoc
#, fuzzy
msgid "Alternatively, you can also provide a custom redirect handler for all your REST Clients via CDI:"
msgstr "另外，您也可以通过 CDI 为所有 REST 客户端提供自定义重定向处理程序："

#: _guides/rest-client.adoc
#, fuzzy
msgid "Now, all the REST Clients will be using your custom redirect handler."
msgstr "现在，所有 REST 客户端都将使用您自定义的重定向处理程序。"

#: _guides/rest-client.adoc
#, fuzzy
msgid "Another approach is to provide it programmatically when creating the client:"
msgstr "另一种方法是在创建客户端时以编程方式提供："

#: _guides/rest-client.adoc
#, fuzzy
msgid "the client will use the registered redirect handler over the redirect handler provided via CDI if any."
msgstr "客户端将使用已注册的重定向处理程序，而不是通过 CDI 提供的重定向处理程序（如果有的话）。"

#. type: Title ==
#: _guides/rest-client.adoc
#, fuzzy, no-wrap
msgid "Update the test"
msgstr "更新测试"

#: _guides/rest-client.adoc
#, fuzzy
msgid ""
"Next, we need to update the functional test to reflect the changes made to the endpoint.\n"
"Edit the `src/test/java/org/acme/rest/client/ExtensionsResourceTest.java` file and change the content of the test to:"
msgstr "接下来，我们需要更新功能测试，以反映端点所做的更改。编辑 `src/test/java/org/acme/rest/client/ExtensionsResourceTest.java` 文件，将测试内容改为"

#. type: Plain text
#: _guides/rest-client.adoc
#, fuzzy
msgid "The code above uses link:https://rest-assured.io/[REST Assured]'s link:https://github.com/rest-assured/rest-assured/wiki/GettingStarted#jsonpath[json-path] capabilities."
msgstr "上面的代码使用了 link:http://rest-assured.io/[REST Assured] 的 link:https://github.com/rest-assured/rest-assured/wiki/GettingStarted#jsonpath[json-path] 功能。"

#. type: Title ==
#: _guides/rest-client.adoc
#, fuzzy, no-wrap
msgid "Async Support"
msgstr "异步支持"

#: _guides/rest-client.adoc
#, fuzzy
msgid ""
"To get the full power of the reactive nature of the client, you can use the non-blocking flavor of REST Client extension,\n"
"which comes with support for `CompletionStage` and `Uni`.\n"
"Let's see it in action by adding a `getByIdAsync` method in our `ExtensionsService` REST interface. The code should look like:"
msgstr "要充分发挥客户端的反应能力，可以使用 REST 客户端扩展的非阻塞功能，它支持 `CompletionStage` 和 `Uni` 。让我们在 `ExtensionsService` REST 接口中添加一个 `getByIdAsync` 方法，看看它的实际效果。代码如下"

#. type: Plain text
#: _guides/rest-client.adoc
#, fuzzy
msgid "Open the `src/main/java/org/acme/rest/client/ExtensionsResource.java` file and update it with the following content:"
msgstr "打开 `src/main/java/org/acme/rest/client/ExtensionsResource.java` 文件，用以下内容更新它。"

#: _guides/rest-client.adoc
#, fuzzy
msgid ""
"Please note that since the invocation is now non-blocking, the `idAsync` method will be invoked on the event loop,\n"
"i.e. will not get offloaded to a worker pool thread and thus reducing hardware resource utilization.\n"
"See xref:rest.adoc#execution-model[Quarkus REST execution model] for more details."
msgstr "请注意，由于调用现在是非阻塞的， `idAsync` 方法将在事件循环中调用，即不会被卸载到工作池线程，从而降低硬件资源利用率。更多详情，请参阅 xref:rest.adoc#execution-model[Quarkus REST 执行模型] 。"

#. type: Plain text
#: _guides/rest-client.adoc
#, fuzzy
msgid "To test asynchronous methods, add the test method below in `ExtensionsResourceTest`:"
msgstr "为了测试异步方法，在 `ExtensionsResourceTest` ，添加下面的测试方法。"

#. type: Plain text
#: _guides/rest-client.adoc
#, fuzzy
msgid "The `Uni` version is very similar:"
msgstr " `Uni` 版本非常相似。"

#. type: Plain text
#: _guides/rest-client.adoc
#, fuzzy
msgid "The `ExtensionsResource` becomes:"
msgstr " `ExtensionsResource` 变成了。"

#. type: Block title
#: _guides/rest-client.adoc
#, fuzzy, no-wrap
msgid "Mutiny"
msgstr "叛变"

#: _guides/rest-client.adoc
#, fuzzy
msgid ""
"The previous snippet uses Mutiny reactive types.\n"
"If you are not familiar with Mutiny, check xref:mutiny-primer.adoc[Mutiny - an intuitive reactive programming library]."
msgstr "前面的代码段使用了 Mutiny 反应类型。如果你不熟悉 Mutiny，请查看 xref:mutiny-primer.adoc[Mutiny - 一个直观的反应式编程库] 。"

#: _guides/rest-client.adoc
#, fuzzy
msgid ""
"When returning a `Uni`, every _subscription_ invokes the remote service.\n"
"It means you can re-send the request by re-subscribing on the `Uni`, or use a `retry` as follows:"
msgstr "在返回 `Uni` 时，每次 _订阅_ 都会调用远程服务。这意味着您可以通过在 `Uni` 上重新订阅来重新发送请求，或使用 `retry` ，如下所示："

#: _guides/rest-client.adoc
#, fuzzy
msgid ""
"If you use a `CompletionStage`, you would need to call the service's method to retry.\n"
"This difference comes from the laziness aspect of Mutiny and its subscription protocol.\n"
"More details about this can be found in https://smallrye.io/smallrye-mutiny/latest/reference/uni-and-multi/[the Mutiny documentation]."
msgstr "如果使用 `CompletionStage` ，则需要调用服务的方法来重试。这种差异来自 Mutiny 及其订阅协议的懒惰特性。有关这方面的更多详情，请参阅 link:https://smallrye.io/smallrye-mutiny/latest/reference/uni-and-multi/[Mutiny 文档] 。"

#: _guides/rest-client.adoc
#, fuzzy
msgid "Server-Sent Event (SSE) support"
msgstr "支持服务器发送事件（SSE）"

#: _guides/rest-client.adoc
#, fuzzy
msgid "Consuming SSE events is possible simply by declaring the result type as a `io.smallrye.mutiny.Multi`."
msgstr "只需将结果类型声明为 `io.smallrye.mutiny.Multi` ，即可消耗 SSE 事件。"

#: _guides/rest-client.adoc
#, fuzzy
msgid "The simplest example is:"
msgstr "最简单的例子是"

#: _guides/rest-client.adoc
#, fuzzy
msgid "All the IO involved in streaming the SSE results is done in a non-blocking manner."
msgstr "流式传输 SSE 结果所涉及的所有 IO 都是以非阻塞方式进行的。"

#: _guides/rest-client.adoc
#, fuzzy
msgid "Results are not limited to strings - for example when the server returns JSON payload for each event, Quarkus automatically deserializes it into the generic type used in the `Multi`."
msgstr "结果不限于字符串，例如，当服务器返回每个事件的 JSON 有效载荷时，Quarkus 会自动将其反序列化为 `Multi` 中使用的通用类型。"

#: _guides/rest-client.adoc
#, fuzzy
msgid "Users can also access the entire SSE event by using the `org.jboss.resteasy.reactive.client.SseEvent` type."
msgstr "用户还可以使用 `org.jboss.resteasy.reactive.client.SseEvent` 类型访问整个 SSE 事件。"

#: _guides/rest-client.adoc
#, fuzzy
msgid "A simple example where the event payloads are `Long` values is the following:"
msgstr "下面是一个事件有效载荷为 `Long` 值的简单示例："

#: _guides/rest-client.adoc
#, fuzzy
msgid "Filtering out events"
msgstr "过滤事件"

#: _guides/rest-client.adoc
#, fuzzy
msgid ""
"On occasion, the stream of SSE events may contain some events that should not be returned by the client - an example of this is having the server send heartbeat events in order to keep the underlying TCP connection open.\n"
"The REST Client supports filtering out such events by providing the `@org.jboss.resteasy.reactive.client.SseEventFilter`."
msgstr "有时，SSE 事件流可能包含一些客户端不应返回的事件，例如服务器发送心跳事件以保持底层 TCP 连接打开。REST 客户端通过提供 `@org.jboss.resteasy.reactive.client.SseEventFilter` ."

#: _guides/rest-client.adoc
#, fuzzy
msgid "Here is an example of filtering out heartbeat events:"
msgstr "下面是一个过滤心跳事件的示例："

#. type: Title ==
#: _guides/rest-client.adoc
#, fuzzy, no-wrap
msgid "Custom headers support"
msgstr "支持自定义页眉"

#: _guides/rest-client.adoc
#, fuzzy
msgid "There are a few ways in which you can specify custom headers for your REST calls:"
msgstr "有几种方法可以为 REST 调用指定自定义标头："

#: _guides/rest-client.adoc
#, fuzzy
msgid "by registering a `ClientHeadersFactory` or a `ReactiveClientHeadersFactory` with the `@RegisterClientHeaders` annotation"
msgstr "通过 `@RegisterClientHeaders` 注释注册 `ClientHeadersFactory` 或 `ReactiveClientHeadersFactory` "

#: _guides/rest-client.adoc
#, fuzzy
msgid "by programmatically registering a `ClientHeadersFactory` or a `ReactiveClientHeadersFactory` with the `QuarkusRestClientBuilder.clientHeadersFactory(factory)` method"
msgstr "通过 `QuarkusRestClientBuilder.clientHeadersFactory(factory)` 方法以编程方式注册 `ClientHeadersFactory` 或 `ReactiveClientHeadersFactory` "

#: _guides/rest-client.adoc
#, fuzzy
msgid "by specifying the value of the header with `@ClientHeaderParam`"
msgstr "通过使用 `@ClientHeaderParam`"

#: _guides/rest-client.adoc
#, fuzzy
msgid "by specifying the value of the header by `@HeaderParam`"
msgstr "指定标头的值 `@HeaderParam`"

#: _guides/rest-client.adoc
#, fuzzy
msgid "The code below demonstrates how to use each of these techniques:"
msgstr "下面的代码演示了如何使用这些技术："

#: _guides/rest-client.adoc
#, fuzzy
msgid "There can be only one `ClientHeadersFactory` per class. With it, you can not only add custom headers, but you can also transform existing ones. See the `RequestUUIDHeaderFactory` class below for an example of the factory."
msgstr "每个类只能有一个 `ClientHeadersFactory` 。通过它，您不仅可以添加自定义标题，还可以转换现有标题。有关工厂的示例，请参阅下面的 `RequestUUIDHeaderFactory` 类。"

#: _guides/rest-client.adoc
#, fuzzy
msgid "`@ClientHeaderParam` can be used on the client interface and on methods. It can specify a constant header value..."
msgstr "`@ClientHeaderParam` 可用于客户端接口和方法。它可以指定一个常量头值..."

#: _guides/rest-client.adoc
#, fuzzy
msgid "... and a name of a method that should compute the value of the header. It can either be a static method or a default method in this interface. The method can take either no parameters, a single String parameter or a single `io.quarkus.rest.client.reactive.ComputedParamContext` parameter (which is very useful for code that needs to compute headers based on method parameters and naturally complements `@io.quarkus.rest.client.reactive.NotBody`)."
msgstr ""
"\n"
" 和计算标头值的方法名称。该方法可以是静态方法，也可以是该接口中的默认方法。该方法既可以不带参数，也可以只带一个字符串参数或一个 `io.quarkus.rest.client.reactive.ComputedParamContext` 参数（这对需要根据方法参数计算标头的代码非常有用，自然也是对 `@io.quarkus.rest.client.reactive.NotBody` 的补充）。"

#: _guides/rest-client.adoc
#, fuzzy
msgid "... as well as a value from your application's configuration"
msgstr ""
"\n"
" 以及应用程序配置中的值"

#: _guides/rest-client.adoc
#, fuzzy
msgid "... or even any mixture of verbatim text, method parameters (referenced by name), a configuration value (as mentioned previously) and method invocations (as mentioned before)"
msgstr ""
"\n"
" 甚至是逐字文本、方法参数（通过名称引用）、配置值（如前所述）和方法调用（如前所述）的任何混合体"

#: _guides/rest-client.adoc
#, fuzzy
msgid "... or as a normal Jakarta REST `@HeaderParam` annotated argument"
msgstr ""
"\n"
" 或作为普通的 Jakarta REST `@HeaderParam` 注释参数"

#: _guides/rest-client.adoc
#, fuzzy
msgid ""
"When using Kotlin, if default methods are going to be leveraged, then the Kotlin compiler needs to be configured to use Java's default interface capabilities.\n"
"See link:https://kotlinlang.org/docs/java-to-kotlin-interop.html#default-methods-in-interfaces[this] for more details."
msgstr "使用 Kotlin 时，如果要使用默认方法，则需要将 Kotlin 编译器配置为使用 Java 的默认接口功能。更多详情，请参阅 link:https://kotlinlang.org/docs/java-to-kotlin-interop.html#default-methods-in-interfaces[此处] 。"

#: _guides/rest-client.adoc
#, fuzzy
msgid "A `ClientHeadersFactory` can look as follows:"
msgstr "`ClientHeadersFactory` 可以如下所示："

#: _guides/rest-client.adoc
#, fuzzy
msgid ""
"As you see in the example above, you can make your `ClientHeadersFactory` implementation a CDI bean by\n"
"annotating it with a scope-defining annotation, such as `@Singleton`, `@ApplicationScoped`, etc."
msgstr "如上例所示，通过使用范围定义注解（如 `@Singleton` , `@ApplicationScoped` 等），可以使 `ClientHeadersFactory` 实现成为 CDI Bean。"

#: _guides/rest-client.adoc
#, fuzzy
msgid "To specify a value for `${header.value}`, simply put the following in your `application.properties`:"
msgstr "要指定 `${header.value}` 的值，只需在 `application.properties` 中输入以下内容："

#: _guides/rest-client.adoc
#, fuzzy
msgid "Also, there is a reactive flavor of `ClientHeadersFactory` that allows doing blocking operations. For example:"
msgstr "此外， `ClientHeadersFactory` 也有一种反应型，允许进行阻塞操作。例如"

#: _guides/rest-client.adoc
#, fuzzy
msgid ""
"When using HTTP Basic Auth, the `@io.quarkus.rest.client.reactive.ClientBasicAuth` annotation provides a much simpler way of configuring\n"
"the necessary `Authorization` header."
msgstr "在使用 HTTP Basic Auth 时， `@io.quarkus.rest.client.reactive.ClientBasicAuth` 注释提供了一种更简单的方法来配置必要的 `Authorization` 标头。"

#: _guides/rest-client.adoc
#, fuzzy
msgid "A very simple example is:"
msgstr "一个非常简单的例子是"

#: _guides/rest-client.adoc
#, fuzzy
msgid "where `service.username` and `service.password` are configuration properties that must be set at runtime to the username and password that allow access to the service being called."
msgstr "其中 `service.username` 和 `service.password` 是配置属性，必须在运行时设置为允许访问被调用服务的用户名和密码。"

#. type: Title ===
#: _guides/rest-client.adoc
#, fuzzy, no-wrap
msgid "Default header factory"
msgstr "默认的页眉工厂"

#: _guides/rest-client.adoc
#, fuzzy
msgid ""
"The `@RegisterClientHeaders` annotation can also be used without any custom factory specified. In that case the `DefaultClientHeadersFactoryImpl` factory will be used.\n"
"If you make a REST client call from a REST resource, this factory will propagate all the headers listed in `org.eclipse.microprofile.rest.client.propagateHeaders` configuration property from the resource request to the client request. Individual header names are comma-separated."
msgstr "`@RegisterClientHeaders` 注释也可以在不指定任何自定义工厂的情况下使用。在这种情况下，将使用 `DefaultClientHeadersFactoryImpl` 工厂。如果从 REST 资源调用 REST 客户端，该工厂会将 `org.eclipse.microprofile.rest.client.propagateHeaders` 配置属性中列出的所有头信息从资源请求传播到客户端请求。各个标头名称以逗号分隔。"

#: _guides/rest-client.adoc
#, fuzzy
msgid "Customizing the request"
msgstr "自定义申请"

#: _guides/rest-client.adoc
#, fuzzy
msgid "The REST Client supports further customization of the final request to be sent to the server via filters. The filters must implement either the interface `ClientRequestFilter` or `ResteasyReactiveClientRequestFilter`."
msgstr "REST 客户端支持通过过滤器进一步定制发送到服务器的最终请求。过滤器必须实现 `ClientRequestFilter` 或 `ResteasyReactiveClientRequestFilter` 接口。"

#: _guides/rest-client.adoc
#, fuzzy
msgid "A simple example of customizing the request would be to add a custom header:"
msgstr "自定义请求的一个简单例子是添加自定义标题："

#: _guides/rest-client.adoc
#, fuzzy
msgid "Next, you can register your filter using the `@RegisterProvider` annotation:"
msgstr "接下来，您可以使用 `@RegisterProvider` 注解注册过滤器："

#: _guides/rest-client.adoc
#, fuzzy
msgid "Or programmatically using the `.register()` method:"
msgstr "或使用 `.register()` 方法进行编程："

#: _guides/rest-client.adoc
#, fuzzy
msgid "Injecting the `jakarta.ws.rs.ext.Providers` instance in filters"
msgstr "在过滤器中注入 `jakarta.ws.rs.ext.Providers` 实例"

#: _guides/rest-client.adoc
#, fuzzy
msgid "The `jakarta.ws.rs.ext.Providers` is useful when we need to lookup the provider instances of the current client."
msgstr "当我们需要查找当前客户端的提供程序实例时， `jakarta.ws.rs.ext.Providers` 就派上用场了。"

#: _guides/rest-client.adoc
#, fuzzy
msgid "We can get the `Providers` instance in our filters from the request context as follows:"
msgstr "我们可以从请求上下文中获取过滤器中的 `Providers` 实例，如下所示："

#: _guides/rest-client.adoc
#, fuzzy
msgid "Alternatively, you can implement the `ResteasyReactiveClientRequestFilter` interface instead of the `ClientRequestFilter` interface that will directly provide the `ResteasyReactiveClientRequestContext` context:"
msgstr "或者，也可以实现 `ResteasyReactiveClientRequestFilter` 接口，而不是直接提供 `ResteasyReactiveClientRequestContext` 上下文的 `ClientRequestFilter` 接口："

#: _guides/rest-client.adoc
#, fuzzy
msgid "Customizing the ObjectMapper in REST Client Jackson"
msgstr "在 REST 客户端 Jackson 中自定义对象映射器"

#: _guides/rest-client.adoc
#, fuzzy
msgid "The REST Client supports adding a custom ObjectMapper to be used only the Client using the annotation `@ClientObjectMapper`."
msgstr "REST 客户端支持使用注解 `@ClientObjectMapper` 添加自定义 ObjectMapper，该 ObjectMapper 仅供客户端使用。"

#: _guides/rest-client.adoc
#, fuzzy
msgid "A simple example is to provide a custom ObjectMapper to the REST Client Jackson extension by doing:"
msgstr "一个简单的例子是为 REST 客户端 Jackson 扩展提供自定义对象映射器，具体做法是"

#: _guides/rest-client.adoc
#, fuzzy
msgid "The method must be annotated with `@ClientObjectMapper`."
msgstr "方法必须使用 `@ClientObjectMapper` 进行注释。"

#: _guides/rest-client.adoc
#, fuzzy
msgid "It's must be a static method. Also, the parameter `defaultObjectMapper` will be resolved via CDI. If not found, it will throw an exception at runtime."
msgstr "必须是静态方法。此外，参数 `defaultObjectMapper` 将通过 CDI 解析。如果找不到，运行时会出现异常。"

#: _guides/rest-client.adoc
#, fuzzy
msgid "In this example, we're creating a copy of the default object mapper. You should *NEVER* modify the default object mapper, but create a copy instead."
msgstr "在本例中，我们创建了默认对象映射器的副本。 *千万不要* 修改默认对象映射器，而应创建一个副本。"

#: _guides/rest-client.adoc
#, fuzzy
msgid "Exception handling"
msgstr "异常处理"

#: _guides/rest-client.adoc
#, fuzzy
msgid "The MicroProfile REST Client specification introduces the `org.eclipse.microprofile.rest.client.ext.ResponseExceptionMapper` whose purpose is to convert an HTTP response to an exception."
msgstr "MicroProfile REST 客户端规范引入了 `org.eclipse.microprofile.rest.client.ext.ResponseExceptionMapper` ，其目的是将 HTTP 响应转换为异常。"

#: _guides/rest-client.adoc
#, fuzzy
msgid "A simple example of implementing such a `ResponseExceptionMapper` for the `ExtensionsService` discussed above, could be:"
msgstr "针对上文讨论的 `ExtensionsService` ，实施这样一个 `ResponseExceptionMapper` 的简单例子可以是"

#: _guides/rest-client.adoc
#, fuzzy
msgid ""
"`ResponseExceptionMapper` also defines the `getPriority` method which is used in order to determine the priority with which `ResponseExceptionMapper` implementations will be called (implementations with a lower value for `getPriority` will be invoked first).\n"
"If `toThrowable` returns an exception, then that exception will be thrown. If `null` is returned, the next implementation of `ResponseExceptionMapper` in the chain will be called (if there is any)."
msgstr "`ResponseExceptionMapper` 还定义了 方法，该方法用于确定调用 实现的优先级（ 值较低的实现将首先被调用）。如果 返回异常，则会抛出该异常。如果返回 ，则将调用链中 的下一个实现（如果有的话）。 `getPriority` `ResponseExceptionMapper` `getPriority` `toThrowable` `null` `ResponseExceptionMapper` "

#: _guides/rest-client.adoc
#, fuzzy
msgid ""
"The class as written above, would not be automatically be used by any REST Client. To make it available to every REST Client of the application, the class needs to be annotated with `@Provider` (as long as `quarkus.rest-client-reactive.provider-autodiscovery` is not set to `false`).\n"
"Alternatively, if the exception handling class should only apply to specific REST Client interfaces, you can either annotate the interfaces with `@RegisterProvider(MyResponseExceptionMapper.class)`, or register it using configuration using the `providers` property of the proper `quarkus.rest-client` configuration group."
msgstr "上述类不会自动被任何 REST 客户端使用。要让应用程序的每个 REST 客户端都能使用该类，需要用 `@Provider` 对该类进行注解（只要 `quarkus.rest-client-reactive.provider-autodiscovery` 没有设置为 `false` ）。另外，如果异常处理类只适用于特定的 REST 客户端接口，则可以使用 `@RegisterProvider(MyResponseExceptionMapper.class)` 对接口进行注释，或者使用适当的 `quarkus.rest-client` 配置组中的 `providers` 属性通过配置进行注册。"

#: _guides/rest-client.adoc
#, fuzzy
msgid "Using @ClientExceptionMapper"
msgstr "使用 @ClientExceptionMapper"

#: _guides/rest-client.adoc
#, fuzzy
msgid "A simpler way to convert HTTP response codes of 400 or above is to use the `@ClientExceptionMapper` annotation."
msgstr "转换 400 或以上 HTTP 响应代码的更简单方法是使用 `@ClientExceptionMapper` 注释。"

#: _guides/rest-client.adoc
#, fuzzy
msgid "For the `ExtensionsService` REST Client interface defined above, an example use of `@ClientExceptionMapper` would be:"
msgstr "对于上文定义的 `ExtensionsService` REST 客户端接口，使用 `@ClientExceptionMapper` 的示例如下："

#: _guides/rest-client.adoc
#, fuzzy
msgid "Naturally this handling is per REST Client. `@ClientExceptionMapper` uses the default priority if the `priority` attribute is not set and the normal rules of invoking all handlers in turn apply."
msgstr "`@ClientExceptionMapper` 在未设置 `priority` 属性的情况下使用默认优先级，并适用依次调用所有处理程序的正常规则。"

#: _guides/rest-client.adoc
#, fuzzy
msgid "Methods annotated with `@ClientExceptionMapper` can also take a `java.lang.reflect.Method` parameter which is useful if the exception mapping code needs to know the REST Client method that was invoked and caused the exception mapping code to engage."
msgstr "如果异常映射代码需要知道被调用并导致异常映射代码参与的 REST 客户端方法，那么使用 `@ClientExceptionMapper` 进行注解的方法也可以使用 `java.lang.reflect.Method` 参数。"

#: _guides/rest-client.adoc
#, fuzzy
msgid "Using @Blocking annotation in exception mappers"
msgstr "在异常映射器中使用 @Blocking 注解"

#: _guides/rest-client.adoc
#, fuzzy
msgid "In cases that warrant using `InputStream` as the return type of REST Client method (such as when large amounts of data need to be read):"
msgstr "在需要使用 `InputStream` 作为 REST 客户端方法返回类型的情况下（如需要读取大量数据）："

#: _guides/rest-client.adoc
#, fuzzy
msgid "This will work as expected, but if you try to read this InputStream object in a custom exception mapper, you will receive a `BlockingNotAllowedException` exception. This is because `ResponseExceptionMapper` classes are run on the Event Loop thread executor by default - which does not allow to perform IO operations."
msgstr "这将按预期运行，但如果尝试在自定义异常映射器中读取该 InputStream 对象，则会收到 `BlockingNotAllowedException` 异常。这是因为 `ResponseExceptionMapper` 类默认在事件循环线程执行器上运行，不允许执行 IO 操作。"

#: _guides/rest-client.adoc
#, fuzzy
msgid "To make your exception mapper blocking, you can annotate the exception mapper with the `@Blocking` annotation:"
msgstr "要使异常映射器阻塞，可以使用 `@Blocking` 注释来注解异常映射器："

#: _guides/rest-client.adoc
#, fuzzy
msgid "With the `@Blocking` annotation, the MyResponseExceptionMapper exception mapper will be executed in the worker thread pool."
msgstr "通过 `@Blocking` 注解，MyResponseExceptionMapper 异常映射器将在工作线程池中执行。"

#: _guides/rest-client.adoc
#, fuzzy
msgid "Reading the entity is now allowed because we're executing the mapper on the worker thread pool."
msgstr "现在可以读取实体了，因为我们是在工作线程池上执行映射器的。"

#: _guides/rest-client.adoc
#, fuzzy
msgid "Note that you can also use the `@Blocking` annotation when using @ClientExceptionMapper:"
msgstr "请注意，在使用 @ClientExceptionMapper 时，您也可以使用 `@Blocking` 注解："

#: _guides/rest-client.adoc
#, fuzzy
msgid "Multipart Form support"
msgstr "支持多部分表单"

#: _guides/rest-client.adoc
#, fuzzy
msgid "Sending Multipart messages"
msgstr "发送多部分邮件"

#: _guides/rest-client.adoc
#, fuzzy
msgid ""
"REST Client allows sending data as multipart forms. This way you can for example\n"
"send files efficiently."
msgstr "REST 客户端允许以多部分形式发送数据。例如，您可以通过这种方式高效地发送文件。"

#: _guides/rest-client.adoc
#, fuzzy
msgid "To send data as a multipart form, you can just use the regular `@RestForm` (or `@FormParam`) annotations:"
msgstr "要以多部分表单形式发送数据，只需使用常规的 `@RestForm` （或 `@FormParam` ）注释即可："

#: _guides/rest-client.adoc
#, fuzzy
msgid ""
"Parameters specified as `File`, `Path`, `byte[]`, `Buffer` or `FileUpload` are sent as files and default to the\n"
"`application/octet-stream` MIME type. Other `@RestForm` parameter types default to the `text/plain`\n"
"MIME type. You can override these defaults with the `@PartType` annotation."
msgstr "指定为 `File` , `Path` , `byte[]` , `Buffer` 或 `FileUpload` 的参数以文件形式发送，默认为 `application/octet-stream` MIME 类型。其他 `@RestForm` 参数类型默认为 `text/plain` MIME 类型。您可以使用 `@PartType` 注释覆盖这些默认值。"

#: _guides/rest-client.adoc
#, fuzzy
msgid "Naturally, you can also group these parameters into a containing class:"
msgstr "当然，您也可以将这些参数归入一个包含类："

#: _guides/rest-client.adoc
#, fuzzy
msgid ""
"Any `@RestForm` parameter of the type `File`, `Path`, `byte[]`, `Buffer` or `FileUpload`, as well as any\n"
"annotated with `@PartType` automatically imply a `@Consumes(MediaType.MULTIPART_FORM_DATA)`\n"
"on the method if there is no `@Consumes` present."
msgstr "`File` 如果没有 `@Consumes` ，任何 `@RestForm` 、 `Path` 、 `byte[]` 、 `Buffer` 或 `FileUpload` 类型的参数，以及任何注释为 `@PartType` 的参数，都会自动隐含一个 `@Consumes(MediaType.MULTIPART_FORM_DATA)` 方法。"

#: _guides/rest-client.adoc
#, fuzzy
msgid ""
"If there are `@RestForm` parameters that are not multipart-implying, then\n"
"`@Consumes(MediaType.APPLICATION_FORM_URLENCODED)` is implied."
msgstr "如果 `@RestForm` 的参数不是多参数，那么 `@Consumes(MediaType.APPLICATION_FORM_URLENCODED)` 就是隐含的。"

#: _guides/rest-client.adoc
#, fuzzy
msgid ""
"There are a few modes in which the form data can be encoded. By default,\n"
"REST Client uses RFC1738.\n"
"You can override it by specifying the mode either on the client level,\n"
"by setting `io.quarkus.rest.client.multipart-post-encoder-mode` RestBuilder property\n"
"to the selected value of `HttpPostRequestEncoder.EncoderMode` or\n"
"by specifying `quarkus.rest-client.multipart-post-encoder-mode` in your\n"
"`application.properties`. Please note that the latter works only for\n"
"clients created with the `@RegisterRestClient` annotation.\n"
"All the available modes are described in the link:https://netty.io/4.1/api/io/netty/handler/codec/http/multipart/HttpPostRequestEncoder.EncoderMode.html[Netty documentation]"
msgstr "表单数据有几种编码模式。默认情况下，REST 客户端使用 RFC1738。您可以通过在客户端层级指定模式，将 `io.quarkus.rest.client.multipart-post-encoder-mode` RestBuilder 属性设置为 `HttpPostRequestEncoder.EncoderMode` 的选定值，或在 `application.properties` 中指定 `quarkus.rest-client.multipart-post-encoder-mode` 来覆盖该模式。请注意，后者仅适用于使用 `@RegisterRestClient` 注解创建的客户端。 link:https://netty.io/4.1/api/io/netty/handler/codec/http/multipart/HttpPostRequestEncoder.EncoderMode.html[Netty 文档] 中介绍了所有可用模式"

#: _guides/rest-client.adoc
#, fuzzy
msgid "You can also send JSON multiparts by specifying the `@PartType` annotation:"
msgstr "您还可以通过指定 `@PartType` 注释来发送 JSON 多分段："

#: _guides/rest-client.adoc
#, fuzzy
msgid "Programmatically creating the Multipart form"
msgstr "以编程方式创建多部分表单"

#: _guides/rest-client.adoc
#, fuzzy
msgid "In cases where the multipart content needs to be built up programmatically, the REST Client provides `ClientMultipartForm` which can be used in the REST Client like so:"
msgstr "如果需要以编程方式建立多部分内容，REST 客户端提供了 `ClientMultipartForm` ，可在 REST 客户端中使用："

#: _guides/rest-client.adoc
#, fuzzy
msgid "More information about this class and supported methods can be found on the javadoc of link:https://javadoc.io/doc/io.quarkus.resteasy.reactive/resteasy-reactive-client/latest/org/jboss/resteasy/reactive/client/api/ClientMultipartForm.html[`ClientMultipartForm`]."
msgstr "有关该类和支持方法的更多信息，请参见 link:https://javadoc.io/doc/io.quarkus.resteasy.reactive/resteasy-reactive-client/latest/org/jboss/resteasy/reactive/client/api/ClientMultipartForm.html[ClientMultipartForm] ."

#: _guides/rest-client.adoc
#, fuzzy
msgid "Converting a received multipart object into a client request"
msgstr "将收到的多部分对象转换为客户请求"

#: _guides/rest-client.adoc
#, fuzzy
msgid "A good example of creating `ClientMultipartForm` is one where it is created from the server's `MultipartFormDataInput` (which represents a multipart request received by xref:rest.adoc#multipart[Quarkus REST]) - the purpose being to propagate the request downstream while allowing for arbitrary modifications:"
msgstr "创建 `ClientMultipartForm` 的一个好例子是从服务器的 `MultipartFormDataInput` （代表 xref:rest.adoc#multipart[Quarkus REST] 收到的多部分请求）创建的，目的是将请求传播到下游，同时允许任意修改："

#: _guides/rest-client.adoc
#, fuzzy
msgid "`MultipartFormDataInput` is a Quarkus REST (Server) type representing a received multipart request."
msgstr "`MultipartFormDataInput` 是一种 Quarkus REST（服务器）类型，代表收到的多部分请求。"

#: _guides/rest-client.adoc
#, fuzzy
msgid "A `ClientMultipartForm` is created."
msgstr "创建 `ClientMultipartForm` 。"

#: _guides/rest-client.adoc
#, fuzzy
msgid "`FileItem` attribute is created for the request attribute that represented an in memory file attribute"
msgstr "`FileItem` 属性的请求属性创建，该属性代表内存中的文件属性"

#: _guides/rest-client.adoc
#, fuzzy
msgid "`FileItem` attribute is created for the request attribute that represented a file attribute saved on the file system"
msgstr "`FileItem` 属性，该属性代表保存在文件系统中的文件属性"

#: _guides/rest-client.adoc
#, fuzzy
msgid "Non-file attributes added directly to `ClientMultipartForm` if not `FileItem`."
msgstr "如果不是 `FileItem` ，则非文件属性直接添加到 `ClientMultipartForm` 中。"

#: _guides/rest-client.adoc
#, fuzzy
msgid "In a similar fashion if the received server multipart request is known and looks something like:"
msgstr "同样，如果收到的服务器多部分请求是已知的，并且看起来类似于"

#: _guides/rest-client.adoc
#, fuzzy
msgid "the `ClientMultipartForm` can be created easily as follows:"
msgstr "`ClientMultipartForm` 的创建过程如下："

#: _guides/rest-client.adoc
#, fuzzy
msgid "`Request` representing the request the server parts accepts"
msgstr "`Request` 代表服务器部分接受的请求"

#: _guides/rest-client.adoc
#, fuzzy
msgid "A `jsonPayload` attribute is added directly to `ClientMultipartForm`"
msgstr "`jsonPayload` 属性直接添加到 `ClientMultipartForm`"

#: _guides/rest-client.adoc
#, fuzzy
msgid "A `fileUpload` is created from the request's `FileUpload`"
msgstr "`fileUpload` 根据请求的 `FileUpload`"

#: _guides/rest-client.adoc
#, fuzzy
msgid ""
"When sending multipart data that uses the same name, problems can arise if the client and server do not use the same multipart encoder mode.\n"
"By default, the REST Client uses `RFC1738`, but depending on the situation, clients may need to be configured with `HTML5` or `RFC3986` mode."
msgstr "在发送使用相同名称的多部分数据时，如果客户端和服务器不使用相同的多部分编码器模式，就会出现问题。默认情况下，REST 客户端使用 `RFC1738` ，但根据具体情况，客户端可能需要配置为 `HTML5` 或 `RFC3986` 模式。"

#: _guides/rest-client.adoc
#, fuzzy
msgid "This configuration can be achieved via the `quarkus.rest-client.multipart-post-encoder-mode` property."
msgstr "这种配置可通过 `quarkus.rest-client.multipart-post-encoder-mode` 属性实现。"

#: _guides/rest-client.adoc
#, fuzzy
msgid "Receiving Multipart Messages"
msgstr "接收多部分报文"

#: _guides/rest-client.adoc
#, fuzzy
msgid ""
"REST Client also supports receiving multipart messages.\n"
"As with sending, to parse a multipart response, you need to create a class that describes the response data, e.g."
msgstr "REST 客户端还支持接收多部分消息。与发送一样，要解析多部分响应，需要创建一个描述响应数据的类，例如"

#: _guides/rest-client.adoc
#, fuzzy
msgid "uses the shorthand `@RestForm` annotation to make a field as a part of a multipart form"
msgstr "使用速记 `@RestForm` 注释将字段作为多部分表单的一部分"

#: _guides/rest-client.adoc
#, fuzzy
msgid "the standard `@FormParam` can also be used. It allows to override the name of the multipart part."
msgstr "也可以使用标准 `@FormParam` 。它允许覆盖多部分的名称。"

#: _guides/rest-client.adoc
#, fuzzy
msgid "Then, create an interface method that corresponds to the call and make it return the `FormDto`:"
msgstr "然后，创建一个与调用相对应的接口方法，并使其返回 `FormDto` ："

#: _guides/rest-client.adoc
#, fuzzy
msgid "At the moment, multipart response support is subject to the following limitations:"
msgstr "目前，多部分回复支持受到以下限制："

#: _guides/rest-client.adoc
#, fuzzy
msgid "files sent in multipart responses can only be parsed to `File`, `Path` and `FileDownload`"
msgstr "在多部分响应中发送的文件只能被解析为 `File` , `Path` 和 `FileDownload`"

#: _guides/rest-client.adoc
#, fuzzy
msgid "each field of the response type has to be annotated with `@PartType` - fields without this annotation are ignored"
msgstr "响应类型的每个字段都必须注释为 `@PartType` - 没有注释的字段将被忽略"

#: _guides/rest-client.adoc
#, fuzzy
msgid "REST Client needs to know the classes used as multipart return types upfront. If you have an interface method that produces `multipart/form-data`, the return type will be discovered automatically. However, if you intend to use the `ClientBuilder` API to parse a response as multipart, you need to annotate your DTO class with `@MultipartForm`."
msgstr "REST 客户端需要预先知道用作多部分返回类型的类。如果您有生成 `multipart/form-data` 的接口方法，返回类型会被自动发现。但是，如果您打算使用 `ClientBuilder` API 将响应解析为多部分，则需要用 `@MultipartForm` 对您的 DTO 类进行注解。"

#: _guides/rest-client.adoc
#, fuzzy
msgid "The files you download are not automatically removed and can take up a lot of disk space. Consider removing the files when you are done working with them."
msgstr "下载的文件不会自动删除，而且会占用大量磁盘空间。请考虑在处理完文件后将其删除。"

#: _guides/rest-client.adoc
#, fuzzy
msgid "Multipart mixed / OData usage"
msgstr "多部分混合/OData 使用"

#: _guides/rest-client.adoc
#, fuzzy
msgid ""
"It is not uncommon that an application has to interact with enterprise systems (like CRM systems) using a special protocol called https://www.odata.org/documentation/odata-version-3-0/batch-processing/[OData].\n"
"This protocol essentially uses a custom HTTP `Content-Type` which needs some glue code to work with the REST Client (creating the body is entirely up to the application - the REST Client can't do much to help)."
msgstr "应用程序需要使用一种名为 link:https://www.odata.org/documentation/odata-version-3-0/batch-processing/[OData] 的特殊协议与企业系统（如 CRM 系统）进行交互，这种情况并不少见。该协议主要使用自定义 HTTP `Content-Type` ，需要一些粘合代码才能与 REST 客户端配合使用（创建主体完全取决于应用程序，REST 客户端帮不上什么忙）。"

#: _guides/rest-client.adoc
#, fuzzy
msgid "An example looks like the following:"
msgstr "示例如下"

#: _guides/rest-client.adoc
#, fuzzy
msgid "The code uses the following pieces:"
msgstr "代码使用了以下部分："

#: _guides/rest-client.adoc
#, fuzzy
msgid "`@ClientHeaderParam(name = \"Content-Type\", value = \"{calculateContentType}\")` which ensures that the `Content-Type` header is created by calling the interface's `calculateContentType` default method."
msgstr "`@ClientHeaderParam(name = \"Content-Type\", value = \"{calculateContentType}\")` 确保通过调用接口的 默认方法来创建 标头。 `calculateContentType` `Content-Type` "

#: _guides/rest-client.adoc
#, fuzzy
msgid "The aforementioned parameter needs to be annotated with `@NotBody` because it is only used to aid the construction of HTTP headers."
msgstr "上述参数需要注释为 `@NotBody` ，因为它只是用来帮助构建 HTTP 头信息的。"

#: _guides/rest-client.adoc
#, fuzzy
msgid "`context.methodParameters().get(1).value()` which allows the `calculateContentType` method to obtain the proper method parameter passed to the REST Client method."
msgstr "`context.methodParameters().get(1).value()` 这样， 方法就能获得传递给 REST 客户端方法的适当方法参数。 `calculateContentType` "

#: _guides/rest-client.adoc
#, fuzzy
msgid "As previously mentioned, the body parameter needs to be properly crafted by the application code to conform to the service's requirements."
msgstr "如前所述，正文参数需要由应用程序代码适当制作，以符合服务的要求。"

#: _guides/rest-client.adoc
#, fuzzy
msgid "Receiving compressed messages"
msgstr "接收压缩信息"

#: _guides/rest-client.adoc
#, fuzzy
msgid ""
"REST Client also supports receiving compressed messages using GZIP. You can enable the HTTP compression support by adding the property `quarkus.http.enable-compression=true`.\n"
"When this feature is enabled and a server returns a response that includes the header `Content-Encoding: gzip`, REST Client will automatically decode the content and proceed with the message handling."
msgstr "REST 客户端还支持使用 GZIP 接收压缩信息。你可以通过添加属性 `quarkus.http.enable-compression=true` 来启用 HTTP 压缩支持。启用该功能后，如果服务器返回的响应包含标题 `Content-Encoding: gzip` ，REST Client 将自动解码内容并继续处理报文。"

#: _guides/rest-client.adoc
#, fuzzy
msgid "Proxy support"
msgstr "代理支持"

#: _guides/rest-client.adoc
#, fuzzy
msgid ""
"REST Client supports sending requests through a proxy.\n"
"It honors the JVM settings for it but also allows to specify both:"
msgstr "REST 客户端支持通过代理发送请求。它尊重 JVM 对其的设置，但也允许同时指定两种设置："

#: _guides/rest-client.adoc
#, fuzzy
msgid "global client proxy settings, with `quarkus.rest-client.proxy-address`, `quarkus.rest-client.proxy-user`, `quarkus.rest-client.proxy-password`, `quarkus.rest-client.non-proxy-hosts`"
msgstr "全局客户端代理设置，包括 `quarkus.rest-client.proxy-address` , `quarkus.rest-client.proxy-user` , `quarkus.rest-client.proxy-password` 、 `quarkus.rest-client.non-proxy-hosts`"

#: _guides/rest-client.adoc
#, fuzzy
msgid "per-client proxy settings, with `quarkus.rest-client.<my-client>.proxy-address`, etc. These are applied only to clients injected with CDI, that is the ones created with `@RegisterRestClient`"
msgstr "`quarkus.rest-client.<my-client>.proxy-address` 等。这些设置只适用于用 CDI 注入的客户端，即用 `@RegisterRestClient`"

#: _guides/rest-client.adoc
#, fuzzy
msgid "If `proxy-address` is set on the client level, the client uses its specific proxy settings. No proxy settings are propagated from the global configuration or JVM properties."
msgstr "如果 `proxy-address` 设置在客户端级别，客户端将使用其特定的代理设置。全局配置或 JVM 属性不会传播代理设置。"

#: _guides/rest-client.adoc
#, fuzzy
msgid ""
"If `proxy-address` is not set for the client but is set on the global level, the client uses the global settings.\n"
"Otherwise, the client uses the JVM settings."
msgstr "如果 `proxy-address` 不是为客户端设置的，而是在全局级别设置的，则客户端使用全局设置。否则，客户端将使用 JVM 设置。"

#: _guides/rest-client.adoc
#, fuzzy
msgid "An example configuration for setting proxy:"
msgstr "设置代理的配置示例："

#: _guides/rest-client.adoc
#, fuzzy
msgid "MicroProfile REST Client specification does not allow setting proxy credentials. In order to specify proxy user and proxy password programmatically, you need to cast your `RestClientBuilder` to `RestClientBuilderImpl`."
msgstr "MicroProfile REST 客户端规范不允许设置代理凭证。为了以编程方式指定代理用户和代理密码，需要将 `RestClientBuilder` 发送至 `RestClientBuilderImpl` 。"

#. type: Title ==
#: _guides/rest-client.adoc
#, no-wrap
msgid "Package and run the application"
msgstr "打包并运行该应用程序"

#. type: Plain text
#: _guides/rest-client.adoc
msgid "Run the application with:"
msgstr "使用以下命令运行该应用程序:"

#. type: Plain text
#: _guides/rest-client.adoc
#, fuzzy
msgid "Open your browser to http://localhost:8080/extension/id/io.quarkus:quarkus-rest-client."
msgstr "打开你的浏览器， http://localhost:8080/extension/id/io.quarkus:quarkus-rest-client "

#: _guides/rest-client.adoc
#, fuzzy
msgid "You should see a JSON object containing some basic information about this extension."
msgstr "您将看到一个 JSON 对象，其中包含有关此扩展的一些基本信息。"

#. type: Plain text
#: _guides/rest-client.adoc
msgid "As usual, the application can be packaged using:"
msgstr "像往常一样，该应用程序可以用以下方式打包："

#. type: Plain text
#: _guides/rest-client.adoc
#, fuzzy
msgid "And executed with `java -jar target/quarkus-app/quarkus-run.jar`."
msgstr "并通过 `java -jar target/quarkus-app/quarkus-run.jar` 执行。"

#. type: Plain text
#: _guides/rest-client.adoc
msgid "You can also generate the native executable with:"
msgstr "你也可以通过以下命令生成本地可执行文件:"

#: _guides/rest-client.adoc
#, fuzzy
msgid "Logging traffic"
msgstr "记录流量"

#: _guides/rest-client.adoc
#, fuzzy
msgid ""
"REST Client can log the requests it sends and the responses it receives.\n"
"To enable logging, add the `quarkus.rest-client.logging.scope` property to your `application.properties` and set it to:"
msgstr "REST 客户端可以记录发送的请求和收到的响应。要启用日志记录功能，请在 `application.properties` 中添加 `quarkus.rest-client.logging.scope` 属性并将其设置为："

#: _guides/rest-client.adoc
#, fuzzy
msgid "`request-response` to log the request and response contents, or"
msgstr "`request-response` 记录请求和响应内容，或"

#: _guides/rest-client.adoc
#, fuzzy
msgid "`all` to also enable low level logging of the underlying libraries."
msgstr "`all` 还能对底层库进行低级日志记录。"

#: _guides/rest-client.adoc
#, fuzzy
msgid "As HTTP messages can have large bodies, we limit the amount of body characters logged. The default limit is `100`, you can change it by specifying `quarkus.rest-client.logging.body-limit`."
msgstr "由于 HTTP 报文的正文可能很大，我们限制了记录的正文字符数。默认限制为 `100` ，您可以通过指定 `quarkus.rest-client.logging.body-limit` 进行更改。"

#: _guides/rest-client.adoc
#, fuzzy
msgid "REST Client is logging the traffic with level DEBUG and does not alter logger properties. You may need to adjust your logger configuration to use this feature."
msgstr "REST 客户端以 DEBUG 级别记录流量，不会更改记录仪属性。您可能需要调整记录仪配置才能使用此功能。"

#: _guides/rest-client.adoc
#, fuzzy
msgid "An example logging configuration:"
msgstr "日志配置示例："

#: _guides/rest-client.adoc
#, fuzzy
msgid "REST Client uses a default `ClientLogger` implementation, which can be swapped out for a custom implementation."
msgstr "REST 客户端使用默认的 `ClientLogger` 实现，也可以更换为自定义实现。"

#: _guides/rest-client.adoc
#, fuzzy
msgid "When setting up the client programmatically using the `QuarkusRestClientBuilder`, the `ClientLogger` is set via the `clientLogger` method."
msgstr "当使用 `QuarkusRestClientBuilder` 以编程方式设置客户端时， `ClientLogger` 是通过 `clientLogger` 方法设置的。"

#: _guides/rest-client.adoc
#, fuzzy
msgid "For declarative clients using `@RegisterRestClient`, simply providing a CDI bean that implements `ClientLogger` is enough for that logger to be used by said clients."
msgstr "对于使用 `@RegisterRestClient` 的声明式客户机，只需提供一个实现 `ClientLogger` 的 CDI Bean，就足以让上述客户机使用该日志记录器。"

#: _guides/rest-client.adoc
#, fuzzy
msgid "Mocking the client for tests"
msgstr "模拟客户端进行测试"

#: _guides/rest-client.adoc
#, fuzzy
msgid ""
"If you use a client injected with the `@RestClient` annotation, you can easily mock it for tests.\n"
"You can do it with Mockito's `@InjectMock` or with `QuarkusMock`."
msgstr "如果使用注入了 `@RestClient` 注解的客户端，就可以轻松地模拟它进行测试。您可以使用 Mockito 的 `@InjectMock` 或 `QuarkusMock` 进行模拟。"

#: _guides/rest-client.adoc
#, fuzzy
msgid "This section shows how to replace your client with a mock. If you would like to get a more in-depth understanding of how mocking works in Quarkus, see the blog post on https://quarkus.io/blog/mocking/[Mocking CDI beans]."
msgstr "本节展示了如何用模拟来替换客户端。如果你想更深入地了解 Quarkus 中模拟的工作原理，请参阅博文 \" link:https://quarkus.io/blog/mocking/[模拟 CDI Bean] \"。"

#: _guides/rest-client.adoc
#, fuzzy
msgid "Mocking does not work when using `@QuarkusIntegrationTest`."
msgstr "使用 `@QuarkusIntegrationTest` 时，模拟不起作用。"

#: _guides/rest-client.adoc
#, fuzzy
msgid "Let's assume you have the following client:"
msgstr "假设您有以下客户："

#: _guides/rest-client.adoc
#, fuzzy
msgid "Mocking with InjectMock"
msgstr "使用 InjectMock 进行模拟"

#: _guides/rest-client.adoc
#, fuzzy
msgid "The simplest approach to mock a client for tests is to use Mockito and `@InjectMock`."
msgstr "模拟客户端进行测试的最简单方法是使用 Mockito 和 `@InjectMock` 。"

#: _guides/rest-client.adoc
#, fuzzy
msgid "First, add the following dependency to your application:"
msgstr "首先，在应用程序中添加以下依赖关系："

#: _guides/rest-client.adoc
#, fuzzy
msgid "Then, in your test you can simply use `@InjectMock` to create and inject a mock:"
msgstr "然后，在测试中只需使用 `@InjectMock` 创建并注入一个 mock 即可："

#: _guides/rest-client.adoc
#, fuzzy
msgid "Mocking with QuarkusMock"
msgstr "使用 QuarkusMock 进行模拟"

#: _guides/rest-client.adoc
#, fuzzy
msgid "If Mockito doesn't meet your needs, you can create a mock programmatically using `QuarkusMock`, e.g.:"
msgstr "如果 Mockito 无法满足您的需求，您可以使用 `QuarkusMock` 以编程方式创建一个 mock，例如："

#: _guides/rest-client.adoc
#, fuzzy
msgid "here we use a manually created implementation of the client interface to replace the actual Client"
msgstr "在这里，我们使用手动创建的客户端接口实现来替代实际的客户端"

#: _guides/rest-client.adoc
#, fuzzy
msgid "note that `RestClient.LITERAL` has to be passed as the last argument of the `installMockForType` method"
msgstr "注意 `RestClient.LITERAL` 必须作为 `installMockForType` 方法的最后一个参数传递"

#. type: Title ==
#: _guides/rest-client.adoc
#, fuzzy, no-wrap
msgid "Using a Mock HTTP Server for tests"
msgstr "使用模拟HTTP服务器进行测试"

#: _guides/rest-client.adoc
#, fuzzy
msgid ""
"Setting up a mock HTTP server, against which tests are run, is a common testing pattern.\n"
"Examples of such servers are link:https://wiremock.org/[Wiremock] and link:https://docs.hoverfly.io/projects/hoverfly-java/en/latest/index.html[Hoverfly].\n"
"In this section we'll demonstrate how Wiremock can be leveraged for testing the `ExtensionsService` which was developed above."
msgstr "设置一个模拟 HTTP 服务器，并在该服务器上运行测试，是一种常见的测试模式。这类服务器的例子有 link:https://wiremock.org/[Wiremock] 和 link:https://docs.hoverfly.io/projects/hoverfly-java/en/latest/index.html[Hoverfly] 。在本节中，我们将演示如何利用 Wiremock 测试上文开发的 `ExtensionsService` 。"

#. type: Plain text
#: _guides/rest-client.adoc
#, fuzzy
msgid "First, Wiremock needs to be added as a test dependency. For a Maven project that would happen like so:"
msgstr "首先，Wiremock需要被添加为一个测试依赖项。对于一个Maven项目来说，应该这样做。"

#. type: Plain text
#: _guides/rest-client.adoc
#, fuzzy
msgid "Use a proper Wiremock version. All available versions can be found link:https://search.maven.org/artifact/org.wiremock/wiremock[here]."
msgstr "使用适当的Wiremock版本。所有可用的版本都可以 link:https://search.maven.org/artifact/com.github.tomakehurst/wiremock-jre8[在这里] 找到。"

#: _guides/rest-client.adoc
msgid ""
"In Quarkus tests when some service needs to be started before the Quarkus tests are ran, we utilize the `@io.quarkus.test.common.WithTestResource`\n"
"annotation to specify a `io.quarkus.test.common.QuarkusTestResourceLifecycleManager` which can start the service and supply configuration\n"
"values that Quarkus will use."
msgstr ""

#: _guides/rest-client.adoc
msgid "For more details about `@WithTestResource` refer to  xref:getting-started-testing.adoc#quarkus-test-resource[this part of the documentation]."
msgstr ""

#. type: Plain text
#: _guides/rest-client.adoc
#, fuzzy
msgid "Let's create an implementation of `QuarkusTestResourceLifecycleManager` called `WiremockExtensions` like so:"
msgstr "让我们像这样创建一个名为 `WiremockExtensions` 的 `QuarkusTestResourceLifecycleManager` 的实现。"

#. type: Plain text
#: _guides/rest-client.adoc
#, fuzzy
msgid "Statically importing the methods in the Wiremock package makes it easier to read the test."
msgstr "静态导入Wiremock包中的方法，使得阅读测试更容易。"

#. type: Plain text
#: _guides/rest-client.adoc
#, fuzzy
msgid "The `start` method is invoked by Quarkus before any test is run and returns a `Map` of configuration properties that apply during the test execution."
msgstr " `start` 方法在任何测试运行之前被Quarkus调用，并返回在测试执行期间适用的配置属性 `Map` 。"

#. type: Plain text
#: _guides/rest-client.adoc
#, fuzzy
msgid "Launch Wiremock."
msgstr "启动Wiremock。"

#. type: Plain text
#: _guides/rest-client.adoc
#, fuzzy
msgid "Configure Wiremock to stub the calls to `/extensions?id=io.quarkus:quarkus-rest-client` by returning a specific canned response."
msgstr "配置Wiremock，通过返回一个特定的预制响应来存留对 `/extensions?id=io.quarkus:quarkus-rest-client` 的调用。"

#. type: Plain text
#: _guides/rest-client.adoc
#, fuzzy
msgid "All HTTP calls that have not been stubbed are handled by calling the real service. This is done for demonstration purposes, as it is not something that would usually happen in a real test."
msgstr "所有没有被存根的HTTP调用都通过调用真正的服务来处理。这样做是为了演示，因为它通常不会发生在实际测试中。"

#: _guides/rest-client.adoc
#, fuzzy
msgid ""
"As the `start` method returns configuration that applies for tests, we set the rest-client property that controls the base URL which is used by the implementation\n"
"of `ExtensionsService` to the base URL where Wiremock is listening for incoming requests."
msgstr "由于 `start` 方法返回的是适用于测试的配置，因此我们将控制基础 URL 的 rest-client 属性（该 URL 用于 `ExtensionsService` 的实现）设置为 Wiremock 正在监听传入请求的基础 URL。"

#. type: Plain text
#: _guides/rest-client.adoc
#, fuzzy
msgid "When all tests have finished, shutdown Wiremock."
msgstr "当所有测试完成后，关闭Wiremock。"

#. type: Plain text
#: _guides/rest-client.adoc
#, fuzzy
msgid "The `ExtensionsResourceTest` test class needs to be annotated like so:"
msgstr " `ExtensionsResourceTest` 测试类需要被这样注解。"

#: _guides/rest-client.adoc
#, fuzzy
msgid "Known limitations"
msgstr "已知限制"

#: _guides/rest-client.adoc
#, fuzzy
msgid ""
"While the REST Client extension aims to be a drop-in replacement for the RESTEasy Client extension, there are some differences\n"
"and limitations:"
msgstr "虽然 REST 客户端扩展的目标是成为 RESTEasy 客户端扩展的直接替代品，但也存在一些差异和限制："

#: _guides/rest-client.adoc
#, fuzzy
msgid ""
"the default scope of the client for the new extension is `@ApplicationScoped` while the `quarkus-resteasy-client` defaults to `@Dependent`\n"
"To change this behavior, set the `quarkus.rest-client-reactive.scope` property to the fully qualified scope name."
msgstr "新扩展名的客户端默认作用域是 `@ApplicationScoped` ，而 `quarkus-resteasy-client` 的默认作用域是 `@Dependent` 要改变这种行为，可将 `quarkus.rest-client-reactive.scope` 属性设置为完全限定的作用域名称。"

#: _guides/rest-client.adoc
#, fuzzy
msgid "it is not possible to set `HostnameVerifier` or `SSLContext`"
msgstr "无法设置 `HostnameVerifier` 或 `SSLContext`"

#: _guides/rest-client.adoc
#, fuzzy
msgid "a few things that don't make sense for a non-blocking implementations, such as setting the `ExecutorService`, don't work"
msgstr "一些对非阻塞实现没有意义的功能，如设置 `ExecutorService` ，不起作用。"

#. type: Title ==
#: _guides/rest-client.adoc
#, fuzzy, no-wrap
msgid "Further reading"
msgstr "进一步阅读"

#. type: Plain text
#: _guides/rest-client.adoc
#, fuzzy
msgid "link:https://download.eclipse.org/microprofile/microprofile-rest-client-2.0/microprofile-rest-client-spec-2.0.html[MicroProfile Rest Client specification]"
msgstr "link:https://download.eclipse.org/microprofile/microprofile-rest-client-2.0/microprofile-rest-client-spec-2.0.html[微配置文件休息客户端规范]"
