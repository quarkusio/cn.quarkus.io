msgid ""
msgstr ""
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "TLS registry reference"
msgstr "TLS 注册表参考"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid ""
"The TLS registry is a Quarkus extension centralizing the TLS configuration for the application.\n"
"It allows to define the TLS configuration in a single place and to reference it from multiple places in the application."
msgstr "TLS 注册表是 Quarkus 的一个扩展功能，用于集中管理应用程序的 TLS 配置。它允许在一个地方定义 TLS 配置，并从应用程序中的多个地方进行引用。"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid ""
"The TLS extension should be automatically added to your project as soon as you use a compatible extension.\n"
"For example, if your application uses Quarkus REST, gRPC or reactive routes, the TLS registry is automatically added to your project."
msgstr "一旦你使用了兼容的扩展，TLS 扩展就会自动添加到你的项目中。例如，如果你的应用程序使用了 Quarkus REST、gRPC 或反应式路由，TLS 注册表就会自动添加到你的项目中。"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "Using TLS registry"
msgstr "使用 TLS 注册表"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "To configure a TLS connection, and more specifically the key stores and trust stores, you use the `quarkus.tls.*` properties."
msgstr "要配置 TLS 连接，特别是密钥存储和信任存储，可以使用 `quarkus.tls.*` 属性。"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid ""
"Configuration directly under `quarkus.tls` is the default configuration that will be used by all the TLS connections in the application.\n"
"However, you can also have specific configurations for specific connections by using the `quarkus.tls.<name>.*` properties."
msgstr "`quarkus.tls` 下的配置是默认配置，应用程序中的所有 TLS 连接都将使用。不过，也可以通过 `quarkus.tls.<name>.*` 属性为特定连接设置特定配置。"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "Configure the HTTP server to use https://"
msgstr "配置 HTTP 服务器以使用 https://"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "To configure the HTTP server to use HTTPS, you can use the following configuration:"
msgstr "要将 HTTP 服务器配置为使用 HTTPS，可以使用以下配置："

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "So you a `p12` (PKCS12) key store, use the following configuration:"
msgstr "因此，要使用 `p12` (PKCS12) 密钥存储，请使用以下配置："

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "Instead of the default configuration, you can use a named configuration:"
msgstr "您可以使用命名配置来代替默认配置："

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "Configure a client to use https://"
msgstr "配置客户端使用 https://"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "As an example to illustrate client configuration, we will use a gRPC client:"
msgstr "举例说明客户端配置，我们将使用 gRPC 客户端："

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "Configuring mTLS"
msgstr "配置 mTLS"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid ""
"To configure mTLS, you need to configure both the server and the client.\n"
"Both will receive a key store and a trust store:"
msgstr "要配置 mTLS，需要同时配置服务器和客户端。两者都将接收一个密钥存储区和一个信任存储区："

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "the server key store contains the server certificate and private key"
msgstr "服务器密钥存储包含服务器证书和私钥"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "the client key store contains the client certificate and private key"
msgstr "客户端密钥存储包含客户端证书和私钥"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "the server trust store contains the client certificate (to authenticate the client)"
msgstr "服务器信任存储包含客户证书（用于验证客户身份）"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "the client trust store contains the server certificate (to authenticate the server)"
msgstr "客户端信任存储包含服务器证书（用于验证服务器）"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "Referencing a TLS configuration"
msgstr "引用 TLS 配置"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid ""
"Once you have configured a _named_ configuration using `quarkus.tls.<name>`, you need to reference it.\n"
"This is done using the `tls-configuration-name` property:"
msgstr "使用 `quarkus.tls.<name>` 配置 _命名_ 配置后，需要对其进行引用。这可以通过 `tls-configuration-name` 属性来实现："

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "Configuring TLS"
msgstr "配置 TLS"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid ""
"Configuring TLS is mainly about key stores and trust stores.\n"
"The configuration depends on the format (`pem`, `p12`, `jks`...).\n"
"There are other important properties too.\n"
"This section details the various properties you can use to configure TLS."
msgstr "配置 TLS 主要涉及密钥存储和信任存储。配置取决于格式（ `pem` , `p12` , `jks` ... ）。还有其他一些重要属性。本节将详细介绍用于配置 TLS 的各种属性。"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "Key stores"
msgstr "主要商店"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid ""
"Key stores are used to store the private key and the certificate.\n"
"They are mainly used on the server-side, but can also be used on the client-side when mTLS is used."
msgstr "密钥存储用于存储私钥和证书。它们主要用于服务器端，但在使用 mTLS 时也可用于客户端。"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "PEM key stores"
msgstr "PEM 密钥存储"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid ""
"PEM key stores are composed of a list of pair of two files: the certificate and the private key.\n"
"The certificate file is a `.crt` or `.pem` file, and the private key file is often a `.key` file."
msgstr "PEM 密钥存储由两个文件组成：证书和私钥。证书文件是 `.crt` 或 `.pem` 文件，私钥文件通常是 `.key` 文件。"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "To configure a PEM key store, use the following properties:"
msgstr "要配置 PEM 密钥存储，请使用以下属性："

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid ""
"In general, you will only need one pair of certificate and private key.\n"
"The certificate may contain multiple certificates (a chain), but there should be one private key."
msgstr "一般来说，你只需要一对证书和私人密钥。证书可能包含多个证书（链），但私钥应该只有一个。"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid ""
"When multiple pairs are configured, the selection is done using SNI (Server Name Indication).\n"
"The client will send the server name it wants to connect to, and the server will select the appropriate pair of certificate and private key.\n"
"Make sure xref:./tls-registry-reference.adoc#sni[SNI] is enabled on both the client and server to use this feature."
msgstr "当配置了多个配对时，选择是通过 SNI（服务器名称指示）完成的。客户端将发送要连接的服务器名称，服务器将选择相应的证书和私钥对。要使用此功能，请确保客户端和服务器都启用了 xref:./tls-registry-reference.adoc#sni[SNI] 。"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "When configuring multiple key/cert pairs, the order is following the lexicographical order of the name (`a` and `b` in the previous snippet). So, the first pair is the one with the lowest lexicographical order. You can define the order by using the `quarkus.tls.key-store.pem.order` property, for example: `quarkus.tls.key-store.pem.order=b,c,a`. This is important when using SNI, as the first pair is the default one."
msgstr "配置多个密钥/证书对时，顺序是按照名称的词序排列的（上一个代码段中的 `a` 和 `b` ）。因此，第一个密钥/证书对是具有最低词典顺序的密钥/证书对。您可以使用 `quarkus.tls.key-store.pem.order` 属性定义顺序，例如： `quarkus.tls.key-store.pem.order=b,c,a` 。这一点在使用 SNI 时很重要，因为第一对是默认的。"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "PKCS12 key stores"
msgstr "PKCS12 密钥存储"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid ""
"PKCS12 key stores are a single file containing the certificate and the private key.\n"
"To configure a PKCS12 key store, use the following properties:"
msgstr "PKCS12 密钥存储是包含证书和私钥的单一文件。要配置 PKCS12 密钥存储，请使用以下属性："

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid ""
"`.p12` files are password-protected, so you need to provide the password to open the key store.\n"
"Also, they can include more than one certificate and private key.\n"
"In this case, you can:"
msgstr "`.p12` 文件受密码保护，因此需要提供密码才能打开密钥存储空间。此外，它们可能包含多个证书和私钥。在这种情况下，你可以"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "either provide the alias of the certificate and private key you want to use"
msgstr "或者提供要使用的证书和私人密钥的别名"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "or use SNI to select the appropriate certificate and private key (all keys must use the same password)"
msgstr "或使用 SNI 选择适当的证书和私人密钥（所有密钥必须使用相同的密码）"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "To configure the alias, use the following properties:"
msgstr "要配置别名，请使用以下属性："

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "JKS key stores"
msgstr "JKS 钥匙存放处"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid ""
"JKS key stores are a single file containing the certificate and the private key.\n"
"Note that the JKS format should be avoided as it is less secure than PKCS12.\n"
"To configure a JKS key store, use the following properties:"
msgstr "JKS 密钥存储是一个包含证书和私人密钥的单一文件。请注意，应避免使用 JKS 格式，因为它不如 PKCS12 安全。要配置 JKS 密钥存储，请使用以下属性："

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid ""
"`.jks` files are password-protected, so you need to provide the password to open the key store.\n"
"Also, they can include more than one certificate and private key.\n"
"In this case, you can:"
msgstr "`.jks` 文件受密码保护，因此需要提供密码才能打开密钥存储空间。此外，它们可能包含多个证书和私钥。在这种情况下，你可以"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "SNI"
msgstr "SNI"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid ""
"Server Name Indication (SNI) is a TLS extension that allows a client to specify the hostname it is attempting to connect to during the TLS handshake.\n"
"It enables a server to present different TLS certificates for multiple domains on a single IP address, facilitating secure communication for virtual hosting scenarios."
msgstr "服务器名称指示（SNI）是一种 TLS 扩展，允许客户端在 TLS 握手过程中指定试图连接的主机名。它能让服务器在单个 IP 地址上为多个域提供不同的 TLS 证书，为虚拟主机场景的安全通信提供便利。"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "To enable SNI, use the following property:"
msgstr "要启用 SNI，请使用以下属性："

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "With this setting enabled, the client indicate the server name during the TLS handshake, allowing the server to select the right certificate:"
msgstr "启用此设置后，客户端会在 TLS 握手过程中指明服务器名称，以便服务器选择正确的证书："

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "When configuring the keystore with PEM files, multiple CRT/Key must be given."
msgstr "使用 PEM 文件配置密钥存储时，必须给出多个 CRT/Key。"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "When configuring the keystore with a JKS or a P12 file, it selects one alias based on the SNI hostname. In this case, all the keystore password and alias password must be the same. Do not set the `alias` property in this case."
msgstr "使用 JKS 或 P12 文件配置密钥库时，它会根据 SNI 主机名选择一个别名。在这种情况下，所有密钥库密码和别名密码都必须相同。在这种情况下，请勿设置 `alias` 属性。"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "Credential providers"
msgstr "证书提供者"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "Instead of passing the key store password and alias password in the configuration, you can use a credential provider."
msgstr "您可以使用凭据提供程序，而不是在配置中传递密钥存储密码和别名密码。"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid ""
"A credential provider offers a way to retrieve the key store password and alias password.\n"
"Note that the credential provider is only used if the password / alias password are not set in the configuration."
msgstr "凭据提供程序提供了检索密钥存储密码和别名密码的方法。请注意，只有在配置中未设置密码/别名密码时，才会使用凭据提供程序。"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "To configure a credential provider, use the following properties:"
msgstr "要配置凭证提供程序，请使用以下属性："

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "The credential provider can only be used with PKCS12 and JKS key stores."
msgstr "凭证提供程序只能与 PKCS12 和 JKS 密钥存储一起使用。"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "Trust stores"
msgstr "信托商店"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid ""
"Trust stores are used to store the certificates of the trusted parties.\n"
"They are generally used on the client-side, and on the server-side when mTLS is used."
msgstr "信任存储用于存储受信任方的证书。它们一般用于客户端，在使用 mTLS 时用于服务器端。"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "PEM trust stores"
msgstr "PEM 信托存储"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid ""
"PEM trust stores are composed of a list of `.crt` or `.pem` files.\n"
"Each of them contains a certificate."
msgstr "PEM 信任存储由 `.crt` 或 `.pem` 文件列表组成。每个文件都包含一个证书。"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "To configure a PEM trust store, use the following properties:"
msgstr "要配置 PEM 信任存储，请使用以下属性："

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "PKCS12 trust stores"
msgstr "PKCS12 信托存储"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid ""
"PKCS12 trust stores are a single file containing the certificates.\n"
"When multiple certificates are included, you can use the alias to select the appropriate certificate."
msgstr "PKCS12 信任存储是包含证书的单一文件。当包含多个证书时，可使用别名选择相应的证书。"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "To configure a PKCS12 trust store, use the following properties:"
msgstr "要配置 PKCS12 信任存储，请使用以下属性："

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid ""
"`.p12` files are password-protected, so you need to provide the password to open the trust store.\n"
"However, unlike for key stores, the alias does not require a password (because it's the public certificate and not a private key)."
msgstr "`.p12` 文件受密码保护，因此需要提供密码才能打开信任存储。不过，与密钥存储不同，别名不需要密码（因为它是公共证书而不是私钥）。"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "JKS trust stores"
msgstr "JKS 信托商店"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid ""
"JKS trust stores are a single file containing the certificates.\n"
"When multiple certificates are included, you can use the alias to select the appropriate certificate.\n"
"Note that the JKS format should be avoided as it is less secure than PKCS12."
msgstr "JKS 信任存储是包含证书的单一文件。当包含多个证书时，可使用别名选择相应的证书。请注意，应避免使用 JKS 格式，因为它不如 PKCS12 安全。"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "To configure a JKS trust store, use the following properties:"
msgstr "要配置 JKS 信任存储，请使用以下属性："

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid ""
"`.jks` files are password-protected, so you need to provide the password to open the trust store.\n"
"However, unlike for key stores, the alias does not require a password (because it's the public certificate and not a private key)."
msgstr "`.jks` 文件受密码保护，因此需要提供密码才能打开信任存储。不过，与密钥存储不同，别名不需要密码（因为它是公共证书而不是私钥）。"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "Instead of passing the trust store password in the configuration, you can use a credential provider."
msgstr "您可以使用凭据提供程序，而不是在配置中传递信任存储密码。"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid ""
"A credential provider offers a way to retrieve passwords and other credentials.\n"
"Note that the credential provider is only used if the password is not set in the configuration."
msgstr "凭据提供程序提供了一种检索密码和其他凭据的方法。请注意，只有在配置中未设置密码时，才会使用凭据提供程序。"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "The credential provider can only be used with PKCS12 and JKS trust stores."
msgstr "凭据提供程序只能与 PKCS12 和 JKS 信任存储一起使用。"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "Other properties"
msgstr "其他财产"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "While key stores and trust stores are the most important properties, there are other properties you can use to configure TLS."
msgstr "虽然密钥存储和信任存储是最重要的属性，但你还可以使用其他属性来配置 TLS。"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "while the following examples use the _default_ configuration, you can use the _named_ configuration by prefixing the properties with the name of the configuration."
msgstr "以下示例使用的是 _默认_ 配置，但也可以使用已 _命名的_ 配置，方法是在属性前加上配置名称。"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "Cipher suites"
msgstr "密码套件"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid ""
"The cipher suites are the list of ciphers that can be used during the TLS handshake.\n"
"You can configure the ordered list of enabled cipher suites.\n"
"If not configured, a reasonable default is selected from the built-in ciphers.\n"
"However, when configured, it takes precedence over the default suite defined by the SSL engine in use."
msgstr "密码套件是 TLS 握手过程中可使用的密码列表。您可以配置启用密码套件的有序列表。如果未配置，则会从内置密码中选择一个合理的默认值。但如果配置了，则优先于使用中的 SSL 引擎定义的默认套件。"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "To configure the cipher suites, use the following property:"
msgstr "要配置密码套件，请使用以下属性："

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "TLS protocol versions"
msgstr "TLS 协议版本"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid ""
"The TLS protocol versions are the list of protocols that can be used during the TLS handshake.\n"
"You can configure the ordered list of enabled TLS protocols.\n"
"If not configured , it defaults to `TLSv1.3`, `TLSv1.2`."
msgstr "TLS 协议版本是 TLS 握手过程中可使用的协议列表。您可以配置已启用 TLS 协议的有序列表。如果未配置，则默认为 `TLSv1.3` 、 `TLSv1.2` 。"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "Are supported: `TLSv1`, `TLSv1.1`, `TLSv1.2`, `TLSv1.3`."
msgstr "支持： `TLSv1` , `TLSv1.1` , `TLSv1.2` , `TLSv1.3` 。"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "To only enable `TLSv1.3`, configure the following property:"
msgstr "要只启用 `TLSv1.3` ，请配置以下属性："

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "Handshake timeout"
msgstr "握手超时"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid ""
"When a TLS connection is established, the handshake phase is the first step.\n"
"During this phase, the client and server exchange information to establish the connection, typically the cipher suite, the TLS protocol version, the certification validation and so on."
msgstr "建立 TLS 连接时，第一步是握手阶段。在这一阶段，客户端和服务器交换信息以建立连接，通常包括密码套件、TLS 协议版本、认证验证等。"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "To configure the timeout for the handshake phase, use the following property:"
msgstr "要配置握手阶段的超时，请使用以下属性："

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "ALPN"
msgstr "ALPN"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid ""
"Application-Layer Protocol Negotiation (ALPN) is a TLS extension that allows the client and server during the TLS handshake to negotiate which protocol they will use for communication.\n"
"ALPN enables more efficient communication by allowing the client to indicate its preferred application protocol to the server before the TLS connection is established."
msgstr "应用层协议协商（Application-Layer Protocol Negotiation，ALPN）是 TLS 的扩展，允许客户端和服务器在 TLS 握手过程中协商通信所使用的协议。ALPN 允许客户端在建立 TLS 连接前向服务器表明其首选应用协议，从而提高通信效率。"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "This helps in scenarios such as HTTP/2 where multiple protocols may be available, allowing for faster protocol selection."
msgstr "这有助于在 HTTP/2 等场景中使用多种协议，从而加快协议选择速度。"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid ""
"ALPN is enabled by default.\n"
"To disable it, use the following property:"
msgstr "ALPN 默认已启用。要禁用它，请使用以下属性："

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "Certificate Revocation List (CRL)"
msgstr "证书吊销列表 (CRL)"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid ""
"A Certificate Revocation List (CRL) is a list of certificates that have been revoked by the issuing Certificate Authority (CA) before their scheduled expiration date.\n"
"When a certificate is compromised, no longer needed, or deemed invalid for any reason, the CA adds it to the CRL to inform relying parties not to trust the certificate anymore."
msgstr "证书吊销列表（CRL）是签发证书的证书颁发机构（CA）在预定到期日之前吊销的证书列表。当证书受损、不再需要或因任何原因被视为无效时，CA 会将其添加到 CRL 中，通知依赖方不要再信任该证书。"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid ""
"You can configure the CRL with the list of certificate files you do not trust anymore.\n"
"Two formats are allowed: DER and PKCS#7 (also known as P7B)."
msgstr "您可以将不再信任的证书文件列表配置到 CRL 中。允许使用两种格式：DER 和 PKCS#7（也称为 P7B）。"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "When using the DER format, you must pass DER-encoded CRLs."
msgstr "使用 DER 格式时，必须传递 DER 编码的 CRL。"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "When using the PKCS#7 format, you must pass PKCS#7 `SignedData` object, with the only significant field being `crls`."
msgstr "使用 PKCS#7 格式时，必须传递 PKCS#7 `SignedData` 对象，其中唯一重要的字段是 `crls` 。"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "To configure the CRL, use the following property:"
msgstr "要配置 CRL，请使用以下属性："

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "Trusting all certificates and hostname verification"
msgstr "信任所有证书和主机名验证"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "These two properties should not be used in production."
msgstr "这两个属性不应在生产中使用。"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid ""
"You can configure your TLS connection to trust all certificates and to disable the hostname verification.\n"
"These are two different steps:"
msgstr "您可以将 TLS 连接配置为信任所有证书并禁用主机名验证。这是两个不同的步骤："

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "trusting all certificates ignores the certificate validation, so all certificates are trusted. It is useful for testing with self-signed certificates, but should not be used in production."
msgstr "信任所有证书会忽略证书验证，因此所有证书都是可信的。这对测试自签名证书很有用，但不应在生产中使用。"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "hostname verification is the process of verifying the server's identity. It is useful to prevent man-in-the-middle attacks. It often defaults to `HTTPS` or `LDAPS`."
msgstr "主机名验证是验证服务器身份的过程。它有助于防止中间人攻击。它通常默认为 `HTTPS` 或 `LDAPS` 。"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "To trust all certificates, use the following property:"
msgstr "要信任所有证书，请使用以下属性："

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "To disable the hostname verification, use the following property:"
msgstr "要禁用主机名验证，请使用以下属性："

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "Configuration reference"
msgstr "配置参考"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "The following table lists the supported properties:"
msgstr "下表列出了支持的属性："

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "<span class=\"icon\"><i class=\"fa fa-lock\" title=\"Fixed at build time\"></i></span> Configuration property fixed at build time - All other configuration properties are overridable at runtime <input type=\"search\" id=\"config-search-0\" placeholder=\"FILTER CONFIGURATION\" disabled>"
msgstr "<span class=\"icicon\"><i class=\"fa fa-lock\" title=\"在构建时固定\"></i></span>在构建时固定的配置属性 - 所有其他配置属性都可在运行时重写 <input type=\"search\" id=\"config-search-0\" placeholder=\"FILTER CONFIGURATION\" disabled>"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "The registry API"
msgstr "注册表 API"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "While extensions will automatically use the TLS registry, you can also use the registry API to access the TLS configuration programmatically."
msgstr "虽然扩展会自动使用 TLS 注册表，但你也可以使用注册表 API 以编程方式访问 TLS 配置。"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "To access the TLS configuration, inject the `TlsConfigurationRegistry` bean and gets the TLS configuration by name (or the default one):"
msgstr "要访问 TLS 配置，请注入 `TlsConfigurationRegistry` Bean 并按名称获取 TLS 配置（或默认配置）："

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid ""
"The `TlsConfiguration` object contains the key stores, trust stores, cipher suites, protocols, and other properties.\n"
"It also provides a way to create an `SSLContext` from the configuration."
msgstr "`TlsConfiguration` 对象包含密钥存储、信任存储、密码套件、协议和其他属性。它还提供了从配置中创建 `SSLContext` 的方法。"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "As Vert.x is omnipresent in Quarkus, you can also use the `TlsConfiguration` object to configure the Vert.x client or server such as `KeyCertOptions`, `TrustOptions`, and so on."
msgstr "由于 Vert.x 在 Quarkus 中无处不在，因此也可以使用 `TlsConfiguration` 对象来配置 Vert.x 客户端或服务器，如 `KeyCertOptions` , `TrustOptions` 等。"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "Registering a certificate from an extension"
msgstr "从分机注册证书"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid ""
"This section is only for extension developers.\n"
"An extension can register a certificate in the TLS registry.\n"
"This is useful when an extension needs to provide a certificate to the application or provides a different format."
msgstr "本部分仅供扩展开发人员使用。扩展可以在 TLS 注册表中注册证书。这在扩展需要向应用程序提供证书或提供不同格式的证书时非常有用。"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid ""
"To achieve this, the extension _processor_ must produce a `TlsCertificateBuildItem`.\n"
"A `TlsCertificateBuildItem` is composed of a name and a `CertificateSupplier`."
msgstr "为此，扩展 _处理器_ 必须生成 `TlsCertificateBuildItem` 。 `TlsCertificateBuildItem` 由名称和 `CertificateSupplier` 组成。"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid ""
"The certificate supplier is a runtime object that is generally retrieved using a recorder method.\n"
"Here is an example of a certificate supplier:"
msgstr "证书提供者是一个运行时对象，一般使用记录器方法检索。下面是一个证书提供者的示例："

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "Startup checks"
msgstr "启动检查"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "When the application starts, the TLS registry performs some checks to ensure the configuration is correct:"
msgstr "应用程序启动时，TLS 注册表会执行一些检查，以确保配置正确："

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "the key stores and trust stores are accessible"
msgstr "可访问密钥存储区和信任存储区"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "the aliases are available and accessible in the key stores and trust stores"
msgstr "别名在密钥存储区和信任存储区中可用并可访问"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "the certificates are valid"
msgstr "证书有效"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "the cipher suites and protocols are valid"
msgstr "密码套件和协议有效"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "the CRLs are valid"
msgstr "CRL 有效"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "If any of these checks fail, the application will fail to start."
msgstr "如果其中任何一项检查失败，应用程序将无法启动。"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "Reloading certificates"
msgstr "重装证书"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid ""
"The `TlsConfiguration` obtained from the `TLSConfigurationRegistry` includes a mechanism for reloading certificates.\n"
"The `reload` method refreshes the key stores and trust stores, typically by reloading them from the file system."
msgstr "从 `TLSConfigurationRegistry` 获取的 `TlsConfiguration` 包括重新加载证书的机制。 `reload` 方法刷新密钥存储和信任存储，通常是从文件系统重新加载它们。"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid ""
"The reload operation is not automatic and must be triggered manually.\n"
"Additionally, the `TlsConfiguration` implementation must support reloading (which is the case for the configured certificate)."
msgstr "重载操作不是自动的，必须手动触发。此外， `TlsConfiguration` 实现必须支持重载（配置的证书就是这种情况）。"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid ""
"The `reload` method returns a `boolean` indicating whether the reload was successful.\n"
"A value of `true` means the reload operation was successful, not necessarily that there were updates to the certificates."
msgstr "`reload` 方法返回 `boolean` ，表示重载是否成功。 `true` 表示重载操作成功，但不一定表示证书有更新。"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid ""
"After a `TlsConfiguration` has been reloaded, servers and clients using this configuration may need to perform specific actions to apply the new certificates.\n"
"The recommended approach is to fire a CDI event (`CertificateReloadedEvent`) that servers and clients can listen to and make the necessary changes:"
msgstr "`TlsConfiguration` 重新加载后，使用此配置的服务器和客户端可能需要执行特定操作以应用新证书。建议的方法是触发一个 CDI 事件 ( `CertificateReloadedEvent` )，服务器和客户端可以监听该事件并进行必要的更改："

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "These APIs provide a way to implement custom certificate reloading."
msgstr "这些应用程序接口提供了一种实现自定义证书重载的方法。"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "Periodic reloading"
msgstr "定期重装"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid ""
"The TLS registry does include a built-in mechanism for periodically checking the file system for changes and reloading the certificates.\n"
"You can configure periodic reloading of certificates using properties.\n"
"The `reload-period` property specifies the interval at which certificates are reloaded, and it will emit a `CertificateReloadedEvent`."
msgstr "TLS 注册表确实包含一个内置机制，用于定期检查文件系统的变化并重新加载证书。你可以使用属性配置证书的定期重载。 `reload-period` 属性指定了重新加载证书的时间间隔，它会发出 `CertificateReloadedEvent` 。"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "For each named configuration, you can set a specific reload period:"
msgstr "对于每个已命名的配置，您都可以设置特定的重载周期："

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid ""
"Remember that the impacted server and client may need to listen to the `CertificateReloadedEvent` to apply the new certificates.\n"
"This is automatically done for the Quarkus HTTP server (including the management interface if enabled)."
msgstr "请记住，受影响的服务器和客户端可能需要监听 `CertificateReloadedEvent` 才能应用新证书。Quarkus HTTP 服务器（包括已启用的管理界面）会自动执行此操作。"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "Using Kubernetes secrets or cert-manager"
msgstr "使用 Kubernetes 秘密或证书管理器"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "When running in Kubernetes, you can use Kubernetes secrets to store the key stores and trust stores."
msgstr "在 Kubernetes 中运行时，可以使用 Kubernetes secrets 来存储密钥存储区和信任存储区。"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "Using Kubernetes secrets"
msgstr "使用 Kubernetes 的秘密"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid ""
"To use Kubernetes secrets, you need to create a secret with the key stores and trust stores.\n"
"Let's take the following secret as an example:"
msgstr "要使用 Kubernetes 秘密，你需要用密钥存储区和信任存储区创建一个秘密。让我们以下面的秘密为例："

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "The easiest way to uses these certificates is to mount the secret as a volume in the pod:"
msgstr "使用这些证书的最简单方法是将秘密作为卷挂载到 pod 中："

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "Then, you can configure the TLS registry to use the certificates:"
msgstr "然后，就可以配置 TLS 注册表以使用证书："

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "You can combine this with the periodic reloading to automatically reload the certificates when they change."
msgstr "您可以将此功能与定期重新加载功能相结合，在证书发生变化时自动重新加载证书。"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "Using cert-manager"
msgstr "使用证书管理器"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid ""
"When running in Kubernetes, you can use cert-manager to automatically generate and renew certificates.\n"
"Cert-manager will produce a secret with the key stores and trust stores.\n"
"So, configuring the TLS registry is the same as when using Kubernetes secrets.\n"
"The generated secret uses the following files:"
msgstr "在 Kubernetes 中运行时，可以使用 Cert-manager 自动生成和更新证书。Cert-manager 将与密钥存储区和信任存储区一起生成一个秘密。因此，配置 TLS 注册表的方法与使用 Kubernetes 秘密时相同。生成的秘密使用以下文件："

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "`tls.crt` for the certificate"
msgstr "`tls.crt` 证书"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "`tls.key` for the private key"
msgstr "`tls.key` 的私钥"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "`ca.crt` for the CA certificate (if needed)"
msgstr "`ca.crt` CA 证书（如需要）"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "To handle the renewal, you can use the periodic reloading mechanism:"
msgstr "要处理更新，可以使用定期重新加载机制："

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "Utilizing OpenShift serving certificates"
msgstr "利用 OpenShift 服务证书"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid ""
"When running your application in OpenShift, you can leverage the https://docs.openshift.com/container-platform/4.16/security/certificates/service-serving-certificate.html[OpenShift serving certificates] to automatically generate and renew TLS certificates.\n"
"The Quarkus TLS registry can use these certificates and Certificate Authority (CA) files to handle HTTPS traffic securely and to validate certificates."
msgstr "在 OpenShift 中运行应用程序时，可以利用 link:https://docs.openshift.com/container-platform/4.16/security/certificates/service-serving-certificate.html[OpenShift 服务证书] 自动生成和更新 TLS link:https://docs.openshift.com/container-platform/4.16/security/certificates/service-serving-certificate.html[证书] 。Quarkus TLS 注册表可以使用这些证书和证书颁发机构 (CA) 文件来安全地处理 HTTPS 流量并验证证书。"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "Acquiring a certificate"
msgstr "获取证书"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid ""
"To have OpenShift generate a certificate, you need to annotate an existing _Service_ object.\n"
"The generated certificate will be stored in a secret, which you can then mount in your pod."
msgstr "要让 OpenShift 生成证书，您需要注释现有的 _服务_ 对象。生成的证书将存储在一个密文中，然后您可以将其挂载到 pod 中。"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "Consider the following _Service_ example:"
msgstr "请看下面的 _服务_ 示例："

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "The annotation `service.beta.openshift.io/serving-cert-secret-name` instructs OpenShift to generate a certificate and store it in a secret named `my-tls-secret`. If your service is already running, you can add this annotation with the following command:"
msgstr "注解 `service.beta.openshift.io/serving-cert-secret-name` 指示 OpenShift 生成证书并将其存储在名为 `my-tls-secret` 的密文中。如果您的服务已在运行，可使用以下命令添加此注解："

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "Next, mount the secret in your pod by updating your _Deployment_ configuration to include a volume and mount the secret:"
msgstr "接下来，通过更新 _部署_ 配置在 pod 中加载秘密文件，使其包含卷并加载秘密文件："

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "Define a volume to mount the secret. Use the same name as the secret declared above."
msgstr "定义一个卷来挂载该秘密文件。使用与上面声明的秘密相同的名称。"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "Set up the key store with the paths to the certificate and private key. This can be configured using environment variables or configuration files. Here, we use environment variables. OpenShift serving certificates always create the `tls.crt` and `tls.key` files."
msgstr "用证书和私钥的路径设置密钥存储。可以使用环境变量或配置文件进行配置。在此，我们使用环境变量。OpenShift 服务证书总是创建 `tls.crt` 和 `tls.key` 文件。"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "Mount the secret in the container. Ensure the path matches the one used in the configuration (here `/etc/tls`)."
msgstr "将秘密挂载到容器中。确保路径与配置中使用的路径一致（此处为 `/etc/tls` ）。"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "Configure the port to serve HTTPS."
msgstr "配置端口以提供 HTTPS 服务。"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid ""
"By setting the `quarkus.tls.key-store.pem.acme.cert` and `quarkus.tls.key-store.pem.acme.key` variables (or their environment variable variant as done above), the TLS registry will use the certificate and private key from the secret. This configures the default key store for the Quarkus HTTP server, allowing it to use the certificate.\n"
"For using this certificate in a named configuration, refer to <<referencing-a-tls-configuration>>."
msgstr "通过设置 `quarkus.tls.key-store.pem.acme.cert` 和 `quarkus.tls.key-store.pem.acme.key` 变量（或如上所述的环境变量），TLS 注册表将使用密文中的证书和私钥。这将配置 Quarkus HTTP 服务器的默认密钥存储，允许它使用证书。关于在命名配置中使用该证书，请参阅 <<referencing-a-tls-configuration>> 。"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "Deploy your application, and it will utilize the certificate generated by OpenShift, making the service available over HTTPS."
msgstr "部署应用程序后，它将使用 OpenShift 生成的证书，通过 HTTPS 提供服务。"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "Trusting the Certificate Authority (CA)"
msgstr "信任证书颁发机构 (CA)"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid ""
"Now that your service uses a certificate issued by OpenShift, you might need to configure your client applications to trust this certificate.\n"
"To accomplish this, create a _ConfigMap_ that holds the CA certificate and mount it in the application's pod."
msgstr "既然您的服务使用的是 OpenShift 签发的证书，您可能需要配置客户端应用程序以信任该证书。为此，请创建一个包含 CA 证书的 _ConfigMap_ ，并将其挂载到应用程序的 pod 中。"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "In this example, we'll use a Quarkus REST client, but the same principle applies to any client."
msgstr "在本例中，我们将使用 Quarkus REST 客户端，但同样的原则适用于任何客户端。"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid ""
"First, create a _ConfigMap_ for the CA certificate.\n"
"Start by defining an _empty_ ConfigMap, which will be populated with the CA certificate:"
msgstr "首先，为 CA 证书创建一个 _ConfigMap_ 。首先定义一个 _空的_ ConfigMap，并在其中填入 CA 证书："

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid ""
"The `service.beta.openshift.io/inject-cabundle` annotation is used to inject the CA certificate into the ConfigMap.\n"
"Note that the ConfigMap initially has no data — it is empty.\n"
"During its processing, OpenShift injects the CA certificate into the ConfigMap in the `service-ca.crt` file."
msgstr "`service.beta.openshift.io/inject-cabundle` 注解用于将 CA 证书注入 ConfigMap。请注意，ConfigMap 最初没有数据，是空的。在处理过程中，OpenShift 会将 CA 证书注入 `service-ca.crt` 文件中的 ConfigMap。"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "Next, mount the ConfigMap by adding a volume and mount it in your _Deployment_ configuration:"
msgstr "接下来，通过添加卷来加载 ConfigMap，并将其加载到 _部署_ 配置中："

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "Mount the ConfigMap in the container. Ensure the path matches the one used in the configuration (here `/deployments/tls`)."
msgstr "将 ConfigMap 挂载到容器中。确保路径与配置中使用的路径一致（此处为 `/deployments/tls` ）。"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "Define a volume to mount the ConfigMap and reference the ConfigMap that receives the CA certificate."
msgstr "定义挂载 ConfigMap 的卷，并引用接收 CA 证书的 ConfigMap。"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "Finally, configure the REST client to use this CA certificate. Consider the following REST client interface:"
msgstr "最后，配置 REST 客户端以使用该 CA 证书。请看下面的 REST 客户端界面："

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "Configure the base URI and the configuration key. The name must be in the format `<service-name>.<namespace>.svc`, otherwise the certificate will not be trusted. Ensure to also configure the `configKey`."
msgstr "配置基本 URI 和配置密钥。名称格式必须为 `<service-name>.<namespace>.svc` ，否则证书将不被信任。确保同时配置 `configKey` 。"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "Next, configure the REST client to trust the CA certificate:"
msgstr "接下来，配置 REST 客户端以信任 CA 证书："

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "Configure the `hero` REST client with the TLS configuration named `my-service-tls`."
msgstr "使用名为 `my-service-tls` 的 TLS 配置配置 `hero` REST 客户端。"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "Set up the `my-service-tls` TLS configuration, specifically the trust store with the CA certificate. Ensure the path matches the one used in the Kubernetes _Deployment_ configuration. The file is always named `service-ca.crt`."
msgstr "设置 `my-service-tls` TLS 配置，特别是带有 CA 证书的信任存储。确保路径与 Kubernetes _部署_ 配置中使用的路径一致。文件名始终为 `service-ca.crt` 。"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "Now, the REST client is configured to trust the certificate generated by OpenShift."
msgstr "现在，REST 客户端已配置为信任 OpenShift 生成的证书。"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "Certificate renewal"
msgstr "证书续期"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid ""
"OpenShift automatically renews the certificates it generates.\n"
"When the certificate is renewed, the secret is updated with the new certificate and private key."
msgstr "OpenShift 会自动更新其生成的证书。证书更新时，密钥会用新证书和私钥更新。"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid ""
"To ensure your application uses the new certificate, you can leverage the Quarkus TLS registry's periodic reloading feature.\n"
"By setting the `reload-period` property, the TLS registry will periodically check the key stores and trust stores for changes and reload them if needed:"
msgstr "为确保应用程序使用新证书，可以利用 Quarkus TLS 注册表的定期重载功能。通过设置 `reload-period` 属性，TLS 注册表会定期检查密钥存储区和信任存储区是否有变化，并在需要时重新加载："

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid ""
"You can also implement a custom mechanism to reload the certificates when the secret is updated.\n"
"See <<reloading-certificates>> for more information."
msgstr "您也可以采用自定义机制，在更新密文时重新加载证书。更多信息，请参阅 <<reloading-certificates>> 。"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "Quarkus CLI commands and development CA (Certificate Authority)"
msgstr "Quarkus CLI 命令和开发 CA（证书颁发机构）"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid ""
"The TLS registry provides CLI commands to generate a development CA and trusted certificates.\n"
"This avoids having to use self-signed certificates locally."
msgstr "TLS 注册表提供 CLI 命令，用于生成开发 CA 和可信证书。这就避免了在本地使用自签名证书。"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid ""
"In most cases, you generate the Quarkus Development CA once, and then generate certificates signed by this CA.\n"
"The Quarkus Development CA is a Certificate Authority that can be used to sign certificates locally.\n"
"It is only valid for development purposes and only trusted on the local machine.\n"
"The generated CA is located in `$HOME/.quarkus/quarkus-dev-root-ca.pem`, and installed in the system trust store."
msgstr "在大多数情况下，您只需生成一次 Quarkus 开发 CA，然后生成由该 CA 签名的证书。Quarkus 开发 CA 是一个证书颁发机构，可用于在本地签署证书。它仅对开发目的有效，并且仅在本地计算机上受信任。生成的 CA 位于 `$HOME/.quarkus/quarkus-dev-root-ca.pem` ，并安装在系统信任存储中。"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "CA, signed vs. self-signed certificates"
msgstr "CA、签名证书与自签名证书"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "When developing with TLS, you can use two types of certificates:"
msgstr "使用 TLS 开发时，可以使用两种类型的证书："

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "a self-signed certificate: the certificate is signed by the same entity that uses it. It is not trusted by default. It's generally what we use when we don't have a CA, or don't want to dig too much into TLS. This is not a production setup, and may be used only for development."
msgstr "自签证书：证书由使用该证书的同一实体签署。默认情况下它是不可信的。当我们没有 CA 或不想过多地研究 TLS 时，通常会使用自签名证书。这不是一种生产设置，只能用于开发。"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "a signed certificate: the certificate is signed by a Certificate Authority (CA). The CA is a trusted entity that signs the certificate. The certificate is trusted by default. This is what we use in production."
msgstr "签名证书：证书由证书颁发机构（CA）签名。CA 是签署证书的可信实体。默认情况下，证书是可信的。这就是我们在生产中使用的证书。"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid ""
"We could use self-signed certificate when running application locally, but it's not always convenient.\n"
"Typically, browsers will not trust the certificate, and you will have to import it manually.\n"
"`curl`, `wget`, `httpie` and other tools will also not trust the certificate."
msgstr "在本地运行应用程序时，我们可以使用自签名证书，但这并不总是很方便。通常情况下，浏览器不会信任证书，您必须手动导入证书。 `curl` 此外， `wget` 、 `httpie` 和其他工具也不会信任证书。"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid ""
"To avoid this, we can use a development CA to sign the certificates, and install it into the system trust store.\n"
"Thus, every certificate signed by this CA will be trusted by the system."
msgstr "为了避免这种情况，我们可以使用开发 CA 来签署证书，并将其安装到系统信任存储中。这样，由该 CA 签发的每张证书都会被系统信任。"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "Quarkus makes it easy to generate a development CA and certificates signed by this CA."
msgstr "Quarkus 可以轻松生成开发 CA 和由该 CA 签发的证书。"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "Generate a development CA"
msgstr "生成开发 CA"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid ""
"The development CA is a Certificate Authority that can be used to sign certificates locally.\n"
"Note that the generated CA is only valid for development purposes, and only trusted on the local machine."
msgstr "开发 CA 是一个证书颁发机构，可用于在本地签署证书。请注意，生成的 CA 仅对开发目的有效，且仅在本地计算机上受信任。"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "To generate a development CA, use the following command:"
msgstr "要生成开发 CA，请使用以下命令："

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid ""
"`--install` installs the CA in the system trust store.\n"
"Windows, Mac and Linux (Fedora and Ubuntu) are supported.\n"
"However, depending on your browser, you may need to import the generated CA manually.\n"
"Refer to the browser documentation for more information.\n"
"The generated CA is located in `$HOME/.quarkus/quarkus-dev-root-ca.pem`."
msgstr "`--install` 将 CA 安装到系统信任存储中。支持 Windows、Mac 和 Linux（Fedora 和 Ubuntu）。不过，根据浏览器的不同，您可能需要手动导入生成的 CA。有关详细信息，请参阅浏览器文档。生成的 CA 位于 。 `$HOME/.quarkus/quarkus-dev-root-ca.pem`"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "When installing the certificate, your system may ask for your password to install the certificate in the system trust store, or ask for confirmation in a dialog (on Windows)."
msgstr "安装证书时，系统可能会要求输入密码，以便将证书安装到系统信任存储区，或在对话框中要求确认（在 Windows 系统中）。"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "On Windows, makes sure you run from an elevated terminal (run as administrator) to install the CA in the system trust store."
msgstr "在 Windows 系统中，请确保从高架终端运行（以管理员身份运行），以便在系统信任存储中安装 CA。"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid ""
"`--renew` renews the CA if it already exists.\n"
"When this option is used, you need to re-generate the certificates that were signed by the CA, as the private key is changed.\n"
"Note that if the CA expires, it will automatically be renewed (without passing `--renew`)."
msgstr "`--renew` 更新已存在的 CA。使用该选项时，由于私钥发生变化，需要重新生成由 CA 签发的证书。请注意，如果 CA 过期，它将自动更新（无需通过 ）。 `--renew`"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "`--truststore` also generates a PKCS12 trust store containing the CA certificate."
msgstr "`--truststore` 还会生成一个包含 CA 证书的 PKCS12 信任存储。"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "Generate a trusted (signed) certificate"
msgstr "生成可信（签名）证书"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid ""
"Once you have installed the Quarkus Development CA, you can generate a trusted certificate.\n"
"It will be signed by the Quarkus Development CA, and so trusted by your system."
msgstr "安装 Quarkus 开发 CA 后，就可以生成可信证书。该证书将由 Quarkus 开发 CA 签名，因此会受到系统的信任。"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "This generates a certificate signed by the Quarkus Development CA, and so if properly installed / imported, will be trusted by your system."
msgstr "这将生成由 Quarkus 开发 CA 签发的证书，因此，如果安装/导入正确，您的系统将信任该证书。"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid ""
"The certificate is stored in `./.certs/`.\n"
"Two files are generated:"
msgstr "证书存储在 `./.certs/` 中。生成两个文件："

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "`$NAME-keystore.p12` - contains the private key and the certificate. It's password protected."
msgstr "`$NAME-keystore.p12` - 包含私钥和证书。它受密码保护。"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "`$NAME-truststore.p12` - contains the CA certificate, that you can used as trust store (for test, for instance)."
msgstr "`$NAME-truststore.p12` - 包含 CA 证书，可用作信任存储（例如用于测试）。"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "More options are available:"
msgstr "还有更多选择："

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid ""
"When generating the certificate, a `.env` file is also generated making the Quarkus dev mode aware of these certificates.\n"
"So, then, if you run your application in dev mode, it will use these certificates:"
msgstr "在生成证书时，还会生成一个 `.env` 文件，使 Quarkus 开发模式能识别这些证书。因此，如果在开发模式下运行应用程序，它就会使用这些证书："

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "Now, you can open the Dev UI using HTTPS: `https://localhost:8443/q/dev`, or issue a request using `curl`:"
msgstr "现在，您可以使用 HTTPS 打开开发人员用户界面： `https://localhost:8443/q/dev` 或使用 `curl` 发送请求："

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "If the Quarkus Development CA is not installed, a self-signed certificate is generated."
msgstr "如果未安装 Quarkus 开发 CA，则会生成自签名证书。"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "Generating a self-signed certificate"
msgstr "生成自签名证书"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "Even if the Quarkus Development CA is installed, you can generate a self-signed certificate:"
msgstr "即使安装了 Quarkus 开发 CA，也可以生成自签名证书："

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "This generates a self-signed certificate, not signed by the Quarkus Development CA."
msgstr "这将生成一个自签名证书，并非由 Quarkus 开发 CA 签发。"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "Uninstalling the Quarkus Development CA"
msgstr "卸载 Quarkus 开发 CA"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "Uninstalling the Quarkus Development CA from your system depends on your OS."
msgstr "从系统中卸载 Quarkus Development CA 取决于操作系统。"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "Deleting the CA certificate on Windows"
msgstr "在 Windows 上删除 CA 证书"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "To delete the CA certificate on Windows, use the following commands from a Powershell terminal with administrator rights:"
msgstr "要在 Windows 上删除 CA 证书，请在具有管理员权限的 Powershell 终端上使用以下命令："

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "Replace `$Serial_Number` with the serial number of the CA certificate."
msgstr "将 `$Serial_Number` 替换为 CA 证书的序列号。"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "Deleting the CA certificate on Linux"
msgstr "在 Linux 上删除 CA 证书"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "On Fedora, you can use the following command:"
msgstr "在 Fedora 上，您可以使用以下命令："

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "On Ubuntu, you can use the following command:"
msgstr "在 Ubuntu 上，您可以使用以下命令："

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "Deleting the CA certificate on Mac"
msgstr "在 Mac 上删除 CA 证书"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "On Mac, you can use the following command:"
msgstr "在 Mac 上，您可以使用以下命令："

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "Automatic certificate management with Let's Encrypt"
msgstr "使用 Let's Encrypt 自动管理证书"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "https://letsencrypt.org[Let's Encrypt] is a free, automated certificate authority provided by https://www.abetterinternet.org/[Internet Security Research Group]."
msgstr "link:https://letsencrypt.org[Let's Encrypt] 是 link:https://www.abetterinternet.org/[Internet Security Research Group] 提供的免费自动证书颁发机构。"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "Let's Encrypt uses https://datatracker.ietf.org/doc/html/rfc8555[Automated certificate management environment (ACME) protocol] to support an automatic certificate issuance and renewal. Please read https://letsencrypt.org/docs/[Let's Encrypt documentation] to learn more about Let's Encrypt and ACME."
msgstr "Let's Encrypt 使用 link:https://datatracker.ietf.org/doc/html/rfc8555[自动证书管理环境（ACME）协议] 来支持证书的自动签发和更新。请阅读 Let link:https://letsencrypt.org/docs/['s Encrypt 文档] ，了解有关 Let's Encrypt 和 ACME 的更多信息。"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid ""
"TLS registry project provides a CLI ACME client to issue and renew Let's Encrypt certificates.\n"
"Your application uses TLS registry to resolve ACME protocol challenges."
msgstr "TLS 注册表项目提供了一个用于签发和更新 Let's Encrypt 证书的 CLI ACME 客户端。你的应用程序会使用 TLS 注册表来解决 ACME 协议难题。"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "Follow the steps below to have your Quarkus application prepared and automatically updated with new and renewed Let's Encrypt certificates."
msgstr "请按照以下步骤准备您的 Quarkus 应用程序，并使用新的和更新的 Let's Encrypt 证书进行自动更新。"

#: _guides/tls-registry-reference.adoc
msgid "Prerequisites"
msgstr "先决条件"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid ""
"Make sure that a fully resolvable DNS domain name is available and can be used to access your application.\n"
"This domain name is used for creating a Let's Encrypt account, and supporting Let's Encrypt ACME challenges to prove that you own this domain.\n"
"You can use https://ngrok.com/[Ngrok] to start experimenting with the Quarkus Let's Encrypt ACME feature, see <<lets-encrypt-ngrok>> section below for more information."
msgstr "确保有一个完全可解析的 DNS 域名，并可用于访问你的应用程序。该域名用于创建 Let's Encrypt 账户和支持 Let's Encrypt ACME 挑战，以证明你拥有该域名。您可以使用 link:https://ngrok.com/[Ngrok] 开始试用 Quarkus Let's Encrypt ACME 功能，详情请参见 <<lets-encrypt-ngrok>> 部分。"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "Your Quarkus HTTPS application must use a _build-time_ property to enable a Let's Encrypt ACME challenge route:"
msgstr "您的 Quarkus HTTPS 应用程序必须使用 _构建时_ 属性来启用 Let's Encrypt ACME 挑战路由："

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid ""
"The TLS registry can manage the challenge process from either the main HTTP interface or from the management interface.\n"
"Using a management interface is **strongly** recommended to let Quarkus deal with ACME challenge configuration separately to the main application's deployment and security requirements:"
msgstr "TLS 注册表可以通过 HTTP 主界面或管理界面管理挑战过程。 *强烈建议* 使用管理界面，以便让 Quarkus 在处理 ACME 挑战配置时与主应用程序的部署和安全要求分开："

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "The challenge itself is served from the primary HTTP interface (the one accessible from your DNS domain name)."
msgstr "挑战本身由主 HTTP 接口（可通过 DNS 域名访问的接口）提供。"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "Do not start your application yet."
msgstr "先不要开始申请。"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "Application preparation"
msgstr "申请准备"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "Before you request a Let's Encrypt certificate, you must run TLS registry Let's Encrypt CLI `prepare` command to prepare your application:"
msgstr "在申请 Let's Encrypt 证书之前，必须运行 TLS 注册表 Let's Encrypt CLI `prepare` 命令来准备应用程序："

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "Make sure you run a prepare command in the root directory of your application."
msgstr "确保在应用程序的根目录下运行 prepare 命令。"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "The `prepare` command does the following:"
msgstr "`prepare` 命令执行以下操作："

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "Creates a `.letsencrypt` folder in your application's root directory"
msgstr "在应用程序根目录下创建 `.letsencrypt` 文件夹"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "Creates a self-signed domain certificate and private key for your application configured in the previous <<lets-encrypt-prerequisites>> step to be able to start and accept HTTPS requests."
msgstr "为上一步 <<lets-encrypt-prerequisites>> 中配置的应用程序创建自签名域证书和私钥，以便启动和接受 HTTPS 请求。"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "Create a `.env` configuration file in your application's root directory configure the application to use the self-signed domain certificate and private key (until we get the Let's Encrypt certificate)."
msgstr "在应用程序根目录下创建 `.env` 配置文件，配置应用程序使用自签名域证书和私钥（直到我们获得 Let's Encrypt 证书）。"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "The following snippet shows an example of the generated `.env` file:"
msgstr "下面的代码段显示了生成 `.env` 文件的示例："

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "The `.env` file does not contain the `quarkus.tls.lets-encrypt.enabled` and `quarkus.management.enabled` properties as they are build-time properties requiring a rebuild of the application."
msgstr "`.env` 文件不包含 `quarkus.tls.lets-encrypt.enabled` 和 `quarkus.management.enabled` 属性，因为它们是构建时属性，需要重新构建应用程序。"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "Start your application"
msgstr "开始申请"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "You can start your application:"
msgstr "您可以开始申请："

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "Access your application endpoint using `https://your-domain-name:8443/`, for example, `https://your-domain-name:8443/hello`, accept a self-signed certificate in the browser."
msgstr "使用 `https://your-domain-name:8443/` 访问您的应用程序端点，例如 `https://your-domain-name:8443/hello` 在浏览器中接受自签名证书。"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "Next, keep the application running and request your first Let's Encrypt certificate."
msgstr "接下来，继续运行应用程序，申请第一份 Let's Encrypt 证书。"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "Issue certificate"
msgstr "颁发证书"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "From the application directory, run the `issue-certificate` command to acquire your first Let's Encrypt certificate:"
msgstr "从应用程序目录运行 `issue-certificate` 命令，获取第一份 Let's Encrypt 证书："

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "Set your domain name."
msgstr "设置域名"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "Provide your contact email address that Let's Encrypt can use to contact you in case of any issues with your Let's Encrypt account."
msgstr "提供您的联系电子邮件地址，以便 Let's Encrypt 在您的 Let's Encrypt 账户出现任何问题时与您联系。"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "Set your application management URL which can be used to handle ACME challenges. Use `https://localhost:8443/` if you chose not to enable a management router in the <<lets-encrypt-prerequisites>> step."
msgstr "设置用于处理 ACME 挑战的应用程序管理 URL。使用 `https://localhost:8443/` 如果您在 <<lets-encrypt-prerequisites>> 步骤中选择不启用管理路由器，则使用"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "During this command, the TLS registry CLI checks if the application is prepared to serve the challenge, creates and records Let's Encrypt account information, issues a Let's Encrypt certificate request, and interacts with the Quarkus application to resolve ACME challenges."
msgstr "在此命令中，TLS 注册表 CLI 会检查应用程序是否准备好接受挑战，创建并记录 Let's Encrypt 账户信息，发出 Let's Encrypt 证书请求，并与 Quarkus 应用程序交互以解决 ACME 挑战。"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid ""
"Once the Let's Encrypt certificate chain and private key have been successfully acquired, they are converted to PEM format and copied to your application's `.letsencrypt` folder.\n"
"The TLS registry is informed that a new certificate and private key are ready, and reloads them automatically."
msgstr "一旦成功获取 Let's Encrypt 证书链和私钥，它们就会被转换为 PEM 格式并复制到应用程序的 `.letsencrypt` 文件夹。TLS 注册表会收到新证书和私钥已准备就绪的通知，并自动重新加载。"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid ""
"Now, access your application's endpoint using `https://your-domain-name:8443/` again.\n"
"Confirm in the browser that your domain certificate is now signed by the Let's Encrypt certificate authority."
msgstr "现在，再次使用 `https://your-domain-name:8443/` 再次访问应用程序端点。在浏览器中确认您的域名证书已由 Let's Encrypt 证书授权机构签署。"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid ""
"Note that currently, a Let's Encrypt account is created implicitly by the `issue-certificate` command to make it easy for users to get started with the ACME protocol.\n"
"Support for the Let's Encrypt account management will evolve further."
msgstr "请注意，目前 `issue-certificate` 命令会隐式创建 Let's Encrypt 账户，以方便用户开始使用 ACME 协议。对 Let's Encrypt 账户管理的支持将进一步发展。"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "Renew certificate"
msgstr "更新证书"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "Renewing certificates is similar to issuing the first certificate, but it requires an existing account created during the <<lets-encrypt-issue-certificate>> step."
msgstr "证书续期与签发第一份证书类似，但需要使用在 <<lets-encrypt-issue-certificate>> 步骤中创建的现有账户。"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "Run the following command to renew your Let's Encrypt certificate:"
msgstr "运行以下命令更新 Let's Encrypt 证书："

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "During this command, TLS registry CLI reads a Let's Encrypt account information recorded during the <<lets-encrypt-issue-certificate>> step, issues a Let's Encrypt certificate request, and communicates with a Quarkus application to have ACME challenges resolved."
msgstr "在该命令中，TLS 注册表 CLI 会读取 <<lets-encrypt-issue-certificate>> 步骤中记录的 Let's Encrypt 账户信息，发出 Let's Encrypt 证书请求，并与 Quarkus 应用程序通信，以解决 ACME 挑战。"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid ""
"Once the Let's Encrypt certificate chain and private key have been successfully renewed, they are converted to PEM format and copied to your application's `.letsencrypt` folder.\n"
"TLS registry is informed that a new certificate and private key are ready and it reloads them automatically."
msgstr "Let's Encrypt 证书链和私钥更新成功后，会被转换为 PEM 格式并复制到应用程序的 `.letsencrypt` 文件夹。TLS 注册表会收到新证书和私钥已准备就绪的通知，并自动重新加载。"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "Use NGrok for testing"
msgstr "使用 NGrok 进行测试"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "https://ngrok.com/[Ngrok] can be used to provide a secure HTTPS tunnel to your application running on localhost, and make it easy to test HTTPS based applications."
msgstr "link:https://ngrok.com/[Ngrok] 可用于为运行在本地主机上的应用程序提供安全的 HTTPS 通道，使基于 HTTPS 的应用程序测试变得简单。"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "Using Ngrok provides an easiest option to get started with the Quarkus Let's Encrypt ACME feature."
msgstr "使用 Ngrok 是开始使用 Quarkus Let's Encrypt ACME 功能的最简单选择。"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid ""
"The first thing you have to do with Ngrok is to ask it to reserve a domain.\n"
"You can use https://github.com/quarkiverse/quarkus-ngrok[Quarkiverse NGrok] in devmode, or have it reserved directly in the NGrok dashboard."
msgstr "使用 Ngrok 的第一件事就是要求它预留域名。你可以在开发模式下使用 link:https://github.com/quarkiverse/quarkus-ngrok[Quarkiverse NGrok] ，也可以直接在 NGrok 面板上预订。"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid ""
"Unfortunately, you can't use your NGrok domain to test the Quarkus Let's Encrypt ACME feature immediately.\n"
"This is due to the fact that Ngrok is itself using Let's Encrypt and intercepts ACME challenges which are meant to be handled by the Quarkus application instead."
msgstr "遗憾的是，您无法立即使用 NGrok 域名测试 Quarkus Let's Encrypt ACME 功能。这是由于 Ngrok 本身使用了 Let's Encrypt 并拦截了本应由 Quarkus 应用程序处理的 ACME 挑战。"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "Therefore, you need to remove an NGrok Let's Encrypt certificate policy from your NGrok domain:"
msgstr "因此，您需要从 NGrok 域中删除 NGrok Let's Encrypt 证书策略："

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "`YOUR-RESERVED-DOMAIN-ID` is your reserved domain's id which starts from `rd_`, you can find it in the https://dashboard.ngrok.com/cloud-edge/domains[NGrok dashboard domains section]."
msgstr "`YOUR-RESERVED-DOMAIN-ID` 是您保留的域的 ID，从 开始，您可以在 `rd_` link:https://dashboard.ngrok.com/cloud-edge/domains[NGrok 面板域部分] 找到它。"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "Now, NGrok will forward ACME challenges over HTTP only, therefore you need to start Ngrok like this:"
msgstr "现在，NGrok 只能通过 HTTP 转发 ACME 挑战，因此需要这样启动 Ngrok："

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "where `8080` is the localhost HTTP port that your application is listening on."
msgstr "其中 `8080` 是应用程序正在监听的 localhost HTTP 端口。"

#: _guides/tls-registry-reference.adoc
#, fuzzy
msgid "You can now test the Quarkus Let's Encrypt ACME feature from your local machine."
msgstr "现在你可以在本地机器上测试 Quarkus Let's Encrypt ACME 功能了。"
