# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:52+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/smallrye-graphql-client.adoc:6
#, fuzzy, no-wrap
msgid "SmallRye GraphQL Client"
msgstr "SmallRye GraphQL客户端"

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:15
#, fuzzy
msgid "This guide demonstrates how your Quarkus application can use the GraphQL client library.  The client is implemented by the https://github.com/smallrye/smallrye-graphql/[SmallRye GraphQL] project.  This guide is specifically geared towards the client side, so if you need an introduction to GraphQL in general, first refer to the xref:smallrye-graphql.adoc[SmallRye GraphQL guide], which provides an introduction to the GraphQL query language, general concepts and server-side development."
msgstr "本指南展示了你的Quarkus应用程序如何使用GraphQL客户端库。该客户端是由 link:https://github.com/smallrye/smallrye-graphql/[SmallRye GraphQL] 项目实现的。本指南是专门针对客户端的，所以如果你需要对GraphQL进行一般性的介绍，请先参考 link:smallrye-graphql.html[SmallRye GraphQL指南] ，它提供了对GraphQL查询语言、一般概念和服务器端开发的介绍。"

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:20
#, fuzzy
msgid "The guide will walk you through developing and running a simple application that uses both supported types of GraphQL clients to retrieve data from a remote resource, that being a database related to Star Wars.  It's available at https://graphql.org/swapi-graphql[this webpage] if you want to experiment with it manually.  The web UI allows you to write and execute GraphQL queries against it."
msgstr "该指南将指导你开发和运行一个简单的应用程序，该应用程序使用两种支持的GraphQL客户端从远程资源中检索数据，即与星球大战有关的数据库。如果你想手动实验的话，可以在 link:https://graphql.org/swapi-graphql[这个网页] 上找到它。网页用户界面允许你编写和执行针对它的GraphQL查询。"

#. type: Title ==
#: upstream/_guides/smallrye-graphql-client.adoc:21
#, fuzzy, no-wrap
msgid "Prerequisites"
msgstr "先决条件"

#. type: Title ==
#: upstream/_guides/smallrye-graphql-client.adoc:25
#, fuzzy, no-wrap
msgid "GraphQL client types introduction"
msgstr "GraphQL客户端类型介绍"

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:28
#, fuzzy
msgid "Two types of GraphQL clients are supported."
msgstr "支持两种类型的GraphQL客户端。"

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:34
#, fuzzy
msgid "The *typesafe* client works very much like the MicroProfile REST Client adjusted for calling GraphQL endpoints.  A client instance is basically a proxy that you can call like a regular Java object, but under the hood, the call will be translated to a GraphQL operation. It works with domain classes directly.  Any input and output objects for the operation will be translated to/from their representations in the GraphQL query language."
msgstr " *typesafe* 客户端的工作方式非常类似于MicroProfile REST客户端的调整，用于调用GraphQL端点。客户端实例基本上是一个代理，你可以像普通的Java对象一样调用，但在引擎盖下，调用将被转换为GraphQL操作。它直接与域类一起工作。操作的任何输入和输出对象将被翻译成/从它们在GraphQL查询语言中的表示。"

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:40
#, fuzzy
msgid "The *dynamic* client, on the other hand, works rather like an equivalent of the JAX-RS client from the `javax.ws.rs.client` package. It does not require the domain classes to work, it works with abstract representations of GraphQL documents instead. Documents are built using a domain-specific language (DSL).  The exchanged objects are treated as an abstract `JsonObject`, but, when necessary, it is possible to convert them to concrete model objects (if suitable model classes are available)."
msgstr "另一方面， *动态* 客户端的工作方式相当类似于 `javax.ws.rs.client` 包中的JAX-RS客户端。它不需要领域类来工作，而是用GraphQL文档的抽象表示来工作。文档是使用领域特定语言（DSL）建立的。交换的对象被视为抽象的 `JsonObject` ，但在必要时，可以将它们转换为具体的模型对象（如果有合适的模型类）。"

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:44
#, fuzzy
msgid "The typesafe client can be viewed as a rather high-level and more declarative approach designed for ease of use, whereas the dynamic client is lower-level, more imperative, somewhat more verbose to use, but allows finer grained control over operations and responses."
msgstr "类型安全的客户端可以被看作是一种相当高层次的、更加声明性的方法，旨在便于使用，而动态客户端则是低层次的、更加命令式的，使用起来更加啰嗦，但允许对操作和响应进行更精细的控制。"

#. type: Title ==
#: upstream/_guides/smallrye-graphql-client.adoc:45
#, fuzzy, no-wrap
msgid "Solution"
msgstr "解决方案"

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:49
#, fuzzy
msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can go right to the completed example."
msgstr "我们建议你按照下面几节的说明，一步一步地创建应用程序。然而，你可以直接进入已完成的例子。"

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:51
#, fuzzy
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "克隆 Git 仓库。 `git clone {quickstarts-clone-url}` ，或者下载一个{quickstarts-archive-url}[存档]。"

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:53
#, fuzzy
msgid "The solution is located in the `microprofile-graphql-client-quickstart` {quickstarts-tree-url}/microprofile-graphql-client-quickstart[directory]."
msgstr "该解决方案位于 `microprofile-graphql-client-quickstart` {quickstarts-treeurl}/microprofile-graphql-client-quickstart[目录]中。"

#. type: Title ==
#: upstream/_guides/smallrye-graphql-client.adoc:54
#, fuzzy, no-wrap
msgid "Creating the Maven Project"
msgstr "创建Maven项目"

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:57
#, fuzzy
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "首先，我们需要一个新的项目。用以下命令创建一个新项目。"

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:68
#, fuzzy
msgid "The typesafe GraphQL client depends on REST client, thus we included the `rest-client-reactive` extension in the `extensions` list. You may also switch to the traditional non-reactive `rest-client` if the rest of your application depends on the non-reactive RESTEasy stack (you can't mix reactive and non-reactive RESTEasy).  If you're only going to use the dynamic GraphQL client and don't use RESTEasy in your application, you may leave out the REST client dependency completely.  This command generates a project, importing the `smallrye-graphql-client` extension."
msgstr "typesafe GraphQL客户端依赖于REST客户端，因此我们在 `extensions` 列表中包括了 `rest-client-reactive` 扩展。如果你的应用程序的其他部分依赖于非反应式的RESTEasy栈，你也可以切换到传统的非反应式 `rest-client` （你不能混合使用反应式和非反应式的RESTEasy）。如果你只打算使用动态GraphQL客户端而不在你的应用程序中使用RESTEasy，你可以完全不依赖REST客户端。该命令生成了一个项目，导入了 `smallrye-graphql-client` 扩展。"

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:71
#, fuzzy
msgid "If you already have your Quarkus project configured, you can add the `smallrye-graphql-client` extension to your project by running the following command in your project base directory:"
msgstr "如果你已经配置了你的Quarkus项目，你可以通过在你的项目基础目录下运行以下命令，将 `smallrye-graphql-client` 扩展到你的项目。"

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:76
#, fuzzy
msgid "Again, you may leave out `rest-client-reactive` if you're only going to use the dynamic client."
msgstr "同样，如果你只打算使用动态客户端，你可以不使用 `rest-client-reactive` 。"

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:78
#, fuzzy
msgid "This will add the following to your build file:"
msgstr "这将在你的构建文件中添加以下内容。"

#. type: Block title
#: upstream/_guides/smallrye-graphql-client.adoc:80
#, fuzzy, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: delimited block -
#: upstream/_guides/smallrye-graphql-client.adoc:90
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-smallrye-graphql-client</artifactId>\n"
"</dependency>\n"
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-rest-client-reactive</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_guides/smallrye-graphql-client.adoc:93
#, fuzzy, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: delimited block -
#: upstream/_guides/smallrye-graphql-client.adoc:97
#, no-wrap
msgid ""
"implementation(\"io.quarkus:quarkus-smallrye-graphql-client\")\n"
"implementation(\"io.quarkus:quarkus-rest-client-reactive\")\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/smallrye-graphql-client.adoc:99
#, fuzzy, no-wrap
msgid "The application"
msgstr "申请"

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:105
#, fuzzy
msgid "The application we will build makes use of both types of GraphQL clients. In both cases, they will connect to the Star Wars service at https://graphql.org/swapi-graphql[SWAPI] and query it for a list of Star Wars films, and, for each film, the names of the planets which appear in that film."
msgstr "我们将建立的应用程序使用了两种类型的GraphQL客户端。在这两种情况下，它们都将连接到 link:https://graphql.org/swapi-graphql[SWAPI] 的 \"星球大战 \"服务，并查询 \"星球大战 \"电影的列表，以及每部电影中出现的行星的名称。"

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:107
#, fuzzy
msgid "The corresponding GraphQL query looks like this:"
msgstr "相应的GraphQL查询看起来像这样。"

#. type: delimited block -
#: upstream/_guides/smallrye-graphql-client.adoc:122
#, no-wrap
msgid ""
"{\n"
"  allFilms {\n"
"    films {\n"
"      title\n"
"      planetConnection {\n"
"        planets {\n"
"          name\n"
"        }\n"
"      }\n"
"    }\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:125
#, fuzzy
msgid "You may go to https://graphql.org/swapi-graphql[the webpage] to execute this query manually."
msgstr "你可以到 link:https://graphql.org/swapi-graphql[网页] 上手动执行这个查询。"

#. type: Title ==
#: upstream/_guides/smallrye-graphql-client.adoc:126
#, fuzzy, no-wrap
msgid "Using the Typesafe client"
msgstr "使用Typesafe客户端"

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:133
#, fuzzy
msgid "To use the typesafe client, we need the corresponding model classes that are compatible with the schema. There are two ways to obtain them. First is to use the client generator offered by SmallRye GraphQL, which generates classes from the schema document and a list of queries. This generator is considered highly experimental for now, and is not covered in this example. If interested, refer to the https://github.com/smallrye/smallrye-graphql/tree/main/client/generator[Client Generator] and its documentation."
msgstr "为了使用类型安全客户端，我们需要与模式兼容的相应模型类。有两种方法可以获得它们。首先是使用SmallRye GraphQL提供的客户端生成器，它从模式文件和查询列表中生成类。这个生成器目前被认为是高度实验性的，在这个例子中没有涉及。如果感兴趣，请参考 link:https://github.com/smallrye/smallrye-graphql/tree/main/client/generator[客户端生成器] 及其文档。"

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:138
#, fuzzy
msgid "In this example, we will create a slimmed down version of the model classes manually, with only the fields that we need, and ignore all the stuff that we don't need. We will need the classes for `Film` and `Planet`.  But, the service is also using specific wrappers named `FilmConnection` and `PlanetConnection`, which, for our purpose, will serve just to contain the actual list of `Film` and `Planet` instances, respectively."
msgstr "在这个例子中，我们将手动创建一个精简版的模型类，只包含我们需要的字段，而忽略所有我们不需要的东西。我们将需要 `Film` 和 `Planet` 的类。但是，该服务还使用了名为 `FilmConnection` 和 `PlanetConnection` 的特定包装器，对于我们的目的来说，这些包装器将只是分别包含 `Film` 和 `Planet` 实例的实际列表。"

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:140
#, fuzzy
msgid "Let's create all the model classes and put them into the `org.acme.microprofile.graphql.client.model` package:"
msgstr "让我们创建所有的模型类，并把它们放到 `org.acme.microprofile.graphql.client.model` 包中。"

#. type: delimited block -
#: upstream/_guides/smallrye-graphql-client.adoc:144
#, no-wrap
msgid "public class FilmConnection {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql-client.adoc:146
#, no-wrap
msgid "    private List<Film> films;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql-client.adoc:150
#, no-wrap
msgid ""
"    public List<Film> getFilms() {\n"
"        return films;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql-client.adoc:155
#, no-wrap
msgid ""
"    public void setFilms(List<Film> films) {\n"
"        this.films = films;\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql-client.adoc:157
#, no-wrap
msgid "public class Film {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql-client.adoc:159
#, no-wrap
msgid "    private String title;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql-client.adoc:161
#, no-wrap
msgid "    private PlanetConnection planetConnection;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql-client.adoc:165
#, no-wrap
msgid ""
"    public String getTitle() {\n"
"        return title;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql-client.adoc:169
#, no-wrap
msgid ""
"    public void setTitle(String title) {\n"
"        this.title = title;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql-client.adoc:173
#, no-wrap
msgid ""
"    public PlanetConnection getPlanetConnection() {\n"
"        return planetConnection;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql-client.adoc:178
#, no-wrap
msgid ""
"    public void setPlanetConnection(PlanetConnection planetConnection) {\n"
"        this.planetConnection = planetConnection;\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql-client.adoc:180
#, no-wrap
msgid "public class PlanetConnection {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql-client.adoc:182
#, no-wrap
msgid "    private List<Planet> planets;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql-client.adoc:186
#, no-wrap
msgid ""
"    public List<Planet> getPlanets() {\n"
"        return planets;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql-client.adoc:190
#, no-wrap
msgid ""
"    public void setPlanets(List<Planet> planets) {\n"
"        this.planets = planets;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql-client.adoc:192
#: upstream/_guides/smallrye-graphql-client.adoc:217
#, no-wrap
msgid "}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql-client.adoc:194
#, no-wrap
msgid "public class Planet {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql-client.adoc:196
#, no-wrap
msgid "    private String name;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql-client.adoc:200
#, no-wrap
msgid ""
"    public String getName() {\n"
"        return name;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql-client.adoc:205
#, no-wrap
msgid ""
"    public void setName(String name) {\n"
"        this.name = name;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:209
#, fuzzy
msgid "Now that we have the model classes, we can create the interface that represents the actual set of operations we want to call on the remote GraphQL service."
msgstr "现在我们有了模型类，我们可以创建接口，代表我们想在远程GraphQL服务上调用的实际操作集。"

#. type: delimited block -
#: upstream/_guides/smallrye-graphql-client.adoc:213
#, no-wrap
msgid ""
"@GraphQLClientApi(configKey = \"star-wars-typesafe\")\n"
"public interface StarWarsClientApi {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql-client.adoc:215
#, no-wrap
msgid "    FilmConnection allFilms();\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:223
#, fuzzy
msgid "For simplicity, we're only calling the query named `allFilms`. We named our corresponding method `allFilms` too. If we named the method differently, we would need to annotate it with `@Query(value=\"allFilms\")` to specify the name of the query that should be executed when this method is called."
msgstr "为了简单起见，我们只调用名为 `allFilms` 的查询。我们也将相应的方法命名为 `allFilms` 。如果我们以不同的方式命名这个方法，我们就需要用 `@Query(value=\"allFilms\")` 来注解，以指定调用这个方法时应该执行的查询的名称。"

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:227
#, fuzzy
msgid "The client also needs some configuration, namely at least the URL of the remote service. We can either specify that within the `@GraphQLClientApi` annotation (by setting the `endpoint` parameter), or move this over to the configuration file, `application.properties`:"
msgstr "客户端也需要一些配置，即至少要有远程服务的URL。我们可以在 `@GraphQLClientApi` 注释中指定（通过设置 `endpoint` 参数），或者将其转移到配置文件中， `application.properties` 。"

#. type: delimited block -
#: upstream/_guides/smallrye-graphql-client.adoc:230
#, no-wrap
msgid "quarkus.smallrye-graphql-client.star-wars-typesafe.url=https://swapi-graphql.netlify.app/.netlify/functions/index\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:235
#, fuzzy
msgid "`star-wars-typesafe` is the name of the configured client instance, and corresponds to the `configKey` in the `@GraphQLClientApi` annotation. If you don't want to specify a custom name, you can leave out the `configKey`, and then refer to it by using the fully qualified name of the interface."
msgstr " `star-wars-typesafe` 是配置的客户端实例的名称，与 注释中的 对应。如果你不想指定一个自定义的名字，你可以省略 ，然后用接口的完全合格的名字来指代它。 `@GraphQLClientApi` `configKey` `configKey` "

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:239
#, fuzzy
msgid "Now that we have the client instance properly configured, we need a way to have it perform something when we start the application. For that, we will use a REST endpoint that, when called by a user, obtains the client instance and lets it execute the query."
msgstr "现在我们已经正确地配置了客户端实例，我们需要一种方法来让它在我们启动应用程序时执行一些任务。为此，我们将使用一个REST端点，当被用户调用时，获得客户端实例并让它执行查询。"

#. type: delimited block -
#: upstream/_guides/smallrye-graphql-client.adoc:246
#, no-wrap
msgid ""
"@Path(\"/\")\n"
"public class StarWarsResource {\n"
"    @Inject\n"
"    StarWarsClientApi typesafeClient;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql-client.adoc:255
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/typesafe\")\n"
"    @Produces(MediaType.APPLICATION_JSON)\n"
"    @Blocking\n"
"    public List<Film> getAllFilmsUsingTypesafeClient() {\n"
"        return typesafeClient.allFilms().getFilms();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:260
#, fuzzy
msgid "With this REST endpoint included in your application, you can simply send a GET request to `/typesafe`, and the application will use an injected typesafe client instance to call the remote service, obtain the films and planets, and return the JSON representation of the resulting list."
msgstr "在你的应用程序中包含这个REST端点，你可以简单地发送一个GET请求到 `/typesafe` ，应用程序将使用一个注入的typesafe客户端实例来调用远程服务，获得电影和行星，并返回所得到的列表的JSON表示。"

#. type: Title ==
#: upstream/_guides/smallrye-graphql-client.adoc:261
#, fuzzy, no-wrap
msgid "Using the Dynamic client"
msgstr "使用动态客户端"

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:265
#, fuzzy
msgid "For the dynamic client, the model classes are optional, because we can work with abstract representations of the GraphQL types and documents. The client API interface is not needed at all."
msgstr "对于动态客户端，模型类是可选的，因为我们可以使用GraphQL类型和文档的抽象表示。客户端API接口是完全不需要的。"

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:267
#, fuzzy
msgid "We still need to configure the URL for the client, so let's put this into `application.properties`:"
msgstr "我们仍然需要为客户端配置URL，所以让我们把这个放到 `application.properties` 。"

#. type: delimited block -
#: upstream/_guides/smallrye-graphql-client.adoc:269
#, no-wrap
msgid "quarkus.smallrye-graphql-client.star-wars-dynamic.url=https://swapi-graphql.netlify.app/.netlify/functions/index\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:273
#, fuzzy
msgid "We decided to name the client `star-wars-dynamic`. We will use this name when injecting a dynamic client to properly qualify the injection point."
msgstr "我们决定将客户端命名为 `star-wars-dynamic` 。在注入动态客户端时，我们将使用这个名字来正确限定注入点。"

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:276
#, fuzzy
msgid "If you need to add an authorization header, or any other custom HTTP header (in our case it's not required), this can be done by:"
msgstr "如果你需要添加一个授权头，或任何其他自定义的HTTP头（在我们的案例中，它不是必需的），这可以通过以下方式完成。"

#. type: delimited block -
#: upstream/_guides/smallrye-graphql-client.adoc:278
#, no-wrap
msgid "quarkus.smallrye-graphql-client.star-wars-dynamic.header.HEADER-KEY=HEADER-VALUE\"\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:281
#, fuzzy
msgid "Add this to the `StarWarsResource` created earlier:"
msgstr "将此添加到之前创建的 `StarWarsResource` 。"

#. type: delimited block -
#: upstream/_guides/smallrye-graphql-client.adoc:287
#, no-wrap
msgid ""
"import static io.smallrye.graphql.client.core.Document.document;\n"
"import static io.smallrye.graphql.client.core.Field.field;\n"
"import static io.smallrye.graphql.client.core.Operation.operation;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql-client.adoc:289
#, no-wrap
msgid "// ....\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql-client.adoc:293
#, no-wrap
msgid ""
"@Inject\n"
"@GraphQLClient(\"star-wars-dynamic\")    // <1>\n"
"DynamicGraphQLClient dynamicClient;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql-client.adoc:316
#, no-wrap
msgid ""
"@GET\n"
"@Path(\"/dynamic\")\n"
"@Produces(MediaType.APPLICATION_JSON)\n"
"@Blocking\n"
"public List<Film> getAllFilmsUsingDynamicClient() throws Exception {\n"
"    Document query = document(   // <2>\n"
"        operation(\n"
"            field(\"allFilms\",\n"
"                field(\"films\",\n"
"                    field(\"title\"),\n"
"                    field(\"planetConnection\",\n"
"                        field(\"planets\",\n"
"                            field(\"name\")\n"
"                        )\n"
"                    )\n"
"                )\n"
"            )\n"
"        )\n"
"    );\n"
"    Response response = dynamicClient.executeSync(query);   <3>\n"
"    return response.getObject(FilmConnection.class, \"allFilms\").getFilms();  <4>\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:319
#, fuzzy
msgid "Qualifies the injection point so that we know which named client needs to be injected here."
msgstr "对注入点进行限定，以便我们知道哪个命名的客户需要在此注入。"

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:323
#, fuzzy
msgid "Here we build a document representing the GraphQL query, using the provided DSL language.  We use static imports to make the code easier to read. The DSL is designed in a way that it looks quite similar to writing a GraphQL query as a string."
msgstr "在这里，我们使用所提供的DSL语言，建立一个代表GraphQL查询的文档。我们使用静态导入来使代码更容易阅读。DSL的设计方式与将GraphQL查询写成字符串的方式很相似。"

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:326
#, fuzzy
msgid "Execute the query and block while waiting for the response. There is also an asynchronous variant that returns a `Uni<Response>`."
msgstr "执行查询，并在等待响应时进行阻塞。还有一个异步的变体，返回一个 `Uni<Response>` 。"

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:331
msgid "Here we did the optional step of converting the response to instances of our model classes, because we have the classes available. If you don't have the classes available or don't want to use them, simply calling `response.getData()` would get you a `JsonObject` representing all the returned data."
msgstr ""

#. type: Title ==
#: upstream/_guides/smallrye-graphql-client.adoc:332
#, no-wrap
msgid "Running the application"
msgstr ""

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:335
msgid "Launch the application in dev mode using:"
msgstr ""

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:339
msgid "To execute the queries, you need to send GET requests to our REST endpoint:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql-client.adoc:343
#, no-wrap
msgid ""
"curl -s http://localhost:8080/dynamic # to use the dynamic client\n"
"curl -s http://localhost:8080/typesafe # to use the typesafe client\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:348
msgid "Whether you use dynamic or typesafe, the result should be the same.  If the JSON document is hard to read, you might want to run it through a tool that formats it for better readability by humans, for example by piping the output through `jq`."
msgstr ""

#. type: Title ==
#: upstream/_guides/smallrye-graphql-client.adoc:349
#, no-wrap
msgid "Conclusion"
msgstr ""

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:352
msgid "This example showed how to use both the dynamic and typesafe GraphQL clients to call an external GraphQL service and explained the difference between the client types."
msgstr ""
