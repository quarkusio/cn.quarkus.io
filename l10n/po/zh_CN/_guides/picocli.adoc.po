# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:52+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/picocli.adoc:6
#, fuzzy, no-wrap
msgid "Command Mode with Picocli"
msgstr "使用Picocli的命令模式"

#. type: Plain text
#: upstream/_guides/picocli.adoc:11
#, fuzzy
msgid "https://picocli.info/[Picocli] is an open source tool for creating rich command line applications."
msgstr "link:https://picocli.info/[Picocli] 是一个开源的工具，用于创建丰富的命令行应用程序。"

#. type: Plain text
#: upstream/_guides/picocli.adoc:13
#, fuzzy
msgid "Quarkus provides support for using Picocli. This guide contains examples of `picocli` extension usage."
msgstr "Quarkus提供对使用Picocli的支持。本指南包含 `picocli` 扩展使用的例子。"

#. type: Plain text
#: upstream/_guides/picocli.adoc:15
#, fuzzy
msgid "If you are not familiar with the Quarkus Command Mode, consider reading the xref:command-mode-reference.adoc[Command Mode reference guide] first."
msgstr "如果你不熟悉Quarkus命令模式，可以考虑先阅读 link:command-mode-reference.html[命令模式参考指南] 。"

#. type: Title ==
#: upstream/_guides/picocli.adoc:16
#, fuzzy, no-wrap
msgid "Configuration"
msgstr "配置"

#. type: Plain text
#: upstream/_guides/picocli.adoc:20
#, fuzzy
msgid "Once you have your Quarkus project configured you can add the `picocli` extension to your project by running the following command in your project base directory."
msgstr "一旦你配置好你的Quarkus项目，你就可以通过在你的项目基础目录下运行以下命令，将 `picocli` 扩展到你的项目中。"

#. type: delimited block -
#: upstream/_guides/picocli.adoc:24
#, no-wrap
msgid "./mvnw quarkus:add-extension -Dextensions=\"picocli\"\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/picocli.adoc:27
#, fuzzy
msgid "This will add the following to your `pom.xml`:"
msgstr "这将在你的 `pom.xml` 中添加以下内容。"

#. type: delimited block -
#: upstream/_guides/picocli.adoc:34
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-picocli</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/picocli.adoc:36
#, fuzzy, no-wrap
msgid "Simple command line application"
msgstr "简单的命令行应用"

#. type: Plain text
#: upstream/_guides/picocli.adoc:39
#, fuzzy
msgid "Simple PicocliApplication with only one `Command` can be created as follows:"
msgstr "简单的PicocliApplication只有一个 `Command` ，可以按如下方式创建。"

#. type: delimited block -
#: upstream/_guides/picocli.adoc:43 upstream/_guides/picocli.adoc:103
#: upstream/_guides/picocli.adoc:138 upstream/_guides/picocli.adoc:244
#, no-wrap
msgid "package com.acme.picocli;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/picocli.adoc:45
#, no-wrap
msgid "import picocli.CommandLine;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/picocli.adoc:48
#, no-wrap
msgid ""
"import javax.enterprise.context.Dependent;\n"
"import javax.inject.Inject;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/picocli.adoc:51
#, no-wrap
msgid ""
"@CommandLine.Command // <1>\n"
"public class HelloCommand implements Runnable {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/picocli.adoc:54
#, no-wrap
msgid ""
"    @CommandLine.Option(names = {\"-n\", \"--name\"}, description = \"Who will we greet?\", defaultValue = \"World\")\n"
"    String name;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/picocli.adoc:56
#, no-wrap
msgid "    private final GreetingService greetingService;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/picocli.adoc:60
#, no-wrap
msgid ""
"    public HelloCommand(GreetingService greetingService) { // <2>\n"
"        this.greetingService = greetingService;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/picocli.adoc:66
#, no-wrap
msgid ""
"    @Override\n"
"    public void run() {\n"
"        greetingService.sayHello(name);\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/picocli.adoc:73
#, no-wrap
msgid ""
"@Dependent\n"
"class GreetingService {\n"
"    void sayHello(String name) {\n"
"        System.out.println(\"Hello \" + name + \"!\");\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/picocli.adoc:75
#, fuzzy
msgid "If there is only one class annotated with `picocli.CommandLine.Command` it will be used as entry point to Picocli CommandLine."
msgstr "如果只有一个用 `picocli.CommandLine.Command` 注释的类，它将被用作Picocli CommandLine的入口点。"

#. type: Plain text
#: upstream/_guides/picocli.adoc:76
#, fuzzy
msgid "All classes annotated with `picocli.CommandLine.Command` are registered as CDI beans."
msgstr "所有用 `picocli.CommandLine.Command` 注释的类都被注册为CDI Bean。"

#. type: Plain text
#: upstream/_guides/picocli.adoc:80
#, fuzzy
msgid "Beans with `@CommandLine.Command` should not use proxied scopes (e.g. do not use `@ApplicationScope`)  because Picocli will not be able set field values in such beans. This extension will register classes with `@CommandLine.Command` annotation using `@Depended` scope. If you need to use proxied scope, then annotate setter and not field, for example:"
msgstr "带有 `@CommandLine.Command` 的Bean不应该使用代理作用域（例如不要使用 `@ApplicationScope` ），因为Picocli将无法在这样的Bean中设置字段值。这个扩展将使用 `@Depended` 作用域注册带有 `@CommandLine.Command` 注释的类。如果你需要使用代理作用域，那么请注解setter而不是field，例如。"

#. type: delimited block -
#: upstream/_guides/picocli.adoc:86
#, no-wrap
msgid ""
"@CommandLine.Command\n"
"@ApplicationScoped\n"
"public class EntryCommand {\n"
"    private String name;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/picocli.adoc:91
#, no-wrap
msgid ""
"    @CommandLine.Option(names = \"-n\")\n"
"    public void setName(String name) {\n"
"        this.name = name;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/picocli.adoc:93 upstream/_guides/picocli.adoc:193
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/picocli.adoc:95
#, fuzzy, no-wrap
msgid "Command line application with multiple Commands"
msgstr "具有多条命令的命令行应用程序"

#. type: Plain text
#: upstream/_guides/picocli.adoc:99
#, fuzzy
msgid "When multiple classes have the `picocli.CommandLine.Command` annotation, then one of them needs to be also annotated with `io.quarkus.picocli.runtime.annotations.TopCommand`.  This can be overwritten with the `quarkus.picocli.top-command` property."
msgstr "当多个类都有 `picocli.CommandLine.Command` 注解时，那么其中一个类也需要有 `io.quarkus.picocli.runtime.annotations.TopCommand` 注解。这可以用 `quarkus.picocli.top-command` 属性来覆盖。"

#. type: delimited block -
#: upstream/_guides/picocli.adoc:106
#, no-wrap
msgid ""
"import io.quarkus.picocli.runtime.annotations.TopCommand;\n"
"import picocli.CommandLine;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/picocli.adoc:111
#, no-wrap
msgid ""
"@TopCommand\n"
"@CommandLine.Command(mixinStandardHelpOptions = true, subcommands = {HelloCommand.class, GoodByeCommand.class})\n"
"public class EntryCommand {\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/picocli.adoc:114
#, no-wrap
msgid ""
"@CommandLine.Command(name = \"hello\", description = \"Greet World!\")\n"
"class HelloCommand implements Runnable {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/picocli.adoc:120
#, no-wrap
msgid ""
"    @Override\n"
"    public void run() {\n"
"        System.out.println(\"Hello World!\");\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/picocli.adoc:123
#, no-wrap
msgid ""
"@CommandLine.Command(name = \"goodbye\", description = \"Say goodbye to World!\")\n"
"class GoodByeCommand implements Runnable {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/picocli.adoc:129
#, no-wrap
msgid ""
"    @Override\n"
"    public void run() {\n"
"        System.out.println(\"Goodbye World!\");\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/picocli.adoc:131
#, fuzzy, no-wrap
msgid "Customizing Picocli CommandLine instance"
msgstr "定制Picocli命令行实例"

#. type: Plain text
#: upstream/_guides/picocli.adoc:134
#, fuzzy
msgid "You can customize CommandLine classes used by the `picocli` extension by producing your own bean instance:"
msgstr "你可以通过产生你自己的bean实例来定制由 `picocli` 扩展使用的CommandLine类。"

#. type: delimited block -
#: upstream/_guides/picocli.adoc:142
#, no-wrap
msgid ""
"import io.quarkus.picocli.runtime.PicocliCommandLineFactory;\n"
"import io.quarkus.picocli.runtime.annotations.TopCommand;\n"
"import picocli.CommandLine;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/picocli.adoc:145
#, no-wrap
msgid ""
"import javax.enterprise.context.ApplicationScoped;\n"
"import javax.enterprise.inject.Produces;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/picocli.adoc:151
#, no-wrap
msgid ""
"@TopCommand\n"
"@CommandLine.Command\n"
"public class EntryCommand implements Runnable {\n"
"    @CommandLine.Spec\n"
"    CommandLine.Model.CommandSpec spec;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/picocli.adoc:157
#, no-wrap
msgid ""
"    @Override\n"
"    public void run() {\n"
"        System.out.println(\"My name is: \" + spec.name());\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/picocli.adoc:160
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"class CustomConfiguration {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/picocli.adoc:166
#, no-wrap
msgid ""
"    @Produces\n"
"    CommandLine customCommandLine(PicocliCommandLineFactory factory) { // <1>\n"
"        return factory.create().setCommandName(\"CustomizedName\");\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/picocli.adoc:168
#, fuzzy
msgid "`PicocliCommandLineFactory` will create an instance of CommandLine with `TopCommand` and `CommandLine.IFactory` injected."
msgstr " `PicocliCommandLineFactory` 将创建一个注入了 和 的 CommandLine 实例。 `TopCommand` `CommandLine.IFactory` "

#. type: Title ==
#: upstream/_guides/picocli.adoc:169
#, fuzzy, no-wrap
msgid "Different entry command for each profile"
msgstr "每个配置文件都有不同的输入命令"

#. type: Plain text
#: upstream/_guides/picocli.adoc:172
#, fuzzy
msgid "It is possible to create different entry command for each profile, using `@IfBuildProfile`:"
msgstr "可以为每个配置文件创建不同的条目命令，使用 `@IfBuildProfile` 。"

#. type: delimited block -
#: upstream/_guides/picocli.adoc:177
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class Config {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/picocli.adoc:184
#, no-wrap
msgid ""
"    @Produces\n"
"    @TopCommand\n"
"    @IfBuildProfile(\"dev\")\n"
"    public Object devCommand() {\n"
"        return DevCommand.class; // <1>\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/picocli.adoc:191
#, no-wrap
msgid ""
"    @Produces\n"
"    @TopCommand\n"
"    @IfBuildProfile(\"prod\")\n"
"    public Object prodCommand() {\n"
"        return new ProdCommand(\"Configured by me!\");\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/picocli.adoc:195
#, fuzzy
msgid "You can return instance of `java.lang.Class` here. In such case `CommandLine` will try to instantiate this class using `CommandLine.IFactory`."
msgstr "你可以在这里返回 `java.lang.Class` 的实例。在这种情况下， `CommandLine` 将尝试使用 `CommandLine.IFactory` 来实例化这个类。"

#. type: Title ==
#: upstream/_guides/picocli.adoc:196
#, fuzzy, no-wrap
msgid "Configure CDI Beans with parsed arguments"
msgstr "用解析的参数配置CDI Bean"

#. type: Plain text
#: upstream/_guides/picocli.adoc:201
#, fuzzy
msgid "You can use `Event<CommandLine.ParseResult>` or just `CommandLine.ParseResult` to configure CDI beans based on arguments parsed by Picocli.  This event will be generated in `QuarkusApplication` class created by this extension. If you are providing your own `@QuarkusMain` this event will not be raised.  `CommandLine.ParseResult` is created from default `CommandLine` bean."
msgstr "你可以使用 `Event<CommandLine.ParseResult>` ，或者只使用 `CommandLine.ParseResult` ，根据Picocli解析的参数配置CDI Bean。这个事件将在这个扩展创建的 `QuarkusApplication` 类中产生。如果你提供你自己的 `@QuarkusMain` ，这个事件将不会被引发。 `CommandLine.ParseResult` 是由默认的 `CommandLine` Bean创建的。"

#. type: delimited block -
#: upstream/_guides/picocli.adoc:206
#, no-wrap
msgid ""
"@CommandLine.Command\n"
"public class EntryCommand implements Runnable {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/picocli.adoc:209
#, no-wrap
msgid ""
"    @CommandLine.Option(names = \"-c\", description = \"JDBC connection string\")\n"
"    String connectionString;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/picocli.adoc:212
#, no-wrap
msgid ""
"    @Inject\n"
"    DataSource dataSource;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/picocli.adoc:222
#, no-wrap
msgid ""
"    @Override\n"
"    public void run() {\n"
"        try (Connection c = dataSource.getConnection()) {\n"
"            // Do something\n"
"        } catch (SQLException throwables) {\n"
"            // Handle error\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/picocli.adoc:225
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"class DatasourceConfiguration {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/picocli.adoc:234
#, no-wrap
msgid ""
"    @Produces\n"
"    @ApplicationScoped // <1>\n"
"    DataSource dataSource(CommandLine.ParseResult parseResult) {\n"
"        PGSimpleDataSource ds = new PGSimpleDataSource();\n"
"        ds.setURL(parseResult.matchedOption(\"c\").getValue().toString());\n"
"        return ds;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/picocli.adoc:236
#, fuzzy
msgid "`@ApplicationScoped` used for lazy initialization"
msgstr " `@ApplicationScoped` 用于懒惰的初始化"

#. type: Title ==
#: upstream/_guides/picocli.adoc:237
#, fuzzy, no-wrap
msgid "Providing own QuarkusMain"
msgstr "提供自己的QuarkusMain"

#. type: Plain text
#: upstream/_guides/picocli.adoc:240
#, fuzzy
msgid "You can also provide your own application entry point annotated with `QuarkusMain` (as described in xref:command-mode-reference.adoc[Command Mode reference guide])."
msgstr "你也可以提供你自己的应用程序入口点，用 `QuarkusMain` （如 link:command-mode-reference.html[命令模式参考指南] 所述）来注释。"

#. type: delimited block -
#: upstream/_guides/picocli.adoc:248
#, no-wrap
msgid ""
"import io.quarkus.runtime.QuarkusApplication;\n"
"import io.quarkus.runtime.annotations.QuarkusMain;\n"
"import picocli.CommandLine;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/picocli.adoc:250
#, no-wrap
msgid "import javax.inject.Inject;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/picocli.adoc:256
#, no-wrap
msgid ""
"@QuarkusMain\n"
"@CommandLine.Command(name = \"demo\", mixinStandardHelpOptions = true)\n"
"public class ExampleApp implements Runnable, QuarkusApplication {\n"
"    @Inject\n"
"    CommandLine.IFactory factory; // <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/picocli.adoc:261
#, no-wrap
msgid ""
"    @Override\n"
"    public void run() {\n"
"        // business logic\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/picocli.adoc:267
#, no-wrap
msgid ""
"    @Override\n"
"    public int run(String... args) throws Exception {\n"
"        return new CommandLine(this, factory).execute(args);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/picocli.adoc:269
#, fuzzy
msgid "Quarkus-compatible `CommandLine.IFactory` bean created by `picocli` extension."
msgstr "Quarkus兼容的 `CommandLine.IFactory` bean，由 `picocli` extension创建。"

#. type: Title ==
#: upstream/_guides/picocli.adoc:270
#, fuzzy, no-wrap
msgid "Native mode support"
msgstr "支持本地模式"

#. type: Plain text
#: upstream/_guides/picocli.adoc:273
#, fuzzy
msgid "This extension uses the Quarkus standard build steps mechanism to support GraalVM Native images. In the exceptional case that incompatible changes in a future picocli release cause any issue, the following configuration can be used to fall back to the annotation processor from the picocli project as a temporary workaround:"
msgstr "这个扩展使用Quarkus标准构建步骤机制来支持GraalVM Native图像。在特殊情况下，如果未来的picocli版本中不兼容的变化导致任何问题，以下配置可以用来回退到picocli项目中的注释处理器，作为一个临时的变通。"

#. type: delimited block -
#: upstream/_guides/picocli.adoc:280
#, no-wrap
msgid ""
"<dependency>\n"
"  <groupId>info.picocli</groupId>\n"
"  <artifactId>picocli-codegen</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/picocli.adoc:283
#, fuzzy
msgid "For Gradle, you need to add the following in `dependencies` section of the `build.gradle` file:"
msgstr "对于Gradle，你需要在 `build.gradle` 文件的 `dependencies` 部分添加以下内容。"

#. type: delimited block -
#: upstream/_guides/picocli.adoc:288
#, no-wrap
msgid ""
"annotationProcessor enforcedPlatform(\"${quarkusPlatformGroupId}:${quarkusPlatformArtifactId}:${quarkusPlatformVersion}\")\n"
"annotationProcessor 'info.picocli:picocli-codegen'\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/picocli.adoc:290
#, fuzzy, no-wrap
msgid "Development Mode"
msgstr "发展模式"

#. type: Plain text
#: upstream/_guides/picocli.adoc:293
msgid "In the development mode, i.e. when running `mvn quarkus:dev`, the application is executed and restarted every time the `Space bar` key is pressed. You can also pass arguments to your command line app via the `quarkus.args` system property, e.g. `mvn quarkus:dev -Dquarkus.args='--help'` and `mvn quarkus:dev -Dquarkus.args='-c -w --val 1'`."
msgstr ""

#. type: Title ==
#: upstream/_guides/picocli.adoc:294
#, no-wrap
msgid "Configuration Reference"
msgstr ""
