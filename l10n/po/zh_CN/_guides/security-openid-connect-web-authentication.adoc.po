# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-17 15:04+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/security-openid-connect-web-authentication.adoc:6
#, fuzzy, no-wrap
msgid "Using OpenID Connect (OIDC) to Protect Web Applications using Authorization Code Flow"
msgstr "使用OpenID连接（OIDC）来保护使用授权代码流的Web应用程序"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:12
#, fuzzy
msgid "This guide demonstrates how to use Quarkus OpenID Connect (OIDC) Extension to protect your Quarkus HTTP endpoints using OpenID Connect Authorization Code Flow supported by OpenID Connect compliant Authorization Servers such as https://www.keycloak.org[Keycloak]."
msgstr "本指南演示了如何使用Quarkus OpenID Connect（OIDC）扩展来保护你的Quarkus HTTP端点，使用OpenID Connect兼容的授权服务器如 link:https://www.keycloak.org[Keycloak] 所支持的OpenID Connect授权代码流。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:14
#, fuzzy
msgid "The extension allows to easily authenticate the users of your web application by redirecting them to the OpenID Connect Provider (e.g.: Keycloak) to login and, once the authentication is complete, return them back with the code confirming the successful authentication. The extension will request ID and access tokens from the OpenID Connect Provider using an authorization code grant and verify these tokens in order to authorize an access to the application."
msgstr "该扩展允许通过将用户重定向到OpenID连接供应商（例如：Keycloak）来轻松地验证你的Web应用程序的用户，一旦验证完成，将他们与确认成功认证的代码一起返回。该扩展将从OpenID连接提供者那里请求ID和访问令牌，使用授权码授予，并验证这些令牌，以授权对应用程序的访问。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:16
#, fuzzy
msgid "Please read the xref:security-openid-connect.adoc[Using OpenID Connect to Protect Service Applications] guide if you need to protect your applications using Bearer Token Authorization."
msgstr "如果你需要使用承载令牌授权来保护你的应用程序，请阅读《 link:security-openid-connect.html[使用OpenID Connect保护服务应用程序] 》指南。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:18
#, fuzzy
msgid "Please read the xref:security-openid-connect-multitenancy.adoc[Using OpenID Connect Multi-Tenancy] guide how to support multiple tenants."
msgstr "请阅读《 link:security-openid-connect-multitenancy.html[使用OpenID Connect多] 租户指南》，了解如何支持多租户。"

#. type: Title ==
#: upstream/_guides/security-openid-connect-web-authentication.adoc:19
#, fuzzy, no-wrap
msgid "Quickstart"
msgstr "快速入门"

#. type: Title ===
#: upstream/_guides/security-openid-connect-web-authentication.adoc:21
#, fuzzy, no-wrap
msgid "Prerequisites"
msgstr "先决条件"

#. type: Title ===
#: upstream/_guides/security-openid-connect-web-authentication.adoc:26
#, fuzzy, no-wrap
msgid "Architecture"
msgstr "建筑学"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:29
#, fuzzy
msgid "In this example, we build a very simple web application with a single page:"
msgstr "在这个例子中，我们建立了一个非常简单的网络应用，只有一个页面。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:31
#, fuzzy
msgid "`/index.html`"
msgstr " `/index.html` "

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:33
#, fuzzy
msgid "This page is protected and can only be accessed by authenticated users."
msgstr "这个页面是受保护的，只有通过认证的用户才能访问。"

#. type: Title ===
#: upstream/_guides/security-openid-connect-web-authentication.adoc:34
#, fuzzy, no-wrap
msgid "Solution"
msgstr "解决方案"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:38
#, fuzzy
msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can go right to the completed example."
msgstr "我们建议你按照下面几节的说明，一步一步地创建应用程序。然而，你可以直接进入已完成的例子。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:40
#, fuzzy
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "克隆 Git 仓库。 `git clone {quickstarts-clone-url}` ，或者下载一个{quickstarts-archive-url}[存档]。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:42
#, fuzzy
msgid "The solution is located in the `security-openid-connect-web-authentication-quickstart` {quickstarts-tree-url}/security-openid-connect-web-authentication-quickstart[directory]."
msgstr "该解决方案位于 `security-openid-connect-web-authentication-quickstart` {quickstarts-treeurl}/security-openid-connect-web-authentication-quickstart[目录]中。"

#. type: Title ===
#: upstream/_guides/security-openid-connect-web-authentication.adoc:43
#, fuzzy, no-wrap
msgid "Creating the Maven Project"
msgstr "创建Maven项目"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:46
#, fuzzy
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "首先，我们需要一个新的项目。用以下命令创建一个新项目。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:53
#, fuzzy
msgid "If you already have your Quarkus project configured, you can add the `oidc` extension to your project by running the following command in your project base directory:"
msgstr "如果你已经配置了你的Quarkus项目，你可以通过在你的项目基础目录下运行以下命令，将 `oidc` 扩展到你的项目。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:58
#, fuzzy
msgid "This will add the following to your build file:"
msgstr "这将在你的构建文件中添加以下内容。"

#. type: Block title
#: upstream/_guides/security-openid-connect-web-authentication.adoc:60
#: upstream/_guides/security-openid-connect-web-authentication.adoc:866
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1096
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1129
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1249
#, fuzzy, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:66
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-oidc</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_guides/security-openid-connect-web-authentication.adoc:69
#: upstream/_guides/security-openid-connect-web-authentication.adoc:876
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1117
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1139
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1259
#, fuzzy, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:72
#, no-wrap
msgid "implementation(\"io.quarkus:quarkus-oidc\")\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/security-openid-connect-web-authentication.adoc:74
#, fuzzy, no-wrap
msgid "Writing the application"
msgstr "编写应用程序"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:77
#, fuzzy
msgid "Let's write a simple JAX-RS resource which has all the tokens returned in the authorization code grant response injected:"
msgstr "让我们写一个简单的JAX-RS资源，其中注入了授权码授予响应中返回的所有令牌。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:81
#, no-wrap
msgid "package org.acme.security.openid.connect.web.authentication;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:86
#: upstream/_guides/security-openid-connect-web-authentication.adoc:754
#: upstream/_guides/security-openid-connect-web-authentication.adoc:825
#, no-wrap
msgid ""
"import javax.inject.Inject;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:88
#, no-wrap
msgid "import org.eclipse.microprofile.jwt.JsonWebToken;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:91
#, no-wrap
msgid ""
"import io.quarkus.oidc.IdToken;\n"
"import io.quarkus.oidc.RefreshToken;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:94
#, no-wrap
msgid ""
"@Path(\"/tokens\")\n"
"public class TokenResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:101
#, no-wrap
msgid ""
"    /**\n"
"     * Injection point for the ID Token issued by the OpenID Connect Provider\n"
"     */\n"
"    @Inject\n"
"    @IdToken\n"
"    JsonWebToken idToken;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:107
#, no-wrap
msgid ""
"    /**\n"
"     * Injection point for the Access Token issued by the OpenID Connect Provider\n"
"     */\n"
"    @Inject\n"
"    JsonWebToken accessToken;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:113
#, no-wrap
msgid ""
"    /**\n"
"     * Injection point for the Refresh Token issued by the OpenID Connect Provider\n"
"     */\n"
"    @Inject\n"
"    RefreshToken refreshToken;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:126
#, no-wrap
msgid ""
"    /**\n"
"     * Returns the tokens available to the application. This endpoint exists only for demonstration purposes, you should not\n"
"     * expose these tokens in a real application.\n"
"     *\n"
"     * @return a HTML page containing the tokens available to the application\n"
"     */\n"
"    @GET\n"
"    @Produces(\"text/html\")\n"
"    public String getTokens() {\n"
"        StringBuilder response = new StringBuilder().append(\"<html>\")\n"
"                .append(\"<body>\")\n"
"                .append(\"<ul>\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:128
#, no-wrap
msgid "        Object userName = this.idToken.getClaim(\"preferred_username\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:132
#, no-wrap
msgid ""
"        if (userName != null) {\n"
"            response.append(\"<li>username: \").append(userName.toString()).append(\"</li>\");\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:134
#, no-wrap
msgid "        Object scopes = this.accessToken.getClaim(\"scope\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:138
#, no-wrap
msgid ""
"        if (scopes != null) {\n"
"            response.append(\"<li>scopes: \").append(scopes.toString()).append(\"</li>\");\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:140
#, no-wrap
msgid "        response.append(\"<li>refresh_token: \").append(refreshToken.getToken() != null).append(\"</li>\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:144
#, no-wrap
msgid ""
"        return response.append(\"</ul>\").append(\"</body>\").append(\"</html>\").toString();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:147
#, fuzzy
msgid "This endpoint has ID, access and refresh tokens injected. It returns a `preferred_username` claim from the ID token, a `scope` claim from the access token and also a refresh token availability status."
msgstr "这个端点注入了ID、访问和刷新令牌。它从ID令牌返回一个 `preferred_username` ，从访问令牌返回一个 `scope` ，还返回一个刷新令牌的可用性状态。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:149
#, fuzzy
msgid "Note that you do not have to inject the tokens - it is only required if the endpoint needs to use the ID token to interact with the currently authenticated user or use the access token to access a downstream service on behalf of this user."
msgstr "请注意，你不必注入令牌--只有当端点需要使用ID令牌与当前认证的用户进行交互或使用访问令牌代表该用户访问下游服务时才需要。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:151
#, fuzzy
msgid "Please see <<access_id_and_access_tokens,Access ID and Access Tokens>> section below for more information."
msgstr "更多信息请见下面的 link:#access_id_and_access_tokens[访问ID和访问令牌] 部分。"

#. type: Title ===
#: upstream/_guides/security-openid-connect-web-authentication.adoc:152
#, fuzzy, no-wrap
msgid "Configuring the application"
msgstr "配置应用程序"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:155
#, fuzzy
msgid "The OpenID Connect extension allows you to define the configuration using the `application.properties` file which should be located at the `src/main/resources` directory."
msgstr "OpenID连接扩展允许你使用 `application.properties` 文件来定义配置，该文件应位于 `src/main/resources` 目录中。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:164
#, no-wrap
msgid ""
"quarkus.oidc.auth-server-url=http://localhost:8180/realms/quarkus\n"
"quarkus.oidc.client-id=frontend\n"
"quarkus.oidc.credentials.secret=secret\n"
"quarkus.oidc.application-type=web-app\n"
"quarkus.http.auth.permission.authenticated.paths=/*\n"
"quarkus.http.auth.permission.authenticated.policy=authenticated\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:167
#, fuzzy
msgid "This is the simplest configuration you can have when enabling authentication to your application."
msgstr "这是你在启用你的应用程序的认证时可以拥有的最简单的配置。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:169
#, fuzzy
msgid "The `quarkus.oidc.client-id` property references the `client_id` issued by the OpenID Connect Provider and the `quarkus.oidc.credentials.secret` property sets the client secret."
msgstr " `quarkus.oidc.client-id` 属性引用了OpenID连接提供商发布的 `client_id` ， `quarkus.oidc.credentials.secret` 属性设置了客户秘密。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:171
#, fuzzy
msgid "The `quarkus.oidc.application-type` property is set to `web-app` in order to tell Quarkus that you want to enable the OpenID Connect Authorization Code Flow, so that your users are redirected to the OpenID Connect Provider to authenticate."
msgstr " `quarkus.oidc.application-type` 属性被设置为 `web-app` ，是为了告诉Quarkus你想启用OpenID Connect授权代码流，这样你的用户就会被重定向到OpenID Connect提供商那里进行认证。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:174
#, fuzzy
msgid "For last, the `quarkus.http.auth.permission.authenticated` permission is set to tell Quarkus about the paths you want to protect. In this case, all paths are being protected by a policy that ensures that only `authenticated` users are allowed to access. For more details check xref:security-authorization.adoc[Security Authorization Guide]."
msgstr "最后， `quarkus.http.auth.permission.authenticated` 权限的设置是为了告诉Quarkus你要保护的路径。在这种情况下，所有的路径都被一个策略所保护，确保只有 `authenticated` 的用户可以访问。更多细节请查看 link:security-authorization.html[安全授权指南] 。"

#. type: Title ===
#: upstream/_guides/security-openid-connect-web-authentication.adoc:175
#, fuzzy, no-wrap
msgid "Starting and Configuring the Keycloak Server"
msgstr "启动和配置Keycloak服务器"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:178
#, fuzzy
msgid "To start a Keycloak Server you can use Docker and just run the following command:"
msgstr "要启动Keycloak服务器，你可以使用Docker，只需运行以下命令。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:182
#, no-wrap
msgid "docker run --name keycloak -e KEYCLOAK_ADMIN=admin -e KEYCLOAK_ADMIN_PASSWORD=admin -p 8180:8080 quay.io/keycloak/keycloak:{keycloak.version} start-dev\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:185
#, fuzzy
msgid "where `keycloak.version` should be set to `17.0.0` or higher."
msgstr "其中 `keycloak.version` 应该设置为 `17.0.0` 或更高。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:187
#, fuzzy
msgid "You should be able to access your Keycloak Server at http://localhost:8180[localhost:8180]."
msgstr "你应该能够在 link:http://localhost:8180[localhost:8180] 访问你的Keycloak服务器。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:189
#, fuzzy
msgid "Log in as the `admin` user to access the Keycloak Administration Console. Username should be `admin` and password `admin`."
msgstr "以 `admin` 用户身份登录，访问Keycloak管理控制台。用户名应该是 `admin` ，密码是 `admin` 。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:191
#, fuzzy
msgid "Import the {quickstarts-tree-url}/security-openid-connect-web-authentication-quickstart/config/quarkus-realm.json[realm configuration file] to create a new realm. For more details, see the Keycloak documentation about how to https://www.keycloak.org/docs/latest/server_admin/index.html#_create-realm[create a new realm]."
msgstr "导入{quickstarts-treeurl}/security-openid-connect-web-authentication-quickstart/config/quarkus-realm.json[境界配置文件]来创建一个新境界。更多细节，请参阅Keycloak文档中关于如何 link:https://www.keycloak.org/docs/latest/server_admin/index.html#_create-realm[创建一个新的境] 界。"

#. type: Title ===
#: upstream/_guides/security-openid-connect-web-authentication.adoc:192
#, fuzzy, no-wrap
msgid "Running the Application in Dev and JVM modes"
msgstr "在开发和JVM模式下运行应用程序"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:195
#, fuzzy
msgid "To run the application in a dev mode, use:"
msgstr "要在开发模式下运行应用程序，请使用。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:199
#, fuzzy
msgid "When you're done playing with dev mode you can run it as a standard Java application."
msgstr "当你玩完开发模式后，你可以把它作为一个标准的Java应用程序运行。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:201
#, fuzzy
msgid "First compile it:"
msgstr "首先编译它。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:205
#, fuzzy
msgid "Then run it:"
msgstr "然后运行它。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:209
#, no-wrap
msgid "java -jar target/quarkus-app/quarkus-run.jar\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/security-openid-connect-web-authentication.adoc:211
#, fuzzy, no-wrap
msgid "Running the Application in Native Mode"
msgstr "在本地模式下运行应用程序"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:214
#, fuzzy
msgid "This same demo can be compiled into native code: no modifications required."
msgstr "这个同样的演示可以被编译成本地代码：不需要修改。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:218
#, fuzzy
msgid "This implies that you no longer need to install a JVM on your production environment, as the runtime technology is included in the produced binary, and optimized to run with minimal resource overhead."
msgstr "这意味着你不再需要在你的生产环境中安装JVM，因为运行时技术包含在生产的二进制文件中，并以最小的资源开销优化运行。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:221
#, fuzzy
msgid "Compilation will take a bit longer, so this step is disabled by default; let's build again by enabling the native build:"
msgstr "编译会花一点时间，所以这一步默认是禁用的；让我们通过启用本地构建来再次构建。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:225
#, fuzzy
msgid "After getting a cup of coffee, you'll be able to run this binary directly:"
msgstr "喝完一杯咖啡后，你就可以直接运行这个二进制文件。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:229
#, no-wrap
msgid "./target/security-openid-connect-web-authentication-quickstart-runner\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/security-openid-connect-web-authentication.adoc:231
#, fuzzy, no-wrap
msgid "Testing the Application"
msgstr "测试应用程序"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:234
#, fuzzy
msgid "To test the application, you should open your browser and access the following URL:"
msgstr "为了测试应用程序，你应该打开你的浏览器并访问以下网址。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:236
#, fuzzy
msgid "http://localhost:8080/tokens[http://localhost:8080/tokens]"
msgstr "link:http://localhost:8080/tokens[http://localhost:8080/tokens]"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:238
#, fuzzy
msgid "If everything is working as expected, you should be redirected to the Keycloak server to authenticate."
msgstr "如果一切按预期进行，你应该被重定向到Keycloak服务器进行认证。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:240
#, fuzzy
msgid "In order to authenticate to the application you should type the following credentials when at the Keycloak login page:"
msgstr "为了验证应用程序，你应该在Keycloak的登录页面上输入以下证书。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:242
#, fuzzy
msgid "Username: *alice*"
msgstr "用户名: *alice* "

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:243
#, fuzzy
msgid "Password: *alice*"
msgstr "密码： *alice* "

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:245
#, fuzzy
msgid "After clicking the `Login` button you should be redirected back to the application."
msgstr "点击 `Login` 按钮后，你应该被重新引导到应用程序。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:247
#, fuzzy
msgid "Please also see the <<integration-testing-keycloak-devservices, Dev Services for Keycloak>> section below about writing the integration tests which depend on `Dev Services for Keycloak`."
msgstr "关于编写依赖 `Dev Services for Keycloak` 的集成测试，也请参见下面的 link:#integration-testing-keycloak-devservices[Keycloak的开发服务] 部分。"

#. type: Title ==
#: upstream/_guides/security-openid-connect-web-authentication.adoc:248
#, fuzzy, no-wrap
msgid "Reference Guide"
msgstr "参考指南"

#. type: Title ===
#: upstream/_guides/security-openid-connect-web-authentication.adoc:251
#, fuzzy, no-wrap
msgid "Accessing ID and Access Tokens"
msgstr "访问ID和访问令牌"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:254
#, fuzzy
msgid "OIDC Code Authentication Mechanism acquires three tokens during the authorization code flow: https://openid.net/specs/openid-connect-core-1_0.html#IDToken[IDToken], Access Token and Refresh Token."
msgstr "OIDC代码认证机制在授权代码流程中获得了三个令牌。 link:https://openid.net/specs/openid-connect-core-1_0.html#IDToken[IDToken] , Access Token 和 Refresh Token。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:257
#, fuzzy
msgid "ID Token is always a JWT token and is used to represent a user authentication with the JWT claims.  One can access ID Token claims by injecting `JsonWebToken` with an `IdToken` qualifier:"
msgstr "ID令牌总是一个JWT令牌，用于代表用户对JWT请求的认证。人们可以通过注入带有 `IdToken` 修饰语的 `JsonWebToken` 来访问ID Token索赔。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:264
#, no-wrap
msgid ""
"import javax.inject.Inject;\n"
"import org.eclipse.microprofile.jwt.JsonWebToken;\n"
"import io.quarkus.oidc.IdToken;\n"
"import io.quarkus.security.Authenticated;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:268
#: upstream/_guides/security-openid-connect-web-authentication.adoc:292
#, no-wrap
msgid ""
"@Path(\"/web-app\")\n"
"@Authenticated\n"
"public class ProtectedResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:272
#, no-wrap
msgid ""
"    @Inject\n"
"    @IdToken\n"
"    JsonWebToken idToken;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:278
#, no-wrap
msgid ""
"    @GET\n"
"    public String getUserName() {\n"
"        return idToken.getName();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:281
#, fuzzy
msgid "Access Token is usually used by the OIDC `web-app` application to access other endpoints on behalf of the currently logged in user. The raw access token can be accessed as follows:"
msgstr "访问令牌通常由OIDC `web-app` 应用程序使用，以代表当前登录的用户访问其他端点。原始访问令牌可以按以下方式访问。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:288
#, no-wrap
msgid ""
"import javax.inject.Inject;\n"
"import org.eclipse.microprofile.jwt.JsonWebToken;\n"
"import io.quarkus.oidc.AccessTokenCredential;\n"
"import io.quarkus.security.Authenticated;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:295
#, no-wrap
msgid ""
"    @Inject\n"
"    JsonWebToken accessToken;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:299
#, no-wrap
msgid ""
"    // or\n"
"    // @Inject\n"
"    // AccessTokenCredential accessTokenCredential;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:305
#, no-wrap
msgid ""
"    @GET\n"
"    public String getReservationOnBehalfOfUser() {\n"
"        String rawAccessToken = accessToken.getRawToken();\n"
"        //or\n"
"        //String rawAccessToken = accessTokenCredential.getToken();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:310
#, no-wrap
msgid ""
"        // Use the raw access token to access a remote endpoint\n"
"        return getReservationfromRemoteEndpoint(rawAccesstoken);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:313
#, fuzzy
msgid "Note that `AccessTokenCredential` will have to be used if the Access Token issued to the Quarkus `web-app` application is opaque (binary) and can not be parsed to `JsonWebToken`."
msgstr "请注意，如果发给Quarkus `web-app` 应用程序的访问令牌是不透明的（二进制），不能被解析为 `JsonWebToken` ，则必须使用 `AccessTokenCredential` 。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:315
#, fuzzy
msgid "Injection of the `JsonWebToken` and `AccessTokenCredential` is supported in both `@RequestScoped` and `@ApplicationScoped` contexts."
msgstr "在 `@RequestScoped` 和 `@ApplicationScoped` 上下文中都支持注入 `JsonWebToken` 和 `AccessTokenCredential` 。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:317
#, fuzzy
msgid "RefreshToken is only used to refresh the current ID and access tokens as part of its <<session-management,session management>> process."
msgstr "RefreshToken仅用于刷新当前ID和访问令牌，作为 link:#session-management[其会话管理] 过程的一部分。"

#. type: Title ===
#: upstream/_guides/security-openid-connect-web-authentication.adoc:319
#, fuzzy, no-wrap
msgid "User Info"
msgstr "用户信息"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:322
#, fuzzy
msgid "If IdToken does not provide enough information about the currently authenticated user then you can set a `quarkus.oidc.authentication.user-info-required=true` property for a https://openid.net/specs/openid-connect-core-1_0.html#UserInfo[UserInfo] JSON object from the OIDC userinfo endpoint to be requested."
msgstr "如果IdToken不能提供关于当前认证用户的足够信息，那么你可以从OIDC userinfo端点为 link:https://openid.net/specs/openid-connect-core-1_0.html#UserInfo[UserInfo] JSON对象设置一个 `quarkus.oidc.authentication.user-info-required=true` 属性来请求。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:324
#, fuzzy
msgid "A request will be sent to the OpenID Provider UserInfo endpoint using the access token returned with the authorization code grant response and an `io.quarkus.oidc.UserInfo` (a simple `javax.json.JsonObject` wrapper) object will be created. `io.quarkus.oidc.UserInfo` can be either injected or accessed as a SecurityIdentity `userinfo` attribute."
msgstr "将使用授权码授予响应返回的访问令牌向OpenID提供者UserInfo端点发送请求，并创建一个 `io.quarkus.oidc.UserInfo` （一个简单的 `javax.json.JsonObject` 包装器）对象。 `io.quarkus.oidc.UserInfo` ，可以注入或作为SecurityIdentity `userinfo` 属性访问。"

#. type: Title ===
#: upstream/_guides/security-openid-connect-web-authentication.adoc:326
#, fuzzy, no-wrap
msgid "Configuration Metadata"
msgstr "配置元数据"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:329
#, fuzzy
msgid "The current tenant's discovered link:https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata[OpenID Connect Configuration Metadata] is represented by `io.quarkus.oidc.OidcConfigurationMetadata` and can be either injected or accessed as a `SecurityIdentity` `configuration-metadata` attribute."
msgstr "当前租户发现的 link:https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata[OpenID Connect配置元数据] 由 `io.quarkus.oidc.OidcConfigurationMetadata` 表示，可以作为 `SecurityIdentity` `configuration-metadata` 属性注入或访问。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:331
#, fuzzy
msgid "The default tenant's `OidcConfigurationMetadata` is injected if the endpoint is public."
msgstr "如果端点是公开的，则注入默认租户的 `OidcConfigurationMetadata` 。"

#. type: Title ===
#: upstream/_guides/security-openid-connect-web-authentication.adoc:333
#, fuzzy, no-wrap
msgid "Token Claims And SecurityIdentity Roles"
msgstr "Token Claims 和 SecurityIdentity Roles"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:336
#, fuzzy
msgid "The way the roles are mapped to the SecurityIdentity roles from the verified tokens is identical to how it is done for the xref:security-openid-connect.adoc#token-claims-and-securityidentity-roles[bearer tokens] with the only difference being is that https://openid.net/specs/openid-connect-core-1_0.html#IDToken[ID Token] is used as a source of the roles by default."
msgstr "角色从验证过的令牌映射到SecurityIdentity角色的方式与 link:security-openid-connect.html#token-claims-and-securityidentity-roles[不记名] 令牌的方式相同，唯一的区别是 link:https://openid.net/specs/openid-connect-core-1_0.html#IDToken[ID令牌] 被默认作为角色的来源。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:338
#, fuzzy
msgid "Note if you use Keycloak then you should set a Microprofile JWT client scope for ID token to contain a `groups` claim, please see the https://www.keycloak.org/docs/latest/server_admin/#protocol[Keycloak Server Administration Guide] for more information."
msgstr "注意，如果你使用Keycloak，那么你应该为ID令牌设置一个Microprofile JWT客户端范围，以包含一个 `groups` ，更多信息请参见 link:https://www.keycloak.org/docs/latest/server_admin/#protocol[Keycloak服务器管理指南] 。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:340
#, fuzzy
msgid "If only the access token contains the roles and this access token is not meant to be propagated to the downstream endpoints then set `quarkus.oidc.roles.source=accesstoken`."
msgstr "如果只有访问令牌包含角色，并且该访问令牌不打算传播到下游端点，那么设置 `quarkus.oidc.roles.source=accesstoken` 。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:342
#, fuzzy
msgid "If UserInfo is the source of the roles then set `quarkus.oidc.authentication.user-info-required=true` and `quarkus.oidc.roles.source=userinfo`, and if needed, `quarkus.oidc.roles.role-claim-path`."
msgstr "如果UserInfo是角色的来源，那么设置 `quarkus.oidc.authentication.user-info-required=true` 和 `quarkus.oidc.roles.source=userinfo` ，如果需要的话，设置 `quarkus.oidc.roles.role-claim-path` 。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:344
#, fuzzy
msgid "Additionally a custom `SecurityIdentityAugmentor` can also be used to add the roles as documented xref:security.adoc#security-identity-customization[here]."
msgstr "此外，一个自定义的 `SecurityIdentityAugmentor` ，也可以用来添加角色， link:security.html#security-identity-customization[这里] 有记录。"

#. type: Title ===
#: upstream/_guides/security-openid-connect-web-authentication.adoc:346
#, fuzzy, no-wrap
msgid "Token Verification And Introspection"
msgstr "代币验证和反省"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:349
#, fuzzy
msgid "Please see xref:security-openid-connect.adoc#token-verification-introspection[Token Verification And Introspection] for details about how the tokens are verified and introspected."
msgstr "关于如何验证和反省代币的细节，请参见 link:security-openid-connect.html#token-verification-introspection[代币验证] 和反省。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:351
#, fuzzy
msgid "Note that in case of `web-app` applications only `IdToken` is verified by default since the access token is not used by default to access the current Quarkus `web-app` endpoint and instead meant to be propagated to the services expecting this access token, for example, to the OpenID Connect Provider's UserInfo endpoint, etc. However if you expect the access token to contain the roles required to access the current Quarkus endpoint (`quarkus.oidc.roles.source=accesstoken`) then it will also be verified."
msgstr "请注意，在 `web-app` 应用程序中，默认情况下只有 `IdToken` 被验证，因为访问令牌默认不用于访问当前的Quarkus `web-app` 端点，而是用于传播到期望该访问令牌的服务，例如，传播到OpenID Connect Provider的UserInfo端点，等等。然而，如果你期望访问令牌包含访问当前Quarkus端点（ `quarkus.oidc.roles.source=accesstoken` ）所需的角色，那么它也将被验证。"

#. type: Title ===
#: upstream/_guides/security-openid-connect-web-authentication.adoc:353
#, fuzzy, no-wrap
msgid "Token Introspection and UserInfo Cache"
msgstr "Token自省和UserInfo Cache"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:356
#, fuzzy
msgid "Code flow access tokens are not introspected unless they are expected to be the source of roles but will be used to get `UserInfo`. So there will be one or two remote calls with the code flow access token, if the token introspection and/or `UserInfo` are required."
msgstr "代码流访问令牌不被反省，除非它们被期望成为角色的来源，但将被用来获取 `UserInfo` 。因此，如果需要令牌反省和/或 `UserInfo` ，将会有一到两个带有代码流访问令牌的远程调用。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:358
#, fuzzy
msgid "Please see xref:security-openid-connect.adoc#token-introspection-userinfo-cache[Token Introspection and UserInfo cache] for more information about using a default token cache or registering a custom cache implementation."
msgstr "请参阅 link:security-openid-connect.html#token-introspection-userinfo-cache[Token Introspection和UserInfo cache] ，了解更多关于使用默认token cache或注册自定义cache实现的信息。"

#. type: Title ===
#: upstream/_guides/security-openid-connect-web-authentication.adoc:360
#, fuzzy, no-wrap
msgid "JSON Web Token Claim Verification"
msgstr "JSON网络令牌索赔验证"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:364
#, fuzzy
msgid "Please see xref:security-openid-connect.adoc#jwt-claim-verification[JSON Web Token Claim verification] section about the claim verification, including the `iss` (issuer) claim.  It applies to ID tokens but also to access tokens in a JWT format if the `web-app` application has requested the access token verification."
msgstr "请参阅 link:security-openid-connect.html#jwt-claim-verification[JSON网络令牌声称验证] 部分，关于声称验证，包括 `iss` （发行者）声称。它适用于ID令牌，但也适用于JWT格式的访问令牌，如果 `web-app` 应用程序已要求访问令牌验证。"

#. type: Title ===
#: upstream/_guides/security-openid-connect-web-authentication.adoc:365
#, fuzzy, no-wrap
msgid "Redirection"
msgstr "重新定向"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:368
#, fuzzy
msgid "When the user is redirected to the OpenID Connect Provider to authenticate, the redirect URL includes a `redirect_uri` query parameter which indicates to the Provider where the user has to be redirected to once the authentication has been completed."
msgstr "当用户被重定向到OpenID Connect提供商进行认证时，重定向URL包括一个 `redirect_uri` 查询参数，该参数向提供商表明一旦认证完成，用户必须被重定向到哪里。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:370
#, fuzzy
msgid "Quarkus will set this parameter to the current request URL by default. For example, if the user is trying to access a Quarkus service endpoint at `http://localhost:8080/service/1` then the `redirect_uri` parameter will be set to `http://localhost:8080/service/1`. Similarly, if the request URL is `http://localhost:8080/service/2` then the `redirect_uri` parameter will be set to `http://localhost:8080/service/2`, etc."
msgstr "Quarkus将默认把这个参数设置为当前的请求URL。例如，如果用户试图访问Quarkus的服务端点在 `<a href=\"http://localhost:8080/service/1\" class=\"bare\">http://localhost:8080/service/1</a>` 那么 `redirect_uri` 参数将被设置为 `<a href=\"http://localhost:8080/service/1\" class=\"bare\">http://localhost:8080/service/1</a>` .同样的，如果请求的URL是 `<a href=\"http://localhost:8080/service/2\" class=\"bare\">http://localhost:8080/service/2</a>` 那么 `redirect_uri` 参数将被设置为 `<a href=\"http://localhost:8080/service/2\" class=\"bare\">http://localhost:8080/service/2</a>` ，等等。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:373
#, fuzzy
msgid "OpenID Connect Providers may be configured to require the `redirect_uri` parameter to have the same value (eg. `http://localhost:8080/service/callback`) for all the redirect URLs.  In such cases a `quarkus.oidc.authentication.redirect-path` property has to be set, for example, `quarkus.oidc.authentication.redirect-path=/service/callback`, and Quarkus will set the `redirect_uri` parameter to an absolute URL such as `http://localhost:8080/service/callback` which will be the same regardless of the current request URL."
msgstr "OpenID连接供应商可以被配置为要求 `redirect_uri` 参数具有相同的值（例如。 `<a href=\"http://localhost:8080/service/callback\" class=\"bare\">http://localhost:8080/service/callback</a>` ) 为所有的重定向URL。在这种情况下，必须设置一个 `quarkus.oidc.authentication.redirect-path` 属性，例如， `quarkus.oidc.authentication.redirect-path=/service/callback` ，Quarkus将把 `redirect_uri` 参数设置为一个绝对的URL，如 `<a href=\"http://localhost:8080/service/callback\" class=\"bare\">http://localhost:8080/service/callback</a>` 无论当前请求的URL是什么，它都将是相同的。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:375
#, fuzzy
msgid "If `quarkus.oidc.authentication.redirect-path` is set but the original request URL has to be restored after the user has been redirected back to a callback URL such as `http://localhost:8080/service/callback` then a `quarkus.oidc.authentication.restore-path-after-redirect` property has to be set to `true` which will restore the request URL such as `http://localhost:8080/service/1`, etc."
msgstr "如果 `quarkus.oidc.authentication.redirect-path` ，但在用户被重定向到一个回调URL后，必须恢复原来的请求URL，如 `<a href=\"http://localhost:8080/service/callback\" class=\"bare\">http://localhost:8080/service/callback</a>` 那么 `quarkus.oidc.authentication.restore-path-after-redirect` 属性必须被设置为 `true` ，这将恢复请求的URL，如 `<a href=\"http://localhost:8080/service/1\" class=\"bare\">http://localhost:8080/service/1</a>` ，等等。"

#. type: Title ===
#: upstream/_guides/security-openid-connect-web-authentication.adoc:377
#, fuzzy, no-wrap
msgid "Dealing with Cookies"
msgstr "对付Cookies"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:380
#, fuzzy
msgid "The OIDC adapter uses cookies to keep the session, code flow and post logout state."
msgstr "OIDC适配器使用cookies来保持会话、代码流和注销后的状态。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:382
#, fuzzy
msgid "`quarkus.oidc.authentication.cookie-path` property is used to ensure the cookies are visible especially when you access the protected resources with overlapping or different roots, for example:"
msgstr " `quarkus.oidc.authentication.cookie-path` 属性用于确保cookies的可见性，特别是当你用重叠的或不同的根访问受保护的资源时，例如，。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:384
#, fuzzy
msgid "`/index.html` and `/web-app/service`"
msgstr " `/index.html` 和 `/web-app/service` "

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:385
#, fuzzy
msgid "`/web-app/service1` and `/web-app/service2`"
msgstr " `/web-app/service1` 和 `/web-app/service2` "

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:386
#, fuzzy
msgid "`/web-app1/service` and `/web-app2/service`"
msgstr " `/web-app1/service` 和 `/web-app2/service` "

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:388
#, fuzzy
msgid "`quarkus.oidc.authentication.cookie-path` is set to `/` by default but can be narrowed to the more specific root path such as `/web-app`."
msgstr " `quarkus.oidc.authentication.cookie-path` 默认设置为 ，但可以缩小到更具体的根路径，如 。 `/` `/web-app` "

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:391
#, fuzzy
msgid "You can also set a `quarkus.oidc.authentication.cookie-path-header` property if the cookie path needs to be set dynamically.  For example, setting `quarkus.oidc.authentication.cookie-path-header=X-Forwarded-Prefix` means that the value of HTTP `X-Forwarded-Prefix` header will be used to set a cookie path."
msgstr "如果需要动态地设置cookie路径，你也可以设置 `quarkus.oidc.authentication.cookie-path-header` 属性。例如，设置 `quarkus.oidc.authentication.cookie-path-header=X-Forwarded-Prefix` ，意味着将使用HTTP `X-Forwarded-Prefix` 头的值来设置cookie路径。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:393
#, fuzzy
msgid "If `quarkus.oidc.authentication.cookie-path-header` is set but no configured HTTP header is available in the current request then the `quarkus.oidc.authentication.cookie-path` will be checked."
msgstr "如果 `quarkus.oidc.authentication.cookie-path-header` ，但当前请求中没有配置的HTTP头，那么 `quarkus.oidc.authentication.cookie-path` ，将被检查。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:395
#, fuzzy
msgid "If your application is deployed across multiple domains, make sure to set a `quarkus.oidc.authentication.cookie-domain` property for the session cookie be visible to all protected Quarkus services, for example, if you have 2 services deployed at:"
msgstr "如果你的应用程序是跨域部署的，请确保为会话cookie设置一个 `quarkus.oidc.authentication.cookie-domain` 属性，使其对所有受保护的Quarkus服务可见，例如，如果你有2个服务部署在。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:397
#, fuzzy
msgid "https://whatever.wherever.company.net/"
msgstr " https://whatever.wherever.company.net/ "

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:398
#, fuzzy
msgid "https://another.address.company.net/"
msgstr " https://another.address.company.net/ "

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:400
#, fuzzy
msgid "then the `quarkus.oidc.authentication.cookie-domain` property must be set to `company.net`."
msgstr "那么 `quarkus.oidc.authentication.cookie-domain` 属性必须被设置为 `company.net` 。"

#. type: Title ===
#: upstream/_guides/security-openid-connect-web-authentication.adoc:401
#, fuzzy, no-wrap
msgid "Logout"
msgstr "登出"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:404
#, fuzzy
msgid "By default the logout is based on the expiration time of the ID Token issued by the OpenID Connect Provider. When the ID Token expires, the current user session at the Quarkus endpoint is invalidated and the user is redirected to the OpenID Connect Provider again to authenticate. If the session at the OpenID Connect Provider is still active, users are automatically re-authenticated without having to provide their credentials again."
msgstr "默认情况下，注销是基于OpenID连接提供商发出的ID令牌的到期时间。当ID Token过期时，当前用户在Quarkus端点的会话就会失效，用户会再次被重定向到OpenID连接提供者处进行认证。如果OpenID连接提供者的会话仍然有效，用户会自动重新认证，而不需要再次提供他们的凭证。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:406
#, fuzzy
msgid "The current user session may be automatically extended by enabling a `quarkus.oidc.token.refresh-expired` property. If it is set to `true` then when the current ID Token expires a Refresh Token Grant will be used to refresh ID Token as well as Access and Refresh Tokens."
msgstr "当前的用户会话可以通过启用 `quarkus.oidc.token.refresh-expired` 属性自动延长。如果它被设置为 `true` ，那么当当前ID Token过期时，将使用刷新令牌授权来刷新ID Token以及访问和刷新令牌。"

#. type: Title ====
#: upstream/_guides/security-openid-connect-web-authentication.adoc:408
#, fuzzy, no-wrap
msgid "User-Initiated Logout"
msgstr "用户发起的注销"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:412
#, fuzzy
msgid "Users can request a logout by sending a request to the Quarkus endpoint logout path set with a `quarkus.oidc.logout.path` property.  For example, if the endpoint address is `https://application.com/webapp` and the `quarkus.oidc.logout.path` is set to \"/logout\" then the logout request has to be sent to `https://application.com/webapp/logout`."
msgstr "用户可以通过发送请求到Quarkus端点注销路径设置的 `quarkus.oidc.logout.path` 属性来请求注销。例如，如果端点地址是 `<a href=\"https://application.com/webapp\" class=\"bare\">https://application.com/webapp</a>` 并且 `quarkus.oidc.logout.path` 被设置为\"/logout\"，那么注销请求就必须被发送至 `<a href=\"https://application.com/webapp/logout\" class=\"bare\">https://application.com/webapp/logout</a>` ."

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:414
#, fuzzy
msgid "This logout request will start an https://openid.net/specs/openid-connect-session-1_0.html#RPLogout[RP-Initiated Logout] and the user will be redirected to the OpenID Connect Provider to logout where a user may be asked to confirm the logout is indeed intended."
msgstr "这个注销请求将启动一个 link:https://openid.net/specs/openid-connect-session-1_0.html#RPLogout[RP发起的注销] ，用户将被重定向到OpenID连接提供商进行注销，在那里可能会要求用户确认注销确实是为了。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:416
#, fuzzy
msgid "The user will be returned to the endpoint post logout page once the logout has been completed if the `quarkus.oidc.logout.post-logout-path` property is set. For example, if the endpoint address is `https://application.com/webapp` and the `quarkus.oidc.logout.post-logout-path` is set to \"/signin\" then the user will be returned to `https://application.com/webapp/signin` (note this URI must be registered as a valid `post_logout_redirect_uri` in the OpenID Connect Provider)."
msgstr "如果设置了 `quarkus.oidc.logout.post-logout-path` 属性，一旦注销完成，用户将返回到端点后注销页面。例如，如果端点地址是 `<a href=\"https://application.com/webapp\" class=\"bare\">https://application.com/webapp</a>` 并且 `quarkus.oidc.logout.post-logout-path` 被设置为\"/signin\"，那么用户将被返回到 `<a href=\"https://application.com/webapp/signin\" class=\"bare\">https://application.com/webapp/signin</a>` (注意这个URI必须在OpenID Connect Provider中注册为有效的 `post_logout_redirect_uri` ）。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:418
#, fuzzy
msgid "If the `quarkus.oidc.logout.post-logout-path` is set then a `q_post_logout` cookie will be created and a matching `state` query parameter will be added to the logout redirect URI and the OpenID Connect Provider will return this `state` once the logout has been completed. It is recommended for the Quarkus `web-app` applications to check that a `state` query parameter matches the value of the `q_post_logout` cookie which can be done for example in a JAX-RS filter."
msgstr "如果设置了 `quarkus.oidc.logout.post-logout-path` ，那么将创建一个 `q_post_logout` cookie，并将匹配的 `state` 查询参数添加到注销重定向URI中，一旦注销完成，OpenID Connect Provider将返回这个 `state` 。建议Quarkus `web-app` 应用程序检查 `state` 查询参数是否与 `q_post_logout` cookie的值相匹配，例如可以在JAX-RS过滤器中进行。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:420
#, fuzzy
msgid "Note that a cookie name will vary when using xref:security-openid-connect-multitenancy.adoc[OpenID Connect Multi-Tenancy]. For example, it will be named `q_post_logout_tenant_1` for a tenant with a `tenant_1` id, etc."
msgstr "请注意，在使用 link:security-openid-connect-multitenancy.html[OpenID Connect多租] 户时，cookie的名称会有所不同。例如，对于具有 `tenant_1` id的租户，它将被命名为 `q_post_logout_tenant_1` ，等等。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:422
#, fuzzy
msgid "Here is an example of how to configure an RP initiated logout flow:"
msgstr "下面是一个如何配置RP启动注销流程的例子。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:429
#: upstream/_guides/security-openid-connect-web-authentication.adoc:484
#, no-wrap
msgid ""
"quarkus.oidc.auth-server-url=http://localhost:8180/realms/quarkus\n"
"quarkus.oidc.client-id=frontend\n"
"quarkus.oidc.credentials.secret=secret\n"
"quarkus.oidc.application-type=web-app\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:432
#, no-wrap
msgid ""
"quarkus.oidc.logout.path=/logout\n"
"quarkus.oidc.logout.post-logout-path=/welcome.html\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:436
#, no-wrap
msgid ""
"# Only the authenticated users can initiate a logout:\n"
"quarkus.http.auth.permission.authenticated.paths=/logout\n"
"quarkus.http.auth.permission.authenticated.policy=authenticated\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:440
#, no-wrap
msgid ""
"# Logged out users should be returned to the /welcome.html site which will offer an option to re-login:\n"
"quarkus.http.auth.permission.authenticated.paths=/welcome.html\n"
"quarkus.http.auth.permission.authenticated.policy=permit\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:444
#, fuzzy
msgid "You may also need to set `quarkus.oidc.authentication.cookie-path` to a path value common to all of the application resources which is `/` in this example.  See <<oidc-cookies, Dealing with Cookies>> for more information."
msgstr "你可能还需要将 `quarkus.oidc.authentication.cookie-path` 设置为所有应用程序资源共同的路径值，在这个例子中是 `/` 。更多信息见 link:#oidc-cookies[处理Cookies] 。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:446
#, fuzzy
msgid "Note that some OpenID Connect providers do not support https://openid.net/specs/openid-connect-session-1_0.html#RPLogout[RP-Initiated Logout] specification (possibly because it is still technically a draft) and do not return an OpenID Connect well-known `end_session_endpoint` metadata property. However it should not be a problem since these providers' specific logout mechanisms may only differ in how the logout URL query parameters are named."
msgstr "请注意，一些OpenID Connect提供商不支持 link:https://openid.net/specs/openid-connect-session-1_0.html#RPLogout[RP发起的注销] 规范（可能是因为它在技术上仍然是一个草案），并且不返回OpenID Connect知名的 `end_session_endpoint` 元数据属性。然而，这不应该是一个问题，因为这些提供者的特定注销机制可能只在注销URL查询参数的命名方式上有所不同。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:448
#, fuzzy
msgid "According to the https://openid.net/specs/openid-connect-session-1_0.html#RPLogout[RP-Initiated Logout] specification, the `quarkus.oidc.logout.post-logout-path` property is represented as a `post_logout_redirect_uri` query parameter which will not be recognized by the providers which do not support this specification."
msgstr "根据 link:https://openid.net/specs/openid-connect-session-1_0.html#RPLogout[RP发起的注销] 规范， `quarkus.oidc.logout.post-logout-path` 属性被表示为一个 `post_logout_redirect_uri` 查询参数，不支持该规范的提供者将无法识别。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:450
#, fuzzy
msgid "You can use `quarkus.oidc.logout.post-logout-url-param` to work around this issue. You can also request more logout query parameters added with `quarkus.oidc.logout.extra-params`. For example, here is how you can support a logout with `Auth0`:"
msgstr "你可以使用 `quarkus.oidc.logout.post-logout-url-param` 来解决这个问题。你还可以要求用 `quarkus.oidc.logout.extra-params` 添加更多的注销查询参数。例如，以下是你如何用 `Auth0` 支持注销。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:457
#, no-wrap
msgid ""
"quarkus.oidc.auth-server-url=https://dev-xxx.us.auth0.com\n"
"quarkus.oidc.client-id=redacted\n"
"quarkus.oidc.credentials.secret=redacted\n"
"quarkus.oidc.application-type=web-app\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:460
#, no-wrap
msgid ""
"quarkus.oidc.tenant-logout.logout.path=/logout\n"
"quarkus.oidc.tenant-logout.logout.post-logout-path=/welcome.html\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:465
#, no-wrap
msgid ""
"# Auth0 does not return the `end_session_endpoint` metadata property, configire it instead\n"
"quarkus.oidc.end-session-path=v2/logout\n"
"# Auth0 will not recognize the 'post_logout_redirect_uri' query parameter so make sure it is named as 'returnTo'\n"
"quarkus.oidc.logout.post-logout-uri-param=returnTo\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:469
#, no-wrap
msgid ""
"# Set more properties if needed.\n"
"# For example, if 'client_id' is provided then a valid logout URI should be set as Auth0 Application property, without it - as Auth0 Tenant property.\n"
"quarkus.oidc.logout.extra-params.client_id=${quarkus.oidc.client-id}\n"
msgstr ""

#. type: Title ====
#: upstream/_guides/security-openid-connect-web-authentication.adoc:472
#, fuzzy, no-wrap
msgid "Back-Channel Logout"
msgstr "背面通道注销"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:475
#, fuzzy
msgid "link:https://openid.net/specs/openid-connect-backchannel-1_0.html[Back-Channel Logout] is used by OpenID Connect providers to logout the current user from all the applications this user is currently logged in, bypassing the user agent."
msgstr "link:https://openid.net/specs/openid-connect-backchannel-1_0.html[Back-Channel Logout] 被OpenId Connect提供商用来从该用户当前登录的所有应用中注销当前用户，绕过了用户代理。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:477
#, fuzzy
msgid "You can configure Quarkus to support `Back-Channel Logout` as follows:"
msgstr "你可以按以下方式配置Quarkus以支持 `Back-Channel Logout` 。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:486
#, no-wrap
msgid "quarkus.oidc.logout.backchannel.path=/back-channel-logout\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:489
#, fuzzy
msgid "Absolute `Back-Channel Logout` URL is calculated by adding `quarkus.oidc.back-channel-logout.path` to the current endpoint URL, for example, `http://localhost:8080/back-channel-logout`. You will need to configure this URL in the Admin Console of your OpenID Connect Provider."
msgstr "绝对 `Back-Channel Logout` URL的计算方法是在当前端点URL上加上 `quarkus.oidc.back-channel-logout.path` ，例如。 `<a href=\"http://localhost:8080/back-channel-logout\" class=\"bare\">http://localhost:8080/back-channel-logout</a>` .你将需要在你的OpenId连接提供商的管理控制台中配置这个URL。"

#. type: Title ====
#: upstream/_guides/security-openid-connect-web-authentication.adoc:491
#, fuzzy, no-wrap
msgid "Local Logout"
msgstr "本地注销"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:494
#, fuzzy
msgid "If you work with a social provider such as Google and are concerned that the users can be logged out from all their Google applications with the <<user-initiated-logout,User-Initiated Logout>> which redirects the users to the provider's logout endpoint then you can support a local logout with the help of the <<oidc-session,OidcSession>> which only clears the local session cookie, for example:"
msgstr "如果你与社会供应商（如谷歌）合作，并且担心用户可以通过 \" link:#user-initiated-logout[用户发起的注销] \"（将用户重定向到供应商的注销端点）从他们所有的谷歌应用程序中注销，那么你可以在 link:#oidc-session[OidcSession] 的帮助下支持本地注销，例如只清除本地会话cookie。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:500
#, no-wrap
msgid ""
"import javax.inject.Inject;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:502
#, no-wrap
msgid "import io.quarkus.oidc.OidcSession;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:505
#, no-wrap
msgid ""
"@Path(\"/service\")\n"
"public class ServiceResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:508
#, no-wrap
msgid ""
"    @Inject\n"
"    OidcSession oidcSession;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:515
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"logout\")\n"
"    public String logout() {\n"
"        oidcSession.logout().await().indefinitely();\n"
"        return \"You are logged out\".\n"
"    }\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/security-openid-connect-web-authentication.adoc:519
#, fuzzy, no-wrap
msgid "Session Management"
msgstr "会议管理"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:522
#, fuzzy
msgid "If you have a xref:security-openid-connect.adoc#single-page-applications[Single Page Application for Service Applications] where your OpenID Connect Provider script such as `keycloak.js` is managing an authoriization code flow then that script will also control the SPA authentication session lifespan."
msgstr "如果你有一个 link:security-openid-connect.html#single-page-applications[服务应用程序的单页应用] ，你的OpenID连接提供者脚本，如 `keycloak.js` ，正在管理一个授权代码流，那么该脚本也将控制SPA认证会话的寿命。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:524
#, fuzzy
msgid "If you work with a Quarkus OIDC `web-app` application then it is Quarkus OIDC Code Authentication mechanism which is managing the user session lifespan."
msgstr "如果你使用Quarkus OIDC `web-app` 应用程序，那么就是Quarkus OIDC代码认证机制在管理用户会话寿命。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:526
#, fuzzy
msgid "The session age is calculated by adding the lifespan value of the current IDToken and the values of the `quarkus.oidc.authentication.session-age-extension` and `quarkus.oidc.token.lifespan-grace` properties. Of the last two properties only `quarkus.oidc.authentication.session-age-extension` should be used to significantly extend the session lifespan if required since `quarkus.oidc.token.lifespan-grace` is only meant for taking some small clock skews into consideration."
msgstr "会话年龄是通过添加当前IDToken的寿命值和 `quarkus.oidc.authentication.session-age-extension` 和 `quarkus.oidc.token.lifespan-grace` 属性的值来计算的。在后两个属性中，只有 `quarkus.oidc.authentication.session-age-extension` ，如果需要的话，应该用来大大延长会话的寿命，因为 `quarkus.oidc.token.lifespan-grace` ，只是为了考虑一些小的时钟偏移。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:528
#, fuzzy
msgid "When the currently authenticated user returns to the protected Quarkus endpoint and the ID token associated with the session cookie has expired then, by default, the user will be auto-redirected to the OIDC Authorization endpoint to re-authenticate. Most likely the OIDC provider will challenge the user again though not necessarily if the session between the user and this OIDC provider is still active which may happen if it is configured to last longer than the ID token."
msgstr "当当前认证的用户返回到受保护的Quarkus端点，并且与会话cookie相关的ID令牌已经过期时，默认情况下，用户将被自动重定向到OIDC授权端点重新认证。最有可能的是，OIDC提供商将再次挑战用户，但如果用户和这个OIDC提供商之间的会话仍然处于活动状态，就不一定了，如果它被配置为比ID令牌持续时间更长，就可能发生这种情况。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:530
#, fuzzy
msgid "If the `quarkus.oidc.token.refresh-expired` then the expired ID token (as well as the access token) will be refreshed using the refresh token returned with the authorization code grant response. This refresh token may also be recycled (refreshed) itself as part of this process. As a result the new session cookie will be created and the session will be extended."
msgstr "如果 `quarkus.oidc.token.refresh-expired` ，那么过期的ID令牌（以及访问令牌）将使用与授权码授予响应一起返回的刷新令牌进行刷新。作为这个过程的一部分，这个刷新令牌本身也可能被回收（刷新）。因此，新的会话cookie将被创建，会话将被延长。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:532
#, fuzzy
msgid "Note, `quarkus.oidc.authentication.session-age-extension` can be important when dealing with expired ID tokens, when the user is not very active. In such cases, if the ID token expires, then the session cookie may not be returned back to the Quarkus endpoint during the next user request and Quarkus will assume it is the first authentication request. Therefore using `quarkus.oidc.authentication.session-age-extension` is important if you need to have even the expired ID tokens refreshed."
msgstr "注意， `quarkus.oidc.authentication.session-age-extension` ，在处理过期的ID令牌时，当用户不是很活跃时，可能很重要。在这种情况下，如果ID令牌过期，那么在下一次用户请求时，会话cookie可能不会返回到Quarkus终端，Quarkus会认为这是第一次认证请求。因此，如果你需要让过期的ID令牌也被刷新，使用 `quarkus.oidc.authentication.session-age-extension` 是很重要的。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:534
#, fuzzy
msgid "You can also complement refreshing the expired ID tokens by proactively refreshing the valid ID tokens which are about to be expired within the `quarkus.oidc.token.refresh-token-time-skew` value. If, during the current user request, it is calculated that the current ID token will expire within this `quarkus.oidc.token.refresh-token-time-skew` then it will be refreshed and the new session cookie will be created. This property should be set to a value which is less than the ID token lifespan; the closer it is to this lifespan value the more often the ID token will be refreshed."
msgstr "你也可以通过主动刷新在 `quarkus.oidc.token.refresh-token-time-skew` 值内即将过期的有效ID令牌来补充刷新过期的ID令牌。如果在当前用户请求期间，计算出当前的ID令牌将在这个 `quarkus.oidc.token.refresh-token-time-skew` 内过期，那么它将被刷新，并创建新的会话cookie。这个属性应该被设置为一个小于ID令牌寿命的值；它越接近这个寿命值，ID令牌就会被刷新得越频繁。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:536
#, fuzzy
msgid "You can have this process further optimized by having a simple JavaScript function periodically emulating the user activity by pinging your Quarkus endpoint thus minimizing the window during which the user may have to be re-authenticated."
msgstr "你可以通过一个简单的JavaScript函数周期性地模拟用户活动，通过ping你的Quarkus端点来进一步优化这个过程，从而最大限度地减少用户可能需要重新认证的窗口。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:538
#, fuzzy
msgid "Note this user session can not be extended forever - the returning user with the expired ID token will have to re-authenticate at the OIDC provider endpoint once the refresh token has expired."
msgstr "注意这个用户会话不能永远延长--一旦刷新令牌过期，持有过期ID令牌的返回用户将不得不在OIDC提供者端点重新认证。"

#. type: Title ====
#: upstream/_guides/security-openid-connect-web-authentication.adoc:540
#, fuzzy, no-wrap
msgid "OidcSession"
msgstr "编码"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:543
#, fuzzy
msgid "`io.quarkus.oidc.OidcSession` is a wrapper around the current `IdToken`. It can help to perform a <<local-logout, Local Logout>>, retrieve the current session's tenant identifier and check when the session will expire. More useful methods will be added to it over time."
msgstr " `io.quarkus.oidc.OidcSession` 是一个围绕当前 。它可以帮助执行 `IdToken` link:#local-logout[本地注销] ，检索当前会话的租户标识符并检查会话何时过期。随着时间的推移，更多有用的方法将被添加到它上面。"

#. type: Title ====
#: upstream/_guides/security-openid-connect-web-authentication.adoc:545
#, fuzzy, no-wrap
msgid "TokenStateManager"
msgstr "TokenStateManager"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:548
#, fuzzy
msgid "OIDC `CodeAuthenticationMechanism` is using the default `io.quarkus.oidc.TokenStateManager` interface implementation to keep the ID, access and refresh tokens returned in the authorization code or refresh grant responses in a session cookie. It makes Quarkus OIDC endpoints completely stateless."
msgstr "OIDC `CodeAuthenticationMechanism` 是使用默认的 `io.quarkus.oidc.TokenStateManager` 接口实现，将授权码或刷新授权响应中返回的ID、访问和刷新令牌保存在一个会话cookie中。这使得Quarkus OIDC端点完全无状态。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:550
#, fuzzy
msgid "Note that some endpoints do not require the access token. An access token is only required if the endpoint needs to retrieve `UserInfo` or access the downstream service with this access token or use the roles associated with the access token (the roles in the ID token are checked by default). In such cases you can set either `quarkus.oidc.token-state-manager.strategy=id-refresh-token` (keep ID and refresh tokens only) or `quarkus.oidc.token-state-manager.strategy=id-token` (keep ID token only)."
msgstr "注意，有些端点不需要访问令牌。只有当端点需要检索 `UserInfo` ，或用这个访问令牌访问下游服务，或使用与访问令牌相关的角色时，才需要访问令牌（ID令牌中的角色默认被选中）。在这种情况下，你可以设置 `quarkus.oidc.token-state-manager.strategy=id-refresh-token` （只保留ID和刷新令牌）或 `quarkus.oidc.token-state-manager.strategy=id-token` （只保留ID令牌）。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:553
#, fuzzy
msgid "If the ID, access and refresh tokens are JWT tokens then combining all of them (if the strategy is the default `keep-all-tokens`) or only ID and refresh tokens (if the strategy is `id-refresh-token`) may produce a session cookie value larger than 4KB and the browsers may not be able to keep this cookie.  In such cases, you can use `quarkus.oidc.token-state-manager.split-tokens=true` to have a unique session token per each of these tokens."
msgstr "如果ID、访问和刷新令牌是JWT令牌，那么结合所有的令牌（如果策略是默认的 `keep-all-tokens` ）或只有ID和刷新令牌（如果策略是 `id-refresh-token` ）可能会产生一个大于4KB的会话cookie值，浏览器可能无法保留这个cookie。在这种情况下，你可以使用 `quarkus.oidc.token-state-manager.split-tokens=true` ，使每一个令牌都有一个唯一的会话令牌。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:556
#, fuzzy
msgid "You can also configure the default `TokenStateManager` to encrypt the tokens before storing them as cookie values which may be necessary if the tokens contain sensitive claim values.  For example, here is how you configure it to split the tokens and encrypt them:"
msgstr "你还可以配置默认的 `TokenStateManager` ，在将令牌存储为cookie值之前对其进行加密，如果令牌包含敏感的索赔值，这可能是必要的。例如，这里是你如何配置它来分割令牌并对其进行加密的。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:566
#, no-wrap
msgid ""
"quarkus.oidc.auth-server-url=http://localhost:8180/realms/quarkus\n"
"quarkus.oidc.client-id=quarkus-app\n"
"quarkus.oidc.credentials.secret=secret\n"
"quarkus.oidc.application-type=web-app\n"
"quarkus.oidc.token-state-manager.split-tokens=true\n"
"quarkus.oidc.token-state-manager.encryption-required=true\n"
"quarkus.oidc.token-state-manager.encryption-secret=eUk1p7UB3nFiXZGUXi0uph1Y9p34YhBU\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:570
#, fuzzy
msgid "The token encryption secret must be 32 characters long. Note that you only have to set `quarkus.oidc.token-state-manager.encryption-secret` if you prefer not to use `quarkus.oidc.credentials.secret` for encrypting the tokens or if `quarkus.oidc.credentials.secret` length is less than 32 characters."
msgstr "令牌加密秘密必须是32个字符的长度。注意，只有当你不愿意使用 `quarkus.oidc.credentials.secret` 来加密令牌或 `quarkus.oidc.credentials.secret` 长度小于32个字符时，你才需要设置 `quarkus.oidc.token-state-manager.encryption-secret` 。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:572
#, fuzzy
msgid "Register your own `io.quarkus.oidc.TokenStateManager' implementation as an `@ApplicationScoped` CDI bean if you need to customize the way the tokens are associated with the session cookie. For example, you may want to keep the tokens in a database and have only a database pointer stored in a session cookie. Note though that it may present some challenges in making the tokens available across multiple microservices nodes."
msgstr "如果你需要定制令牌与会话cookie的关联方式，请注册你自己的 `io.quarkus.oidc.TokenStateManager' implementation as an `@ApplicationScoped` CDI bean。例如，你可能想把令牌保存在数据库中，并在会话cookie中只存储一个数据库指针。但请注意，这可能会在使令牌在多个微服务节点上可用方面带来一些挑战。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:574
#, fuzzy
msgid "Here is a simple example:"
msgstr "下面是一个简单的例子。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:578
#, no-wrap
msgid "package io.quarkus.oidc.test;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:581
#, no-wrap
msgid ""
"import javax.enterprise.context.ApplicationScoped;\n"
"import javax.inject.Inject;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:589
#, no-wrap
msgid ""
"import io.quarkus.arc.AlternativePriority;\n"
"import io.quarkus.oidc.AuthorizationCodeTokens;\n"
"import io.quarkus.oidc.OidcTenantConfig;\n"
"import io.quarkus.oidc.TokenStateManager;\n"
"import io.quarkus.oidc.runtime.DefaultTokenStateManager;\n"
"import io.smallrye.mutiny.Uni;\n"
"import io.vertx.ext.web.RoutingContext;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:593
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"@AlternativePriority(1)\n"
"public class CustomTokenStateManager implements TokenStateManager {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:596
#, no-wrap
msgid ""
"    @Inject\n"
"    DefaultTokenStateManager tokenStateManager;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:603
#, no-wrap
msgid ""
"    @Override\n"
"    public Uni<String> createTokenState(RoutingContext routingContext, OidcTenantConfig oidcConfig,\n"
"            AuthorizationCodeTokens sessionContent, TokenStateManager.CreateTokenStateRequestContext requestContext) {\n"
"        return tokenStateManager.createTokenState(routingContext, oidcConfig, sessionContent, requestContext)\n"
"                .map(t -> (t + \"|custom\"));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:613
#, no-wrap
msgid ""
"    @Override\n"
"    public Uni<AuthorizationCodeTokens> getTokens(RoutingContext routingContext, OidcTenantConfig oidcConfig,\n"
"            String tokenState, TokenStateManager.GetTokensRequestContext requestContext) {\n"
"        if (!tokenState.endsWith(\"|custom\")) {\n"
"            throw new IllegalStateException();\n"
"        }\n"
"        String defaultState = tokenState.substring(0, tokenState.length() - 7);\n"
"        return tokenStateManager.getTokens(routingContext, oidcConfig, defaultState, requestContext);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:624
#, no-wrap
msgid ""
"    @Override\n"
"    public Uni<Void> deleteTokens(RoutingContext routingContext, OidcTenantConfig oidcConfig, String tokenState,\n"
"            TokenStateManager.DeleteTokensRequestContext requestContext) {\n"
"        if (!tokenState.endsWith(\"|custom\")) {\n"
"            throw new IllegalStateException();\n"
"        }\n"
"        String defaultState = tokenState.substring(0, tokenState.length() - 7);\n"
"        return tokenStateManager.deleteTokens(routingContext, oidcConfig, defaultState, requestContext);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/security-openid-connect-web-authentication.adoc:626
#, fuzzy, no-wrap
msgid "Proof Of Key for Code Exchange (PKCE)"
msgstr "代码交换的密钥证明(PKCE)"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:629
#, fuzzy
msgid "link:https://datatracker.ietf.org/doc/html/rfc7636[Proof Of Key for Code Exchange] (PKCE) minimizes the risk of the authorization code interception."
msgstr "link:https://datatracker.ietf.org/doc/html/rfc7636[代码交换的密钥证明] （PKCE）将授权代码被拦截的风险降到最低。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:631
#, fuzzy
msgid "While `PKCE` is of primary importance to the public OpenID Connect clients (such as the SPA scripts running in a browser), it can also provide an extra level of protection to Quarkus OIDC `web-app` applications which are confidential OpenID Connect clients capable of securely storing the client secret and using it to exchange the code for the tokens."
msgstr "虽然 `PKCE` 对公共OpenId Connect客户端（如在浏览器中运行的SPA脚本）来说是最重要的，但它也可以为Quarkus OIDC `web-app` 应用程序提供额外的保护，这些应用程序是保密的OpenId Connect客户端，能够安全地存储客户秘密，并使用它来交换代币的代码。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:633
#, fuzzy
msgid "If can enable `PKCE` for your OIDC `web-app` endpoint with a `quarkus.oidc.authentication.pkce-required` property and a 32 characters long secret, for example:"
msgstr " `PKCE` 如果可以为你的OIDC `web-app` 端点启用 `quarkus.oidc.authentication.pkce-required` 属性和32个字符长的秘密，比如说。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:638
#, no-wrap
msgid ""
"quarkus.oidc.authentication.pkce-required=true\n"
"quarkus.oidc.authentication.pkce-secret=eUk1p7UB3nFiXZGUXi0uph1Y9p34YhBU\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:641
#, fuzzy
msgid "If you already have a 32 character long client secret then `quarkus.oidc.authentication.pkce-secret` does not have to be set unless you prefer to use a different secret key."
msgstr "如果你已经有一个32个字符的客户秘密，那么 `quarkus.oidc.authentication.pkce-secret` ，除非你喜欢使用不同的秘密密钥，否则不必设置。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:643
#, fuzzy
msgid "The secret key is required for encrypting a randomly generated `PKCE` `code_verifier` while the user is being redirected with the `code_challenge` query parameter to OpenID Connect Provider to authenticate. The `code_verifier` will be decrypted when the user is redirected back to Quarkus and sent to the token endpoint alongside the `code`, client secret and other parameters to complete the code exchange. The provider will fail the code exchange if a `SHA256` digest of the `code_verifier` does not match the `code_challenge` provided during the authentication request."
msgstr "当用户被重定向到OpenId Connect Provider的 `code_challenge` 查询参数以进行身份验证时，需要秘密密钥来加密一个随机生成的 `PKCE` `code_verifier` 。当用户被重定向到Quarkus时， `code_verifier` 将被解密，并与 `code` 、客户秘密和其他参数一起发送到令牌端点，以完成代码交换。 `code_verifier` 如果 `SHA256` 的摘要与认证请求期间提供的 `code_challenge` 不匹配，提供者将无法进行代码交换。"

#. type: Title ===
#: upstream/_guides/security-openid-connect-web-authentication.adoc:644
#, fuzzy, no-wrap
msgid "Listening to important authentication events"
msgstr "听取重要的认证事件"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:647
#, fuzzy
msgid "One can register `@ApplicationScoped` bean which will observe important OIDC authentication events. The listener will be updated when a user has logged in for the first time or re-authenticated, as well as when the session has been refreshed. More events may be reported in the future. For example:"
msgstr "人们可以注册 `@ApplicationScoped` bean，它将观察重要的OIDC认证事件。当用户首次登录或重新认证，以及会话被刷新时，监听器将被更新。未来可能会有更多的事件被报告。比如说。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:652
#, no-wrap
msgid ""
"import javax.enterprise.context.ApplicationScoped;\n"
"import javax.enterprise.event.Observes;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:657
#, no-wrap
msgid ""
"import io.quarkus.oidc.IdTokenCredential;\n"
"import io.quarkus.oidc.SecurityEvent;\n"
"import io.quarkus.security.identity.AuthenticationRequestContext;\n"
"import io.vertx.ext.web.RoutingContext;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:660
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class SecurityEventListener {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:667
#, no-wrap
msgid ""
"    public void event(@Observes SecurityEvent event) {\n"
"        String tenantId = event.getSecurityIdentity().getAttribute(\"tenant-id\");\n"
"        RoutingContext vertxContext = event.getSecurityIdentity().getCredential(IdTokenCredential.class).getRoutingContext();\n"
"        vertxContext.put(\"listener-message\", String.format(\"event:%s,tenantId:%s\", event.getEventType().name(), tenantId));\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/security-openid-connect-web-authentication.adoc:669
#, fuzzy, no-wrap
msgid "Single Page Applications"
msgstr "单页应用"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:672
#, fuzzy
msgid "Please check if implementing SPAs the way it is suggested in the xref:security-openid-connect.adoc#single-page-applications[Single Page Applications for Service Applications] section can meet your requirements."
msgstr "请检查按照 \" link:security-openid-connect.html#single-page-applications[服务应用的单页应用] \"部分中建议的方式实施SPA是否能满足你的要求。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:674
#, fuzzy
msgid "If you prefer to use SPA and JavaScript API such as `Fetch` or `XMLHttpRequest`(XHR) with Quarkus web applications, please be aware that OpenID Connect Providers may not support CORS for Authorization endpoints where the users are authenticated after a redirect from Quarkus. This will lead to authentication failures if the Quarkus application and the OpenID Connect Provider are hosted on the different HTTP domains/ports."
msgstr "如果你喜欢使用SPA和JavaScript API，如 `Fetch` 或 `XMLHttpRequest` (XHR)与Quarkus网络应用程序，请注意OpenID Connect提供商可能不支持授权端点的CORS，因为用户在从Quarkus重定向后会得到认证。如果Quarkus应用程序和OpenID连接供应商被托管在不同的HTTP域/端口上，这将导致认证失败。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:676
#, fuzzy
msgid "In such cases, set the `quarkus.oidc.authentication.java-script-auto-redirect` property to `false` which will instruct Quarkus to return a `499` status code and `WWW-Authenticate` header with the `OIDC` value. The browser script also needs to be updated to set `X-Requested-With` header with the `JavaScript` value and reload the last requested page in case of `499`, for example:"
msgstr "在这种情况下，将 `quarkus.oidc.authentication.java-script-auto-redirect` 属性设置为 `false` ，这将指示Quarkus返回一个 `499` 状态代码和带有 `OIDC` 值的 `WWW-Authenticate` 头。浏览器脚本也需要更新，以便用 `JavaScript` 值设置 `X-Requested-With` 头部，并在 `499` 的情况下重新加载最后请求的页面。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:681
#, no-wrap
msgid ""
"Future<void> callQuarkusService() async {\n"
"    Map<String, String> headers = Map.fromEntries([MapEntry(\"X-Requested-With\", \"JavaScript\")]);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:690
#, no-wrap
msgid ""
"    await http\n"
"        .get(\"https://localhost:443/serviceCall\")\n"
"        .then((response) {\n"
"            if (response.statusCode == 499) {\n"
"                window.location.assign(\"https://localhost.com:443/serviceCall\");\n"
"            }\n"
"         });\n"
"  }\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/security-openid-connect-web-authentication.adoc:692
#, fuzzy, no-wrap
msgid "Cross Origin Resource Sharing"
msgstr "跨产地资源共享"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:695
#, fuzzy
msgid "If you plan to consume this application from a Single Page Application running on a different domain, you will need to configure CORS (Cross-Origin Resource Sharing). Please read the xref:http-reference.adoc#cors-filter[HTTP CORS documentation] for more details."
msgstr "如果你打算从运行在不同域上的单页应用程序中消费这个应用程序，你将需要配置CORS（跨源资源共享）。请阅读 link:http-reference.html#cors-filter[HTTP CORS文档] 以了解更多细节。"

#. type: Title ===
#: upstream/_guides/security-openid-connect-web-authentication.adoc:697
#, fuzzy, no-wrap
msgid "Integration with GitHub and other OAuth2 providers"
msgstr "与GitHub和其他OAuth2供应商集成"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:700
#, fuzzy
msgid "Some well known providers such as GitHub or LinkedIn are not OpenID Connect but OAuth2 providers which support the `authorization code flow`, for example, link:https://docs.github.com/en/developers/apps/building-oauth-apps/authorizing-oauth-apps[GitHub OAuth2] and link:https://docs.microsoft.com/en-us/linkedin/shared/authentication/authorization-code-flow[LinkedIn OAuth2]."
msgstr "一些众所周知的供应商，如 `GitHub` 或 `LinkedIn` ，不是 `OpenID Connect` ，而是 `OAuth2` ，支持 `authorization code flow` ，例如 link:https://docs.github.com/en/developers/apps/building-oauth-apps/authorizing-oauth-apps[GitHub OAuth2] 和 link:https://docs.microsoft.com/en-us/linkedin/shared/authentication/authorization-code-flow[LinkedIn OAuth2] 。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:702
#, fuzzy
msgid "The main difference between OpenID Connect and OAuth2 providers is that OpenID Connect providers, by building on top of OAuth2, return an `ID Token` representing a user authentication, in addition to the standard authorization code flow `access` and `refresh` tokens returned by `OAuth2` providers."
msgstr " `OpenID Connect` 和 `OAuth2` 提供者之间的主要区别是， `OpenID Connect` 提供者通过建立在 `OAuth2` 之上，除了由 `OAuth2` 提供者返回的标准授权代码流 `access` 和 `refresh` 令牌之外，还返回一个代表用户认证的 `ID Token` 。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:704
#, fuzzy
msgid "OAuth2 providers such as GitHub do not return `IdToken`, the fact of the user authentication is implicit and is indirectly represented by the `access` token which represents an authenticated user authorizing the current Quarkus `web-app` application to access some data on behalf of the authenticated user."
msgstr " `OAuth2` 提供者如 ，不返回 ，用户认证的事实是隐含的，并间接由 令牌表示，该令牌代表认证的用户授权当前Quarkus 应用程序代表认证用户访问一些数据。 `GitHub` `IdToken` `access` `web-app` "

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:707
#, fuzzy
msgid "For example, when working with GitHub, the Quarkus endpoint can acquire an `access` token which will allow it to request a GitHub profile of the current user.  In fact this is exactly how a standard OpenID Connect `UserInfo` acquisition also works - by authenticating into your OpenID Connect provider you also give a permission to Quarkus application to acquire your <<user-info,UserInfo>> on your behalf - and it also shows what is meant by OpenID Connect being built on top of OAuth2."
msgstr "例如，当使用 `GitHub` ，Quarkus端点可以获得一个 `access` token，这将允许它请求一个当前用户的 `GitHub` profile。事实上，这正是一个标准的 `OpenID Connect` `UserInfo` acqusition的工作方式--通过认证到你的 `OpenID Connect` 提供者，你也给了Quarkus应用程序一个权限，代表你获得你的 link:#user-info[UserInfo] --它也显示了什么是 `OpenID Connect` 被建立在 `OAuth2` 上。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:709
#, fuzzy
msgid "In order to support the integration with such OAuth2 servers, `quarkus-oidc` needs to be configured to allow the authorization code flow responses without `IdToken`: `quarkus.oidc.authentication.id-token-required=false`."
msgstr "为了支持与这种 `OAuth2` 服务器的整合， `quarkus-oidc` ，需要配置成允许授权码流响应，而不需要 `IdToken` ： `quarkus.oidc.authentication.id-token-required=false` 。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:711
#, fuzzy
msgid "It is required because `quarkus-oidc` expects that not only `access` and `refresh` tokens but also `IdToken` will be returned once the authorization code flow completes."
msgstr "它是必需的，因为 `quarkus-oidc` 希望一旦授权代码流完成，不仅 `access` 和 `refresh` 令牌，而且 `IdToken` 也将被返回。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:713
#, fuzzy
msgid "Note, even though you will configure the extension to support the authorization code flows without `IdToken`, an internal `IdToken` will be generated to support the way `quarkus-oidc` operates where an `IdToken` is used to support the authentication session and to avoid redirecting the user to the provider such as GitHub on every request. In this case the session lifespan is set to 5 minutes which can be extended further as described in the <<session-management,session management>> section."
msgstr "注意，即使你将配置扩展以支持没有 `IdToken` 的授权代码流，也会产生一个内部 `IdToken` ，以支持 `quarkus-oidc` 的操作方式，其中 `IdToken` 被用来支持认证会话，并避免在每次请求时将用户重定向到提供者，如 `GitHub` 。在这种情况下，会话寿命被设置为5分钟， link:#session-management[如会话管理] 部分所述，可以进一步延长。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:716
#, fuzzy
msgid "The next step is to ensure that the returned access token can be useful to the current Quarkus endpoint.  If the OAuth2 provider supports the introspection endpoint then you may be able to use this access token as a source of roles with `quarkus.oidc.roles.source=accesstoken`. If no introspection endpoint is available then at the very least it should be possible to request <<user-info,UserInfo>> from this provider with `quarkus.oidc.authentication.user-info-required` - this is the case with GitHub."
msgstr "下一步是确保返回的访问令牌能够对当前的Quarkus端点有用。如果 `OAuth2` 提供者支持自省端点，那么你就可以用这个访问令牌作为 `quarkus.oidc.roles.source=accesstoken` 的角色来源。如果没有自省端点，那么至少应该可以用 `quarkus.oidc.authentication.user-info-required` 从这个提供者那里请求 link:#user-info[UserInfo] - 这就是 `GitHib` 的情况。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:718
#, fuzzy
msgid "Configuring the endpoint to request <<user-info,UserInfo>> is the only way `quarkus-oidc` can be integrated with the providers such as GitHub."
msgstr "配置端点以请求 link:#user-info[UserInfo] 是 `quarkus-oidc` 与供应商（如 `GitHib` ）整合的唯一方式。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:720
#, fuzzy
msgid "Note that requiring <<user-info,UserInfo>> involves making a remote call on every request - therefore you may want to consider caching `UserInfo` data, see <<token-introspection-userinfo-cache,Token Introspection and UserInfo Cache> for more details."
msgstr "请注意，要求 link:#user-info[UserInfo] 涉及到在每个请求中进行远程调用--因此你可能要考虑缓存 `UserInfo` 数据，更多细节请参见<<token-introspection-userinfo-cache,Token Introspection and UserInfo Cache>。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:722
#, fuzzy
msgid "Alternatively, you may want to request that `UserInfo` is embedded into the internal generated `IdToken` with the `quarkus.oidc.cache-user-info-in-idtoken=true` property - the advantage of this approach is that by default no cached `UserInfo` state will be kept with the endpoint - instead it will be stored in a session cookie. You may also want to consider encrypting `IdToken` in this case if `UserInfo` contains sensitive data, please see <<token-state-manager,Encrypt Tokens With TokenStateManager>> for more information."
msgstr "另外，你可能想要求将 `UserInfo` 嵌入到内部生成的 `IdToken`with the `quarkus.oidc.cache-user-info-in-idtoken=true` 属性中--这种方法的好处是，默认情况下，没有缓存的 `UserInfo` 状态将被保留在端点中--相反，它将被存储在一个会话cookie中。如果 `UserInfo` 包含敏感数据，你也可以考虑在这种情况下对 `IdToken` 进行加密，更多信息请见E link:#token-state-manager[ncrypt Tokens With TokenStateManager] 。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:724
#, fuzzy
msgid "Also, OAuth2 servers may not support a well-known configuration endpoint in which case the discovery has to be disabled and the authorization, token, and introspection and/or userinfo endpoint paths have to be configured manually."
msgstr "此外，OAuth2服务器可能不支持众所周知的配置端点，在这种情况下，发现必须被禁用，授权、令牌、自省和/或用户信息端点路径必须被手动配置。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:726
#, fuzzy
msgid "Here is how you can integrate `quarkus-oidc` with GitHub after you have link:https://docs.github.com/en/developers/apps/building-oauth-apps/creating-an-oauth-app[created a GitHub OAuth application]. Configure your Quarkus endpoint like this:"
msgstr "下面是在 link:https://docs.github.com/en/developers/apps/building-oauth-apps/creating-an-oauth-app[创建了GitHub OAuth应用] 后，如何将 `quarkus-oidc` 与 `GitHub` 。像这样配置你的Quarkus端点。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:732
#, no-wrap
msgid ""
"quarkus.oidc.provider=github\n"
"quarkus.oidc.client-id=github_app_clientid\n"
"quarkus.oidc.credentials.secret=github_app_clientsecret\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:735
#, no-wrap
msgid ""
"# user:email scope is requested by default, use 'quarkus.oidc.authentication.scopes' to request differrent scopes such as `read:user`.\n"
"# See https://docs.github.com/en/developers/apps/building-oauth-apps/scopes-for-oauth-apps for more information.\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:742
#, no-wrap
msgid ""
"# Consider enabling UserInfo Cache \n"
"# quarkus.oidc.token-cache.max-size=1000\n"
"# quarkus.oidc.token-cache.time-to-live=5M\n"
"#\n"
"# Or having UserInfo cached inside IdToken itself\n"
"# quarkus.oidc.cache-user-info-in-idtoken=true\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:745
#, fuzzy
msgid "See xref:security-openid-connect-providers.adoc[Well Known OpenID Connect providers] for more details about configuring other well-known providers."
msgstr "关于配置其他知名供应商的更多细节，请参见 link:security-openid-connect-providers.html[众所周知的OpenId Connect供应商] 。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:747
#, fuzzy
msgid "This is all what is needed for an endpoint like this one to return the currently authenticated user's profile with `GET http://localhost:8080/github/userinfo` and access it as the individual `UserInfo` properties:"
msgstr "这就是像这样的一个端点所需要的全部内容，它可以返回当前认证的用户的资料，并以 `GET <a href=\"http://localhost:8080/github/userinfo\" class=\"bare\">http://localhost:8080/github/userinfo</a>` 并将其作为个人 `UserInfo` 的属性进行访问。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:757
#, no-wrap
msgid ""
"import io.quarkus.oidc.UserInfo;\n"
"import io.quarkus.security.Authenticated;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:761
#, no-wrap
msgid ""
"@Path(\"/github\")\n"
"@Authenticated\n"
"public class TokenResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:764
#, no-wrap
msgid ""
"    @Inject\n"
"    UserInfo userInfo;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:772
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/userinfo\")\n"
"    @Produces(\"application/json\")\n"
"    public String getUserInfo() {\n"
"        return userInfo.getUserInfoString();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:775
#, fuzzy
msgid "If you support more than one social provider with the help of xref:security-openid-connect-multitenancy.adoc[OpenID Connect Multi-Tenancy], for example, Google which is an OpenID Connect Provider returning `IdToken` and GitHub which is an OAuth2 provider returning no `IdToken` and only allowing to access `UserInfo` then you can have your endpoint working with only the injected `SecurityIdentity` for both Google and GitHub flows. A simple augmentation of `SecurityIdentity` will be required where a principal created with the internally generated `IdToken` will be replaced with the `UserInfo` based principal when the GiHub flow is active:"
msgstr "如果你在 link:security-openid-connect-multitenancy.html[OpenID Connect多租户] 的帮助下支持一个以上的社交提供者，例如， `Google` ，这是一个OpenID Connect提供者，返回 `IdToken` ， `GitHub` ，这是一个 `OAuth2` 提供者，不返回 `IdToken` ，只允许访问 `UserInfo` ，那么你可以让你的端点在 `Google` 和 `GitHub` 流量中只使用注入的 `SecurityIdentity` 工作。需要对 `SecurityIdentity` 进行简单的增强，当GiHub流量激活时，用内部生成的 `IdToken` 创建的委托人将被替换为基于 `UserInfo` 的委托人。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:779
#, no-wrap
msgid "package io.quarkus.it.keycloak;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:781
#, no-wrap
msgid "import java.security.Principal;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:783
#, no-wrap
msgid "import javax.enterprise.context.ApplicationScoped;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:791
#, no-wrap
msgid ""
"import io.quarkus.oidc.UserInfo;\n"
"import io.quarkus.security.identity.AuthenticationRequestContext;\n"
"import io.quarkus.security.identity.SecurityIdentity;\n"
"import io.quarkus.security.identity.SecurityIdentityAugmentor;\n"
"import io.quarkus.security.runtime.QuarkusSecurityIdentity;\n"
"import io.smallrye.mutiny.Uni;\n"
"import io.vertx.ext.web.RoutingContext;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:794
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class CustomSecurityIdentityAugmentor implements SecurityIdentityAugmentor {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:802
#, no-wrap
msgid ""
"    @Override\n"
"    public Uni<SecurityIdentity> augment(SecurityIdentity identity, AuthenticationRequestContext context) {\n"
"        RoutingContext routingContext = identity.getAttribute(RoutingContext.class.getName());\n"
"        if (routingContext != null && routingContext.normalizedPath().endsWith(\"/github\")) {\n"
"\t        QuarkusSecurityIdentity.Builder builder = QuarkusSecurityIdentity.builder(identity);\n"
"\t        UserInfo userInfo = identity.getAttribute(\"userinfo\");\n"
"\t        builder.setPrincipal(new Principal() {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:807
#, no-wrap
msgid ""
"\t            @Override\n"
"\t            public String getName() {\n"
"\t                return userInfo.getString(\"preferred_username\");\n"
"\t            }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:813
#, no-wrap
msgid ""
"\t        });\n"
"\t        identity = builder.build();\n"
"        }\n"
"        return Uni.createFrom().item(identity);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:815
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:818
#, fuzzy
msgid "Now, the following code will work when the user is signing in into your application with both Google or GitHub:"
msgstr "现在，当用户用 `Google` 或 `GitHub` 签入你的应用程序时，以下代码将起作用。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:828
#, no-wrap
msgid ""
"import io.quarkus.security.Authenticated;\n"
"import io.quarkus.security.identity.SecurityIdentity;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:832
#, no-wrap
msgid ""
"@Path(\"/service\")\n"
"@Authenticated\n"
"public class TokenResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:835
#, no-wrap
msgid ""
"    @Inject\n"
"    SecurityIdentity identity;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:842
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/google\")\n"
"    @Produces(\"application/json\")\n"
"    public String getUserName() {\n"
"        return identity.getPrincipal().getName();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:850
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/github\")\n"
"    @Produces(\"application/json\")\n"
"    public String getUserName() {\n"
"        return identity.getPrincipal().getUserName();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:853
#, fuzzy
msgid "Possibly a simpler alternative is to inject both `@IdToken JsonWebToken` and `UserInfo` and use `JsonWebToken` when dealing with the providers returning `IdToken` and `UserInfo` - with the providers which do not return `IdToken`."
msgstr "可能更简单的替代方法是同时注入 `@IdToken JsonWebToken` 和 `UserInfo` ，在处理返回 `IdToken` 和 `UserInfo` 的提供者时使用 `JsonWebToken` - 处理不返回 `IdToken` 的提供者。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:855
#, fuzzy
msgid "The last important point is to make sure the callback path you enter in the GitHub OAuth application configuration matches the endpoint path where you'd like the user be redirected to after a successful GitHub authentication and application authorization, in this case it has to be set to `http:localhost:8080/github/userinfo`."
msgstr "最后一点很重要，要确保你在GitHub OAuth应用配置中输入的回调路径与你希望用户在成功通过GitHub认证和应用授权后被重定向到的端点路径相匹配，在这种情况下，它必须被设置为 `http:localhost:8080/github/userinfo` 。"

#. type: Title ===
#: upstream/_guides/security-openid-connect-web-authentication.adoc:856
#, fuzzy, no-wrap
msgid "Cloud Services"
msgstr "云服务"

#. type: Title ====
#: upstream/_guides/security-openid-connect-web-authentication.adoc:858
#, fuzzy, no-wrap
msgid "Google Cloud"
msgstr "谷歌云"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:861
#, fuzzy
msgid "You can have Quarkus OIDC `web-app` applications access **Google Cloud services** such as **BigQuery** on behalf of the currently authenticated users who have enabled OpenID Connect (Authorization Code Flow) permissions to such services in their Google Developer Consoles."
msgstr "您可以让Quarkus OIDC `web-app` 应用程序代表当前认证的用户访问 *谷歌云服务* ，如 *BigQuery* ，这些用户在其谷歌开发者控制台中启用了OpenID Connect（授权代码流）权限来访问这些服务。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:864
#, fuzzy
msgid "It is super easy to do with https://github.com/quarkiverse[Quarkiverse] https://github.com/quarkiverse/quarkiverse-google-cloud-services[Google Cloud Services], only add the https://github.com/quarkiverse/quarkiverse-google-cloud-services/releases/latest[latest tag] service dependency, for example:"
msgstr "使用 link:https://github.com/quarkiverse[Quarkiverse] link:https://github.com/quarkiverse/quarkiverse-google-cloud-services[谷歌云服务] 超级容易，只需添加 link:https://github.com/quarkiverse/quarkiverse-google-cloud-services/releases/latest[最新的标签] 服务依赖，例如。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:873
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkiverse.googlecloudservices</groupId>\n"
"    <artifactId>quarkus-google-cloud-bigquery</artifactId>\n"
"    <version>${quarkiverse.googlecloudservices.version}</version>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:879
#, no-wrap
msgid "implementation(\"io.quarkiverse.googlecloudservices:quarkus-google-cloud-bigquery:${quarkiverse.googlecloudservices.version}\")\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:882
#, fuzzy
msgid "and configure Google OIDC properties:"
msgstr "并配置谷歌OIDC属性。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:889
#, no-wrap
msgid ""
"quarkus.oidc.provider=google\n"
"quarkus.oidc.client-id={GOOGLE_CLIENT_ID}\n"
"quarkus.oidc.credentials.secret={GOOGLE_CLIENT_SECRET}\n"
"quarkus.oidc.token.issuer=https://accounts.google.com\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/security-openid-connect-web-authentication.adoc:891
#, fuzzy, no-wrap
msgid "Provider Endpoint configuration"
msgstr "提供者端点配置"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:894
#, fuzzy
msgid "OIDC `web-app` application needs to know OpenID Connect provider's authorization, token, `JsonWebKey` (JWK) set and possibly `UserInfo`, introspection and end session (RP-initiated logout) endpoint addresses."
msgstr "OIDC `web-app` 应用程序需要知道OpenID Connect提供者的授权、令牌、 `JsonWebKey` (JWK)集，可能还有 `UserInfo` 、反省和结束会话（RP发起的注销）的端点地址。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:896
#, fuzzy
msgid "By default they are discovered by adding a `/.well-known/openid-configuration` path to the configured `quarkus.oidc.auth-server-url`."
msgstr "默认情况下，它们是通过在配置的 `quarkus.oidc.auth-server-url` ，添加一个 `/.well-known/openid-configuration` 路径来发现的。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:898
#, fuzzy
msgid "Alternatively, if the discovery endpoint is not available or you would like to save on the discovery endpoint roundtrip, you can disable the discovery and configure them with relative path values, for example:"
msgstr "另外，如果发现端点不可用，或者你想节省发现端点的往返费用，你可以禁用发现，用相对路径值配置它们，比如说。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:915
#, no-wrap
msgid ""
"quarkus.oidc.auth-server-url=http://localhost:8180/realms/quarkus\n"
"quarkus.oidc.discovery-enabled=false\n"
"# Authorization endpoint: http://localhost:8180/realms/quarkus/protocol/openid-connect/auth\n"
"quarkus.oidc.authorization-path=/protocol/openid-connect/auth\n"
"# Token endpoint: http://localhost:8180/realms/quarkus/protocol/openid-connect/token\n"
"quarkus.oidc.token-path=/protocol/openid-connect/token\n"
"# JWK set endpoint: http://localhost:8180/realms/quarkus/protocol/openid-connect/certs\n"
"quarkus.oidc.jwks-path=/protocol/openid-connect/certs\n"
"# UserInfo endpoint: http://localhost:8180/realms/quarkus/protocol/openid-connect/userinfo\n"
"quarkus.oidc.user-info-path=/protocol/openid-connect/userinfo\n"
"# Token Introspection endpoint: http://localhost:8180/realms/quarkus/protocol/openid-connect/token/introspect\n"
"quarkus.oidc.introspection-path=/protocol/openid-connect/token/introspect\n"
"# End session endpoint: http://localhost:8180/realms/quarkus/protocol/openid-connect/logout\n"
"quarkus.oidc.end-session-path=/protocol/openid-connect/logout\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/security-openid-connect-web-authentication.adoc:917
#, fuzzy, no-wrap
msgid "Token Propagation"
msgstr "令牌传播"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:919
#, fuzzy
msgid "Please see xref:security-openid-connect-client.adoc#token-propagation[Token Propagation] section about the Authorization Code Flow access token propagation to the downstream services."
msgstr "关于授权代码流访问令牌传播到下游服务，请参见 link:security-openid-connect-client.html#token-propagation[令牌] 传播部分。"

#. type: Title ===
#: upstream/_guides/security-openid-connect-web-authentication.adoc:921
#, fuzzy, no-wrap
msgid "Oidc Provider Client Authentication"
msgstr "OIDC供应商客户认证"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:924
#, fuzzy
msgid "`quarkus.oidc.runtime.OidcProviderClient` is used when a remote request to an OpenID Connect Provider has to be done. It has to authenticate to the OpenID Connect Provider when the authorization code has to be exchanged for the ID, access and refresh tokens, when the ID and access tokens have to be refreshed or introspected."
msgstr " `quarkus.oidc.runtime.OidcProviderClient` 当需要对OpenID连接提供方进行远程请求时使用。当需要交换ID、访问和刷新令牌的授权码时，当需要刷新或检查ID和访问令牌时，它必须对OpenID连接提供者进行认证。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:926
#, fuzzy
msgid "All the https://openid.net/specs/openid-connect-core-1_0.html#ClientAuthentication[OIDC Client Authentication] options are supported, for example:"
msgstr "所有的 link:https://openid.net/specs/openid-connect-core-1_0.html#ClientAuthentication[OIDC客户认证] 选项都被支持，例如。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:928
#, fuzzy
msgid "`client_secret_basic`:"
msgstr " `client_secret_basic` :"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:934
#, no-wrap
msgid ""
"quarkus.oidc.auth-server-url=http://localhost:8180/realms/quarkus/\n"
"quarkus.oidc.client-id=quarkus-app\n"
"quarkus.oidc.credentials.secret=mysecret\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:937
#, fuzzy
msgid "or"
msgstr "或"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:943
#, no-wrap
msgid ""
"quarkus.oidc.auth-server-url=http://localhost:8180/realms/quarkus/\n"
"quarkus.oidc.client-id=quarkus-app\n"
"quarkus.oidc.credentials.client-secret.value=mysecret\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:946
#: upstream/_guides/security-openid-connect-web-authentication.adoc:978
#, fuzzy
msgid "or with the secret retrieved from a xref:credentials-provider.adoc[CredentialsProvider]:"
msgstr "或者用从 link:credentials-provider.html[CredentialsProvider] 中获取的秘密。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:951
#: upstream/_guides/security-openid-connect-web-authentication.adoc:983
#, no-wrap
msgid ""
"quarkus.oidc.auth-server-url=http://localhost:8180/realms/quarkus/\n"
"quarkus.oidc.client-id=quarkus-app\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:956
#, no-wrap
msgid ""
"# This is a key which will be used to retrieve a secret from the map of credentials returned from CredentialsProvider\n"
"quarkus.oidc.credentials.client-secret.provider.key=mysecret-key\n"
"# Set it only if more than one CredentialsProvider can be registered\n"
"quarkus.oidc.credentials.client-secret.provider.name=oidc-credentials-provider\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:959
#, fuzzy
msgid "`client_secret_post`:"
msgstr " `client_secret_post` :"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:966
#, no-wrap
msgid ""
"quarkus.oidc.auth-server-url=http://localhost:8180/realms/quarkus/\n"
"quarkus.oidc.client-id=quarkus-app\n"
"quarkus.oidc.credentials.client-secret.value=mysecret\n"
"quarkus.oidc.credentials.client-secret.method=post\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:969
#, fuzzy
msgid "`client_secret_jwt`, signature algorithm is HS256:"
msgstr " `client_secret_jwt` ，签名算法是HS256。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:975
#, no-wrap
msgid ""
"quarkus.oidc.auth-server-url=http://localhost:8180/realms/quarkus/\n"
"quarkus.oidc.client-id=quarkus-app\n"
"quarkus.oidc.credentials.jwt.secret=AyM1SysPpbyDfgZld3umj1qzKObwVMkoqQ-EstJQLr_T-1qS0gZH75aKtMN3Yj0iPS4hcgUuTwjAzZr1Z9CAow\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:988
#, no-wrap
msgid ""
"# This is a key which will be used to retrieve a secret from the map of credentials returned from CredentialsProvider\n"
"quarkus.oidc.credentials.jwt.secret-provider.key=mysecret-key\n"
"# Set it only if more than one CredentialsProvider can be registered\n"
"quarkus.oidc.credentials.jwt.secret-provider.name=oidc-credentials-provider\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:991
#, fuzzy
msgid "`private_key_jwt` with the PEM key file, signature algorithm is RS256:"
msgstr " `private_key_jwt` 与PEM密钥文件，签名算法是RS256。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:997
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1026
#, no-wrap
msgid ""
"quarkus.oidc.auth-server-url=http://localhost:8180/realms/quarkus/\n"
"quarkus.oidc.client-id=quarkus-app\n"
"quarkus.oidc.credentials.jwt.key-file=privateKey.pem\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1000
#, fuzzy
msgid "`private_key_jwt` with the key store file, signature algorithm is RS256:"
msgstr " `private_key_jwt` 与密钥存储文件，签名算法是RS256。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1008
#, no-wrap
msgid ""
"quarkus.oidc.auth-server-url=http://localhost:8180/realms/quarkus/\n"
"quarkus.oidc.client-id=quarkus-app\n"
"quarkus.oidc.credentials.jwt.key-store-file=keystore.jks\n"
"quarkus.oidc.credentials.jwt.key-store-password=mypassword\n"
"quarkus.oidc.credentials.jwt.key-password=mykeypassword\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1011
#, no-wrap
msgid ""
"# Private key alias inside the keystore\n"
"quarkus.oidc.credentials.jwt.key-id=mykeyAlias\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1014
#, fuzzy
msgid "Using `client_secret_jwt` or `private_key_jwt` authentication methods ensures that no client secret goes over the wire."
msgstr "使用 `client_secret_jwt` 或 `private_key_jwt` 认证方法，可以确保没有客户的秘密在网上流传。"

#. type: Title ====
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1015
#, fuzzy, no-wrap
msgid "Additional JWT Authentication options"
msgstr "额外的JWT认证选项"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1018
#, fuzzy
msgid "If `client_secret_jwt`, `private_key_jwt` authentication methods are used or an Apple `post_jwt` method is used then the JWT signature algorithm, key identifier, audience, subject and issuer can be customized, for example:"
msgstr "如果使用 `client_secret_jwt` 、 `private_key_jwt` 认证方法或使用 `Apple` 、 `post_jwt` 方法，那么JWT签名算法、密钥标识符、受众、主体和发行人都可以定制，例如。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1022
#, no-wrap
msgid "# private_key_jwt client authentication\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1031
#, no-wrap
msgid ""
"# This is a token key identifier 'kid' header - set it if your OpenID Connect provider requires it.\n"
"# Note if the key is represented in a JSON Web Key (JWK) format with a `kid` property then\n"
"# using 'quarkus.oidc.credentials.jwt.token-key-id' is not necessary.\n"
"quarkus.oidc.credentials.jwt.token-key-id=mykey\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1034
#, no-wrap
msgid ""
"# Use RS512 signature algorithm instead of the default RS256\n"
"quarkus.oidc.credentials.jwt.signature-algorithm=RS512\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1037
#, no-wrap
msgid ""
"# The token endpoint URL is the default audience value, use the base address URL instead:\n"
"quarkus.oidc.credentials.jwt.audience=${quarkus.oidc-client.auth-server-url}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1040
#, no-wrap
msgid ""
"# custom subject instead of the client id :\n"
"quarkus.oidc.credentials.jwt.subject=custom-subject\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1043
#, no-wrap
msgid ""
"# custom issuer instead of the client id :\n"
"quarkus.oidc.credentials.jwt.issuer=custom-issuer\n"
msgstr ""

#. type: Title ====
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1045
#, fuzzy, no-wrap
msgid "Apple POST JWT"
msgstr "苹果POST JWT"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1048
#, fuzzy
msgid "Apple OpenID Connect Provider uses a `client_secret_post` method where a secret is a JWT produced with a `private_key_jwt` authentication method but with Apple account specific issuer and subject claims."
msgstr "苹果OpenID连接提供商使用 `client_secret_post` 方法，其中秘密是用 `private_key_jwt` 认证方法产生的JWT，但有苹果账户特定的发行者和主体索赔。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1050
#, fuzzy
msgid "`quarkus-oidc` supports a non-standard `client_secret_post_jwt` authentication method which can be configured as follows:"
msgstr " `quarkus-oidc` 支持一种非标准的 认证方法，可按以下方式配置。 `client_secret_post_jwt` "

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1055
#, no-wrap
msgid ""
"# Apple provider configuration sets a 'client_secret_post_jwt' authentication method\n"
"quarkus.oidc.provider=apple\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1060
#, no-wrap
msgid ""
"quarkus.oidc.client-id=${apple.client-id}\n"
"quarkus.oidc.credentials.jwt.key-file=ecPrivateKey.pem\n"
"quarkus.oidc.credentials.jwt.token-key-id=${apple.key-id}\n"
"# Apple provider configuration sets ES256 signature algorithm\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1063
#, no-wrap
msgid ""
"quarkus.oidc.credentials.jwt.subject=${apple.subject}\n"
"quarkus.oidc.credentials.jwt.issuer=${apple.issuer}\n"
msgstr ""

#. type: Title ====
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1065
#, fuzzy, no-wrap
msgid "Mutual TLS"
msgstr "相互之间的TLS"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1068
#, fuzzy
msgid "Some OpenID Connect Providers may require that a client is authenticated as part of the `Mutual TLS` (`mTLS`) authentication process."
msgstr "一些OpenID连接供应商可能要求客户端作为 `Mutual TLS` ( `mTLS` )认证过程的一部分进行认证。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1070
#, fuzzy
msgid "`quarkus-oidc` can be configured as follows to support `mTLS`:"
msgstr " `quarkus-oidc` 可以按以下方式配置，以支持 。 `mTLS` "

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1074
#, no-wrap
msgid "quarkus.oidc.tls.verification=certificate-validation\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1078
#, no-wrap
msgid ""
"# Keystore configuration\n"
"quarkus.oidc.tls.key-store-file=client-keystore.jks\n"
"quarkus.oidc.tls.key-store-password=${key-store-password}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1082
#, no-wrap
msgid ""
"# Add more keystore properties if needed:\n"
"#quarkus.oidc.tls.key-store-alias=keyAlias\n"
"#quarkus.oidc.tls.key-store-alias-password=keyAliasPassword\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1088
#, no-wrap
msgid ""
"# Truststore configuration\n"
"quarkus.oidc.tls.trust-store-file=client-truststore.jks\n"
"quarkus.oidc.tls.trust-store-password=${trust-store-password}\n"
"# Add more truststore properties if needed:\n"
"#quarkus.oidc.tls.trust-store-alias=certAlias\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1091
#, fuzzy, no-wrap
msgid "Testing"
msgstr "测试"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1094
#, fuzzy
msgid "Start by adding the following dependencies to your test project:"
msgstr "首先在你的测试项目中添加以下依赖项。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1114
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>net.sourceforge.htmlunit</groupId>\n"
"    <artifactId>htmlunit</artifactId>\n"
"    <exclusions>\n"
"        <exclusion>\n"
"            <groupId>org.eclipse.jetty</groupId>\n"
"            <artifactId>*</artifactId>\n"
"       </exclusion>\n"
"    </exclusions>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-junit5</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1121
#, no-wrap
msgid ""
"testImplementation(\"net.sourceforge.htmlunit:htmlunit\")\n"
"testImplementation(\"io.quarkus:quarkus-junit5\")\n"
msgstr ""

#. type: Title ====
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1124
#, fuzzy, no-wrap
msgid "Wiremock"
msgstr "缆车"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1127
#, fuzzy
msgid "Add the following dependency:"
msgstr "添加以下依赖关系。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1136
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-test-oidc-server</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1142
#, no-wrap
msgid "testImplementation(\"io.quarkus:quarkus-test-oidc-server\")\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1145
#, fuzzy
msgid "Prepare the REST test endpoints, set `application.properties`, for example:"
msgstr "准备好REST测试端点，设置 `application.properties` ，例如。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1153
#, no-wrap
msgid ""
"# keycloak.url is set by OidcWiremockTestResource\n"
"quarkus.oidc.auth-server-url=${keycloak.url}/realms/quarkus/\n"
"quarkus.oidc.client-id=quarkus-web-app\n"
"quarkus.oidc.credentials.secret=secret\n"
"quarkus.oidc.application-type=web-app\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1156
#, fuzzy
msgid "and finally write the test code, for example:"
msgstr "并最终写出测试代码，例如：。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1160
#, no-wrap
msgid "import static org.junit.jupiter.api.Assertions.assertEquals;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1162
#, no-wrap
msgid "import org.junit.jupiter.api.Test;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1167
#, no-wrap
msgid ""
"import com.gargoylesoftware.htmlunit.SilentCssErrorHandler;\n"
"import com.gargoylesoftware.htmlunit.WebClient;\n"
"import com.gargoylesoftware.htmlunit.html.HtmlForm;\n"
"import com.gargoylesoftware.htmlunit.html.HtmlPage;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1171
#, no-wrap
msgid ""
"import io.quarkus.test.common.QuarkusTestResource;\n"
"import io.quarkus.test.junit.QuarkusTest;\n"
"import io.quarkus.test.oidc.server.OidcWiremockTestResource;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1175
#, no-wrap
msgid ""
"@QuarkusTest\n"
"@QuarkusTestResource(OidcWiremockTestResource.class)\n"
"public class CodeFlowAuthorizationTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1181
#, no-wrap
msgid ""
"    @Test\n"
"    public void testCodeFlow() throws Exception {\n"
"        try (final WebClient webClient = createWebClient()) {\n"
"            // the test REST endpoint listens on '/code-flow'\n"
"            HtmlPage page = webClient.getPage(\"http://localhost:8081/code-flow\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1186
#, no-wrap
msgid ""
"            HtmlForm form = page.getFormByName(\"form\");\n"
"            // user 'alice' has the 'user' role\n"
"            form.getInputByName(\"username\").type(\"alice\");\n"
"            form.getInputByName(\"password\").type(\"alice\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1188
#, no-wrap
msgid "            page = form.getInputByValue(\"login\").click();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1192
#, no-wrap
msgid ""
"            assertEquals(\"alice\", page.getBody().asText());\n"
"        }\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1199
#, no-wrap
msgid ""
"    private WebClient createWebClient() {\n"
"        WebClient webClient = new WebClient();\n"
"        webClient.setCssErrorHandler(new SilentCssErrorHandler());\n"
"        return webClient;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1202
#, fuzzy
msgid "`OidcWiremockTestResource` recognizes `alice` and `admin` users. The user `alice` has the `user` role only by default - it can be customized with a `quarkus.test.oidc.token.user-roles` system property. The user `admin` has the `user` and `admin` roles by default - it can be customized with a `quarkus.test.oidc.token.admin-roles` system property."
msgstr " `OidcWiremockTestResource` 识别 和 用户。用户 ，默认情况下只有 角色--它可以通过 系统属性进行定制。用户 默认拥有 和 角色 - 它可以通过 系统属性进行定制。 `alice` `admin` `alice` `user` `quarkus.test.oidc.token.user-roles` `admin` `user` `admin` `quarkus.test.oidc.token.admin-roles` "

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1204
#, fuzzy
msgid "Additionally, `OidcWiremockTestResource` set token issuer and audience to `https://service.example.com` which can be customized with `quarkus.test.oidc.token.issuer` and `quarkus.test.oidc.token.audience` system properties."
msgstr "此外， `OidcWiremockTestResource` ，将代币发行者和受众设置为 `<a href=\"https://service.example.com\" class=\"bare\">https://service.example.com</a>` 这可以通过 `quarkus.test.oidc.token.issuer` 和 `quarkus.test.oidc.token.audience` 系统属性来定制。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1206
#, fuzzy
msgid "`OidcWiremockTestResource` can be used to emulate all OpenID Connect providers."
msgstr " `OidcWiremockTestResource` 可以用来模拟所有的OpenID Connect提供商。"

#. type: Title ====
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1208
#, fuzzy, no-wrap
msgid "Dev Services for Keycloak"
msgstr "为Keycloak提供的开发服务"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1212
#, fuzzy
msgid "Using xref:security-openid-connect-dev-services.adoc[Dev Services for Keycloak] is recommended for the integration testing against Keycloak.  `Dev Services for Keycloak` will launch and initialize a test container: it will create a `quarkus` realm, a `quarkus-app` client (`secret` secret) and add `alice` (`admin` and `user` roles) and `bob` (`user` role) users, where all of these properties can be customized."
msgstr "建议使用 link:security-openid-connect-dev-services.html[Dev Services for Keyclo] ak进行针对Keycloak的集成测试。 `Dev Services for Keycloak` 将启动和初始化一个测试容器：它将创建一个 `quarkus` 领域，一个 `quarkus-app` 客户端（ `secret` 秘密）并添加 `alice` （ `admin` 和 `user` 角色）和 `bob` （ `user` 角色）用户，其中所有这些属性都可以被定制。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1214
#, fuzzy
msgid "First prepare `application.properties`. You can start with a completely empty `application.properties` as `Dev Services for Keycloak` will register `quarkus.oidc.auth-server-url` pointing to the running test container as well as `quarkus.oidc.client-id=quarkus-app` and `quarkus.oidc.credentials.secret=secret`."
msgstr "首先准备 `application.properties` 。你可以从一个完全空的 `application.properties` 开始，因为 `Dev Services for Keycloak` 将注册指向正在运行的测试容器的 `quarkus.oidc.auth-server-url` ，以及 `quarkus.oidc.client-id=quarkus-app` 和 `quarkus.oidc.credentials.secret=secret` 。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1216
#, fuzzy
msgid "But if you already have all the required `quarkus-oidc` properties configured then you only need to associate `quarkus.oidc.auth-server-url` with the `prod` profile for `Dev Services for Keycloak`to start a container, for example:"
msgstr "但是如果你已经配置了所有需要的 `quarkus-oidc` 属性，那么你只需要将 `quarkus.oidc.auth-server-url` 与 \"Keycloak的开发服务 \"的 `prod` 配置文件联系起来，以启动一个容器，例如。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1220
#, no-wrap
msgid "%prod.quarkus.oidc.auth-server-url=http://localhost:8180/realms/quarkus\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1223
#, fuzzy
msgid "If a custom realm file has to be imported into Keycloak before running the tests then you can configure `Dev Services for Keycloak` as follows:"
msgstr "如果在运行测试之前必须将自定义境界文件导入Keycloak，那么你可以按以下方式配置 `Dev Services for Keycloak` 。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1228
#, no-wrap
msgid ""
"%prod.quarkus.oidc.auth-server-url=http://localhost:8180/realms/quarkus\n"
"quarkus.keycloak.devservices.realm-path=quarkus-realm.json\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1232
#, fuzzy
msgid "Finally write a test code the same way as it is described in the <<integration-testing-wiremock, Wiremock>> section above.  The only difference is that `@QuarkusTestResource` is no longer needed:"
msgstr "最后按照上面 link:#integration-testing-wiremock[Wiremock] 部分描述的方式写一个测试代码。唯一的区别是，不再需要 `@QuarkusTestResource` 。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1238
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class CodeFlowAuthorizationTest {\n"
"}\n"
msgstr ""

#. type: Title ====
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1241
#, fuzzy, no-wrap
msgid "KeycloakTestResourceLifecycleManager"
msgstr "KeycloakTestResourceLifecycleManager"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1245
#, fuzzy
msgid "If you need to do the integration testing against Keycloak then you are encouraged to do it with <<integration-testing-keycloak-devservices,Dev Services For Keycloak>>.  Use `KeycloakTestResourceLifecycleManager` for your tests only if there is a good reason not to use `Dev Services for Keycloak`."
msgstr "如果你需要对Keycloak进行集成测试，那么我们鼓励你使用 link:#integration-testing-keycloak-devservices[Keycloak的开发服务] 来进行。只有在有充分理由不使用 `Dev Services for Keycloak` 的情况下，才使用 `KeycloakTestResourceLifecycleManager` 进行测试。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1247
#, fuzzy
msgid "Start with adding the following dependency:"
msgstr "首先要添加以下依赖关系。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1256
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-test-keycloak-server</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1262
#, no-wrap
msgid "testImplementation(\"io.quarkus:quarkus-test-keycloak-server\")\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1265
#, fuzzy
msgid "which provides `io.quarkus.test.keycloak.server.KeycloakTestResourceLifecycleManager` - an implementation of `io.quarkus.test.common.QuarkusTestResourceLifecycleManager` which starts a Keycloak container."
msgstr "它提供了 `io.quarkus.test.keycloak.server.KeycloakTestResourceLifecycleManager` - 一个实现 `io.quarkus.test.common.QuarkusTestResourceLifecycleManager` ，启动一个Keycloak容器。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1267
#, fuzzy
msgid "And configure the Maven Surefire plugin as follows:"
msgstr "并按以下方式配置Maven Surefire插件。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1283
#, no-wrap
msgid ""
"<plugin>\n"
"    <artifactId>maven-surefire-plugin</artifactId>\n"
"    <configuration>\n"
"        <systemPropertyVariables>\n"
"            <!-- or, alternatively, configure 'keycloak.version' -->\n"
"            <keycloak.docker.image>${keycloak.docker.image}</keycloak.docker.image>\n"
"            <!--\n"
"              Disable HTTPS if required:\n"
"              <keycloak.use.https>false</keycloak.use.https>\n"
"            -->\n"
"        </systemPropertyVariables>\n"
"    </configuration>\n"
"</plugin>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1286
#, fuzzy
msgid "(and similarly the Maven Failsafe plugin when testing in native image)."
msgstr "(和类似的Maven Failsafe插件，在本地图像中测试时）。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1289
#, fuzzy
msgid "And now set the configuration and write the test code the same way as it is described in the <<integration-testing-wiremock, Wiremock>> section above.  The only difference is the name of `QuarkusTestResource`:"
msgstr "现在设置配置和编写测试代码的方式与上面 link:#integration-testing-wiremock[Wiremock] 部分描述的一样。唯一不同的是 `QuarkusTestResource` 的名称。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1293
#, no-wrap
msgid "import io.quarkus.test.keycloak.server.KeycloakTestResourceLifecycleManager;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1298
#, no-wrap
msgid ""
"@QuarkusTest\n"
"@QuarkusTestResource(KeycloakTestResourceLifecycleManager.class)\n"
"public class CodeFlowAuthorizationTest {\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1301
#, fuzzy
msgid "`KeycloakTestResourceLifecycleManager` registers `alice` and `admin` users. The user `alice` has the `user` role only by default - it can be customized with a `keycloak.token.user-roles` system property. The user `admin` has the `user` and `admin` roles by default - it can be customized with a `keycloak.token.admin-roles` system property."
msgstr " `KeycloakTestResourceLifecycleManager` 注册了 和 用户。用户 ，默认情况下只有 角色 - 它可以通过 系统属性进行定制。用户 默认拥有 和 角色 - 它可以通过 系统属性进行定制。 `alice` `admin` `alice` `user` `keycloak.token.user-roles` `admin` `user` `admin` `keycloak.token.admin-roles` "

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1304
#, fuzzy
msgid "By default, `KeycloakTestResourceLifecycleManager` uses HTTPS to initialize a Keycloak instance which can be disabled with `keycloak.use.https=false`.  Default realm name is `quarkus` and client id - `quarkus-web-app` - set `keycloak.realm` and `keycloak.web-app.client` system properties to customize the values if needed."
msgstr "默认情况下， `KeycloakTestResourceLifecycleManager` 使用HTTPS来初始化Keycloak实例，可以用 `keycloak.use.https=false` 来禁用。默认的境界名称是 `quarkus` ，客户端ID - `quarkus-web-app` - 如果需要，可以设置 `keycloak.realm` 和 `keycloak.web-app.client` 系统属性来定制数值。"

#. type: Title ====
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1306
#, fuzzy, no-wrap
msgid "TestSecurity annotation"
msgstr "TestSecurity注解"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1309
#, fuzzy
msgid "Please see xref:security-openid-connect.adoc#integration-testing-security-annotation[Use TestingSecurity with injected JsonWebToken] section for more information about using `@TestSecurity` and `@OidcSecurity` annotations for testing the `web-app` application endpoint code which depends on the injected ID and access `JsonWebToken` as well as `UserInfo` and `OidcConfigurationMetadata`."
msgstr "请参阅使用 link:security-openid-connect.html#integration-testing-security-annotation[TestingSecurity与注入的JsonWebToken] 部分，了解更多关于使用 `@TestSecurity` 和 `@OidcSecurity` 注释来测试 `web-app` 应用程序端点代码的信息，该代码依赖于注入的ID和访问 `JsonWebToken` 以及 `UserInfo` 和 `OidcConfigurationMetadata` 。"

#. type: Title ===
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1310
#, fuzzy, no-wrap
msgid "How to check the errors in the logs"
msgstr "如何检查日志中的错误"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1313
#, fuzzy
msgid "Please enable `io.quarkus.oidc.runtime.OidcProvider` `TRACE` level logging to see more details about the token verification errors:"
msgstr "请启用 `io.quarkus.oidc.runtime.OidcProvider` `TRACE` 级日志，以查看有关令牌验证错误的更多细节。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1318
#, no-wrap
msgid ""
"quarkus.log.category.\"io.quarkus.oidc.runtime.OidcProvider\".level=TRACE\n"
"quarkus.log.category.\"io.quarkus.oidc.runtime.OidcProvider\".min-level=TRACE\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1321
#, fuzzy
msgid "Please enable `io.quarkus.oidc.runtime.OidcRecorder` `TRACE` level logging to see more details about the OidcProvider client initialization errors:"
msgstr "请启用 `io.quarkus.oidc.runtime.OidcRecorder` `TRACE` 级日志，以查看关于OidcProvider客户端初始化错误的更多细节。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1326
#, no-wrap
msgid ""
"quarkus.log.category.\"io.quarkus.oidc.runtime.OidcRecorder\".level=TRACE\n"
"quarkus.log.category.\"io.quarkus.oidc.runtime.OidcRecorder\".min-level=TRACE\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1328
#, fuzzy, no-wrap
msgid "Running behind a reverse proxy"
msgstr "在反向代理后面运行"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1331
#, fuzzy
msgid "OIDC authentication mechanism can be affected if your Quarkus application is running behind a reverse proxy/gateway/firewall when HTTP `Host` header may be reset to the internal IP address, HTTPS connection may be terminated, etc. For example, an authorization code flow `redirect_uri` parameter may be set to the internal host instead of the expected external one."
msgstr "如果你的Quarkus应用程序在反向代理/网关/防火墙后面运行，OIDC认证机制可能会受到影响，此时HTTP `Host` 头可能被重置为内部IP地址，HTTPS连接可能被终止，等等。例如，授权码流 `redirect_uri` 参数可能被设置为内部主机而不是预期的外部主机。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1333
#, fuzzy
msgid "In such cases configuring Quarkus to recognize the original headers forwarded by the proxy will be required, see xref:http-reference.adoc#reverse-proxy[Running behind a reverse proxy] Vert.x documentation section for more information."
msgstr "在这种情况下，需要配置Quarkus来识别由代理转发的原始头信息，更多信息请参见 link:http-reference.html#reverse-proxy[运行在反向代理] Vert.x文档部分。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1335
#, fuzzy
msgid "For example, if your Quarkus endpoint runs in a cluster behind Kubernetes Ingress then a redirect from the OpenID Connect Provider back to this endpoint may not work since the calculated `redirect_uri` parameter may point to the internal endpoint address. This problem can be resolved with the following configuration:"
msgstr "例如，如果你的Quarkus端点在Kubernetes Ingress后面的集群中运行，那么从OpenID Connect Provider重定向到这个端点可能会不工作，因为计算的 `redirect_uri` 参数可能指向内部端点地址。这个问题可以通过以下配置来解决。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1342
#, no-wrap
msgid ""
"quarkus.http.proxy.proxy-address-forwarding=true\n"
"quarkus.http.proxy.allow-forwarded=false\n"
"quarkus.http.proxy.enable-forwarded-host=true\n"
"quarkus.http.proxy.forwarded-host-header=X-ORIGINAL-HOST\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1345
#, fuzzy
msgid "where `X-ORIGINAL-HOST` is set by Kubernetes Ingress to represent the external endpoint address."
msgstr "其中 `X-ORIGINAL-HOST` ，由Kubernetes Ingress设置，代表外部端点地址。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1347
#, fuzzy
msgid "`quarkus.oidc.authentication.force-redirect-https-scheme` property may also be used when the Quarkus application is running behind a SSL terminating reverse proxy."
msgstr " `quarkus.oidc.authentication.force-redirect-https-scheme` 属性也可以在Quarkus应用程序在SSL终端反向代理后面运行时使用。"

#. type: Title ===
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1348
#, fuzzy, no-wrap
msgid "External and Internal Access to OpenID Connect Provider"
msgstr "外部和内部访问OpenID连接提供者"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1352
#, fuzzy
msgid "Note that the OpenID Connect Provider externally accessible authorization, logout and other endpoints may have different HTTP(S) URLs compared to the URLs auto-discovered or configured relative to `quarkus.oidc.auth-server-url` internal URL.  In such cases an issuer verification failure may be reported by the endpoint and redirects to the externally accessible Connect Provider endpoints may fail."
msgstr "请注意，OpenID Connect Provider外部可访问的授权、注销和其他端点的HTTP(S)URL可能与自动发现的或相对于 `quarkus.oidc.auth-server-url` 内部URL配置的URL不同。在这种情况下，端点可能会报告发行人验证失败，重定向到外部可访问的连接提供者端点可能会失败。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1355
#, fuzzy
msgid "In such cases, if you work with Keycloak then please start it with a `KEYCLOAK_FRONTEND_URL` system property set to the externally accessible base URL.  If you work with other Openid Connect providers then please check your provider's documentation."
msgstr "在这种情况下，如果你使用Keycloak，那么请用 `KEYCLOAK_FRONTEND_URL` 系统属性设置为外部可访问的基本URL来启动它。如果你使用其他Openid Connect提供商，那么请查看你的提供商的文档。"

#. type: Title ===
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1356
#, fuzzy, no-wrap
msgid "Customize authentication requests"
msgstr "自定义认证请求"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1359
#, fuzzy
msgid "By default, only the `response_type` (set to `code`), `scope` (set to 'openid'), `client_id`, `redirect_uri` and `state` properties are passed as HTTP query parameters to the OpenID Connect provider's authorization endpoint when the user is redirected to it to authenticate."
msgstr "默认情况下，只有 `response_type` （设置为 `code` ）、 `scope` （设置为'openid'）、 `client_id` 、 `redirect_uri` 和 `state` 属性在用户被重定向到OpenID Connect提供商的授权端点进行认证时，作为HTTP查询参数传递给它。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1361
#, fuzzy
msgid "You can add more properties to it with `quarkus.oidc.authentication.extra-params`. For example, some OpenID Connect providers may choose to return the authorization code as part of the redirect URI's fragment which would break the authentication process - it can be fixed as follows:"
msgstr "你可以用 `quarkus.oidc.authentication.extra-params` ，给它添加更多的属性。例如，一些OpenID Connect提供商可能会选择将授权码作为重定向URI片段的一部分返回，这将破坏认证过程--可以按以下方式解决。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1365
#, no-wrap
msgid "quarkus.oidc.authentication.extra-params.response_mode=query\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1367
#, fuzzy, no-wrap
msgid "Customize authentication error response"
msgstr "自定义认证错误响应"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1370
#, fuzzy
msgid "If the user authentication has failed at the OpenID Connect Authorization endpoint, for example, due to an invalid scope or other invalid parameters included in the redirect to the provider, then the provider will redirect the user back to Quarkus not with the `code` but `error` and `error_description` parameters."
msgstr "如果用户认证在OpenId Connect授权端点失败，例如，由于无效的范围或重定向到提供商的其他无效参数，那么提供商将把用户重定向回Quarkus，不是用 `code` ，而是 `error` 和 `error_description` 参数。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1372
#, fuzzy
msgid "In such cases HTTP `401` will be returned by default. However, you can instead request that a custom public error endpoint is called in order to return a user friendly HTML error page. Use `quarkus.oidc.authentication.error-path`, for example:"
msgstr "在这种情况下，HTTP `401` 将被默认返回。然而，你可以要求调用一个自定义的公共错误端点，以便返回一个用户友好的HTML错误页面。例如，使用 `quarkus.oidc.authentication.error-path` 。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1376
#, no-wrap
msgid "quarkus.oidc.authentication.error-path=/error\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1379
#, fuzzy
msgid "It has to start fron a forward slash and be relative to the current endpoint's base URI. For example, if it is set as '/error' and the current request URI is `https://localhost:8080/callback?error=invalid_scope` then a final redirect will be made to `https://localhost:8080/error?error=invalid_scope`."
msgstr "它必须以正斜杠开头，并与当前端点的基本URI相对。例如，如果它被设置为\"/error\"，而当前的请求URI是 `<a href=\"https://localhost:8080/callback?error=invalid_scope\" class=\"bare\">https://localhost:8080/callback?error=invalid_scope</a>` 那么最终的重定向将被发送到 `<a href=\"https://localhost:8080/error?error=invalid_scope\" class=\"bare\">https://localhost:8080/error?error=invalid_scope</a>` ."

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1381
#, fuzzy
msgid "It is important that this error endpoint is a public resource to avoid the user redirected to this page be authenticated again."
msgstr "重要的是，这个错误端点是一个公共资源，以避免被重定向到这个页面的用户被再次验证。"

#. type: Title ==
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1382
#, fuzzy, no-wrap
msgid "Configuration Reference"
msgstr "配置参考"

#. type: Title ==
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1386
#, fuzzy, no-wrap
msgid "References"
msgstr "参考文献"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1389
#, fuzzy
msgid "https://www.keycloak.org/documentation.html[Keycloak Documentation]"
msgstr "link:https://www.keycloak.org/documentation.html[Keycloak文档]"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1390
#, fuzzy
msgid "https://openid.net/connect/[OpenID Connect]"
msgstr "link:https://openid.net/connect/[OpenID连接]"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1391
#, fuzzy
msgid "https://tools.ietf.org/html/rfc7519[JSON Web Token]"
msgstr "link:https://tools.ietf.org/html/rfc7519[JSON网络令牌]"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1392
#, fuzzy
msgid "xref:security-openid-connect-providers.adoc[Well Known OpenID Connect providers]."
msgstr "link:security-openid-connect-providers.html[众所周知的OpenId连接供应商] 。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1393
msgid "xref:security-openid-connect-client.adoc[Quarkus - Using OpenID Connect and OAuth2 Client and Filters to manage access tokens]"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1394
msgid "xref:security-openid-connect-dev-services.adoc[Dev Services for Keycloak]"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1395
msgid "xref:security.adoc#oidc-jwt-oauth2-comparison[Summary of Quarkus OIDC, JWT and OAuth2 features]"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:1395
msgid "xref:security.adoc[Quarkus Security]"
msgstr ""
