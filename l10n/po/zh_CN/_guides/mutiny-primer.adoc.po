# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:52+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/mutiny-primer.adoc:6
#, fuzzy, no-wrap
msgid "Mutiny - Async for bare mortal"
msgstr "叛变--裸体凡人的异步行动"

#. type: Plain text
#: upstream/_guides/mutiny-primer.adoc:12
#, fuzzy
msgid "https://smallrye.io/smallrye-mutiny[Mutiny] is an intuitive, reactive programming library.  It is the primary model to write reactive applications with Quarkus."
msgstr "link:https://smallrye.io/smallrye-mutiny[Mutiny] 是一个直观的、反应式的编程库。它是用Quarkus编写反应式应用程序的主要模型。"

#. type: Title ==
#: upstream/_guides/mutiny-primer.adoc:13
#, fuzzy, no-wrap
msgid "An event-driven reactive programming API"
msgstr "一个事件驱动的反应式编程API"

#. type: Plain text
#: upstream/_guides/mutiny-primer.adoc:19
#, fuzzy
msgid "Mutiny is very different from the other reactive programming libraries.  It takes a different approach to design your program.  With Mutiny everything is event-driven: you receive events, and you react to them.  This event-driven aspect embraces the asynchronous nature of distributed systems and provides an elegant and precise way to express continuation."
msgstr "Mutiny与其他反应式编程库非常不同。它采取了不同的方法来设计你的程序。在Mutiny中，所有的东西都是事件驱动的：你接收事件，并对它们做出反应。这个事件驱动的方面包含了分布式系统的异步性，并提供了一种优雅而精确的方式来表达延续性。"

#. type: Plain text
#: upstream/_guides/mutiny-primer.adoc:21
#, fuzzy
msgid "Mutiny offers two types that are both event-driven and lazy:"
msgstr "Mutiny提供了两种类型，既是事件驱动的，又是懒惰的。"

#. type: Plain text
#: upstream/_guides/mutiny-primer.adoc:25
#, fuzzy
msgid "A `Uni` emits a single event (an item or a failure).  Unis are convenient to represent asynchronous actions that return 0 or 1 result.  A good example is the result of sending a message to a message broker queue."
msgstr "一个 `Uni` ，发出一个单一事件（一个项目或一个失败）。Unis便于表示返回0或1结果的异步行动。一个很好的例子是向一个消息代理队列发送消息的结果。"

#. type: Plain text
#: upstream/_guides/mutiny-primer.adoc:28
#, fuzzy
msgid "A `Multi` emits multiple events (n items, 1 failure or 1 completion).  Multis can represent streams of items, potentially unbounded.  A good example is receiving messages from a message broker queue."
msgstr "一个 `Multi` ，发出多个事件（n个项目，1个失败或1个完成）。Multis可以代表项目流，可能是无界的。一个很好的例子是接收来自消息代理队列的消息。"

#. type: Plain text
#: upstream/_guides/mutiny-primer.adoc:34
#, fuzzy
msgid "These two types allow representing any type of interactions.  They are event sources.  You observe them (_subscription_) and you get notified when they emit an item, a failure, or, in the case of a bounded Multi, a completion event.  When you (the subscriber) receive the event, you can process it (e.g., transform it, filter it).  With Mutiny, you are going to write code like _onX().action()_, which reads as “on item X do action”."
msgstr "这两种类型允许代表任何类型的互动。它们是事件源。你观察它们 _（订阅_ ），当它们发出一个项目、一个失败，或者在一个有界的Multi的情况下，一个完成事件时，你会得到通知。当你（订阅者）收到事件时，你可以对它进行处理（例如，转换它，过滤它）。使用Mutiny，你要写像 _onX().action()_ 这样的代码，读作 \"on item X do action\"。"

#. type: Plain text
#: upstream/_guides/mutiny-primer.adoc:36
#, fuzzy
msgid "If you want to know more about Mutiny, and the concepts behind it, check https://smallrye.io/smallrye-mutiny/pages/philosophy[the Mutiny Philosophy]."
msgstr "如果你想了解更多关于Mutiny的信息，以及它背后的概念，请查看 link:https://smallrye.io/smallrye-mutiny/pages/philosophy[Mutiny哲学] 。"

#. type: Title ==
#: upstream/_guides/mutiny-primer.adoc:37
#, fuzzy, no-wrap
msgid "Mutiny in Quarkus"
msgstr "夸库斯的叛变"

#. type: Plain text
#: upstream/_guides/mutiny-primer.adoc:41
#, fuzzy
msgid "Mutiny is the primary API when dealing with the reactive features from Quarkus.  It means that most extensions support Mutiny either by exposing an API returning Unis and Multis (such as reactive data sources or rest clients) or understanding when your methods return a Uni or a Multi (such as RESTEasy Reactive or Reactive Messaging)."
msgstr "在处理Quarkus的反应性功能时，Mutiny是主要的API。这意味着大多数扩展都支持Mutiny，要么通过暴露一个返回Unis和Multis的API（如反应式数据源或rest客户端），要么理解你的方法何时返回Uni或Multi（如RESTEasy Reactive或Reactive Messaging）。"

#. type: Plain text
#: upstream/_guides/mutiny-primer.adoc:44
#, fuzzy
msgid "These integrations make Mutiny a prominent and cohesive model for every reactive application developed with Quarkus.  In addition, Mutiny architecture allows fine-grain dead-code elimination which improves the memory usage when compiled to native (such as with Quarkus native mode or GraalVM native image compiler)."
msgstr "这些集成使Mutiny成为用Quarkus开发的每一个反应式应用程序的突出和凝聚的模型。此外，Mutiny架构允许细粒度的死代码消除，这改善了编译为原生（如使用Quarkus原生模式或GraalVM原生图像编译器）时的内存使用。"

#. type: Title ==
#: upstream/_guides/mutiny-primer.adoc:45
#, fuzzy, no-wrap
msgid "Why another reactive programming API?"
msgstr "为什么是另一个反应式编程API？"

#. type: Plain text
#: upstream/_guides/mutiny-primer.adoc:49
#, fuzzy
msgid "Seasoned reactive developers may wonder why Quarkus introduced yet another reactive programming APIs while there are existing ones.  Mutiny is taking a very different angle:"
msgstr "经验丰富的反应式开发人员可能会想，为什么Quarkus在已有的反应式编程API的情况下又推出了另一个反应式编程API。Mutiny从一个非常不同的角度出发。"

#. type: Plain text
#: upstream/_guides/mutiny-primer.adoc:54
#, fuzzy, no-wrap
msgid ""
"**Event-Driven** -\n"
"Mutiny places events at the core of its design.\n"
"With Mutiny, you observe events, react to them, and create elegant and readable processing pipelines.\n"
"A Ph.D. in functional programming is not required.\n"
msgstr " *事件驱动* - Mutiny将事件置于其设计的核心。通过Mutiny，你可以观察事件，对其作出反应，并创建优雅和可读的处理管道。不需要函数式编程方面的博士学位。"

#. type: Plain text
#: upstream/_guides/mutiny-primer.adoc:57
#, fuzzy, no-wrap
msgid ""
"**Navigable** - Even with intelligent code completion, classes with hundreds of methods are confusing.\n"
"Mutiny provides a navigable and explicit API driving you towards the operator you need.\n"
msgstr " *可导航* --即使有智能代码自动完成功能，拥有数百种方法的类也是令人困惑的。Mutiny提供了一个可导航的、明确的API，引导你走向你需要的操作者。"

#. type: Plain text
#: upstream/_guides/mutiny-primer.adoc:60
#, fuzzy, no-wrap
msgid ""
"**Non-Blocking I/O** - Mutiny is the perfect companion to tame the asynchronous nature of applications with non-blocking I/O (which powers xref:quarkus-reactive-architecture.adoc[Quarkus]).\n"
"Declaratively compose operations, transform data, enforce progress, recover from failures, and more.\n"
msgstr " *非阻塞式I/O* --Mutiny是驯服具有非阻塞式I/O（为 link:quarkus-reactive-architecture.html[Quarkus] 提供动力）的应用程序的异步性质的完美伴侣。声明性地组成操作，转换数据，强制执行进度，从失败中恢复，等等。"

#. type: Plain text
#: upstream/_guides/mutiny-primer.adoc:62
#, fuzzy, no-wrap
msgid "**Made for an asynchronous world** - Mutiny can be used in any asynchronous application such as event-driven microservices, message-based applications, network utilities, data stream processing, and of course... reactive applications!\n"
msgstr " *为异步世界* 而生--Mutiny可用于任何异步应用，如事件驱动的微服务、基于消息的应用、网络实用程序、数据流处理，当然还有......反应式应用。"

#. type: Plain text
#: upstream/_guides/mutiny-primer.adoc:65
#, fuzzy, no-wrap
msgid ""
"**Reactive Streams and Converters Built-In** - Mutiny is based on the https://www.reactive-streams.org/[Reactive Streams] specification, and so it can be integrated with any other reactive programming library.\n"
"In addition, it proposes converters to interact with other popular libraries.\n"
msgstr " *内置的反应式流和转换器* --Mutiny是基于 link:https://www.reactive-streams.org/[反应式流] 规范的，因此它可以与任何其他反应式编程库集成。此外，它还提出了转换器来与其他流行的库互动。"

#. type: Title ==
#: upstream/_guides/mutiny-primer.adoc:66
#, fuzzy, no-wrap
msgid "Mutiny and the I/O Threads"
msgstr "叛变和I/O线程"

#. type: Plain text
#: upstream/_guides/mutiny-primer.adoc:72
#, fuzzy
msgid "Quarkus is powered by a xref:quarkus-reactive-architecture.adoc#engine[reactive engine], and when developing a reactive application, your code is executed on one of the few I/O threads.  Remember, you must never block these threads, and the model would collapse if you do.  So, you can't use blocking I/O.  Instead, you need to schedule the I/O operation and pass a continuation."
msgstr "Quarkus是由一个反应式 link:quarkus-reactive-architecture.html#engine[引擎] 驱动的，当开发一个反应式应用时，你的代码会在少数几个I/O线程中的一个上执行。记住，你决不能阻塞这些线程，如果你这样做，模型就会崩溃。所以，你不能使用阻塞式I/O。相反，你需要安排I/O操作并传递一个延续。"

#. type: Named 'alt' AttributeList argument for macro 'image'
#: upstream/_guides/mutiny-primer.adoc:73
#, fuzzy, no-wrap
msgid "Reactive"
msgstr "反应性的"

#. type: Target for macro image
#: upstream/_guides/mutiny-primer.adoc:73
#, no-wrap
msgid "reactive-thread.png"
msgstr ""

#. type: Plain text
#: upstream/_guides/mutiny-primer.adoc:79
#, fuzzy
msgid "The Mutiny event-driven paradigm is tailored for this.  When the I/O operation completes successfully, the Uni that represents it emits an item event.  When it fails, it emits a failure event.  The continuation is simply and naturally expressed using the event-driven API."
msgstr "Mutiny的事件驱动范式就是为此量身定做的。当I/O操作成功完成时，代表它的Uni会发出一个项目事件。当它失败时，它会发出一个失败事件。使用事件驱动的API可以简单而自然地表达这种延续性。"

#. type: Title ==
#: upstream/_guides/mutiny-primer.adoc:80
#, fuzzy, no-wrap
msgid "Mutiny through Examples"
msgstr "通过实例看叛变"

#. type: Plain text
#: upstream/_guides/mutiny-primer.adoc:83
#, fuzzy
msgid "Many Quarkus extensions expose Mutiny APIs. In this section, we use the MongoDB extension to illustrate how to use Mutiny."
msgstr "许多Quarkus扩展暴露了Mutiny APIs。在本节中，我们使用MongoDB扩展来说明如何使用Mutiny。"

#. type: Plain text
#: upstream/_guides/mutiny-primer.adoc:85
#, fuzzy
msgid "Let's imagine a simple structure representing an element from the https://en.wikipedia.org/wiki/Periodic_table[periodic table]:"
msgstr "让我们想象一个简单的结构，代表 link:https://en.wikipedia.org/wiki/Periodic_table[周期表] 中的一个元素。"

#. type: delimited block -
#: upstream/_guides/mutiny-primer.adoc:89
#, no-wrap
msgid "public class Element {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mutiny-primer.adoc:93
#, no-wrap
msgid ""
"   public String name;\n"
"   public String symbol;\n"
"   public int position;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mutiny-primer.adoc:99
#, no-wrap
msgid ""
"   public Element(String name, String symbol, int position) {\n"
"       this.name = name;\n"
"       this.symbol = symbol;\n"
"       this.position = position;\n"
"   }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mutiny-primer.adoc:104
#, no-wrap
msgid ""
"   public Element() {\n"
"        // Use by JSON mappers\n"
"   }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/mutiny-primer.adoc:108
#, fuzzy
msgid "This structure contains the name, symbol, and position of the element.  To retrieve and store elements into a Mongo collection, you can use the following code:"
msgstr "这个结构包含了元素的名称、符号和位置。为了检索和存储元素到Mongo集合，你可以使用以下代码。"

#. type: delimited block -
#: upstream/_guides/mutiny-primer.adoc:113
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class ElementService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mutiny-primer.adoc:115
#, no-wrap
msgid "   final ReactiveMongoCollection<Element> collection;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mutiny-primer.adoc:121
#, no-wrap
msgid ""
"   @Inject\n"
"   ElementService(ReactiveMongoClient client) {\n"
"       collection = client.getDatabase(\"quarkus\")\n"
"               .getCollection(\"elements\", Element.class);\n"
"   }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mutiny-primer.adoc:130
#, no-wrap
msgid ""
"   public void add(Element element) {\n"
"       Uni<InsertOneResult> insertion = collection.insertOne(element);\n"
"       insertion\n"
"           .onItem().transform(r -> r.getInsertedId().asString())\n"
"           .subscribe().with(\n"
"               result -> System.out.println(\"inserted \" + result),\n"
"               failure -> System.out.println(\"D'oh\" + failure));\n"
"   }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mutiny-primer.adoc:139
#, no-wrap
msgid ""
"   public void getAll() {\n"
"       collection.find()\n"
"           .subscribe().with(\n"
"              element -> System.out.println(\"Element: \" + element),\n"
"             failure -> System.out.println(\"D'oh! \" + failure),\n"
"             () -> System.out.println(\"No more elements\")\n"
"       );\n"
"   }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mutiny-primer.adoc:141
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/mutiny-primer.adoc:146
#, fuzzy
msgid "First, the Mongo client is injected.  Note that it uses the reactive variant (`io.quarkus.mongodb.reactive.ReactiveMongoClient`).  In the initialize method, we retrieve and store the collection in which elements will be inserted."
msgstr "首先，Mongo客户端被注入了。注意，它使用了反应式变体( `io.quarkus.mongodb.reactive.ReactiveMongoClient` )。在初始化方法中，我们检索并存储将被插入的元素的集合。"

#. type: Plain text
#: upstream/_guides/mutiny-primer.adoc:159
#, fuzzy
msgid "The `add` method inserts an element in the collection.  It receives the element as a parameter and uses the reactive API of the collection.  Interacting with the database involves I/Os.  The reactive principles forbid blocking while waiting for the interaction to complete.  Instead, we schedule the operation and pass a continuation.  The `insertOne` method returns a Uni, i.e., an asynchronous operation.  That's the scheduled I/O. We now need to express the continuation, which is done using the `.onItem()` method.  `.onItem()` allows configuring what needs to happen when the observed Uni emits an item, in our case when the scheduled I/Os completes.  In this example, we extract the inserted document id.  The final step is the subscription.  Without it, nothing would ever happen. Subscribing triggers the operation.  The subscription method can also define handlers: the `id` value on success, or a failure when the insertion fails."
msgstr " `add` 方法在集合中插入一个元素。它接收元素作为一个参数，并使用集合的反应式API。与数据库的交互涉及到I/O。反应式原则禁止在等待交互完成时进行阻塞。相反，我们安排操作并传递一个延续。 `insertOne` 方法返回一个Uni，也就是一个异步操作。这就是预定的I/O。我们现在需要表达延续，这可以通过 `.onItem()` 方法完成。 `.onItem()` 允许配置当观察到的Uni发出一个项目时需要发生的事情，在我们的例子中，当计划的I/O完成时。在这个例子中，我们提取插入的文档ID。最后一步是订阅。没有它，任何事情都不会发生。订阅会触发操作。订阅方法也可以定义处理程序：成功时的 `id` 值，或者插入失败时的失败。"

#. type: Plain text
#: upstream/_guides/mutiny-primer.adoc:167
#, fuzzy
msgid "Let's now look at the second method.  It retrieves all the stored elements.  In this case, it returns multiple items (one per stored element), so we are using a `Multi`.  As for the insertion, getting the stored elements involves I/Os.  The `find` is our operation.  As for Uni, you need to subscribe to trigger the operation.  The subscriber receives item events, a failure event, or a completion event when all the elements have been received."
msgstr "现在让我们来看看第二个方法。它检索了所有的存储元素。在这种情况下，它返回多个项目（每个存储元素一个），所以我们使用 `Multi` 。至于插入，获取存储元素涉及I/O。 `find` 是我们的操作。至于Uni，你需要订阅来触发该操作。订阅者会收到项目事件、失败事件，或者当所有的元素都被收到时的完成事件。"

#. type: Plain text
#: upstream/_guides/mutiny-primer.adoc:171
#, fuzzy
msgid "Subscribing to a Uni or a Multi is essential, as without it, the operation is never executed.  In Quarkus some extensions deal with the subscription for you.  For example, in RESTEasy Reactive your HTTP methods can return a Uni or a Multi, and RESTEasy Reactive handles the subscription."
msgstr "订阅Uni或Multi是必不可少的，因为没有它，操作永远不会被执行。在Quarkus中，有些扩展为你处理订阅问题。例如，在RESTEasy Reactive中，你的HTTP方法可以返回一个Uni或Multi，而RESTEasy Reactive会处理订阅问题。"

#. type: Title ==
#: upstream/_guides/mutiny-primer.adoc:172
#, fuzzy, no-wrap
msgid "Mutiny Patterns"
msgstr "叛变模式"

#. type: Plain text
#: upstream/_guides/mutiny-primer.adoc:176
#, fuzzy
msgid "The example from the last section was simplistic on purpose.  Let's have a look at a few common patterns."
msgstr "上一节的例子是故意简化的。让我们来看看几个常见的模式。"

#. type: Title ===
#: upstream/_guides/mutiny-primer.adoc:177
#, fuzzy, no-wrap
msgid "Observing events"
msgstr "观察事件"

#. type: Plain text
#: upstream/_guides/mutiny-primer.adoc:180
#, fuzzy
msgid "You can observe the various kind of events using:"
msgstr "你可以使用观察各种类型的事件。"

#. type: Plain text
#: upstream/_guides/mutiny-primer.adoc:182
#, fuzzy
msgid "`on{event}().invoke(ev -> System.out.println(ev));`"
msgstr " `on{event}().invoke(ev → System.out.println(ev));` "

#. type: Plain text
#: upstream/_guides/mutiny-primer.adoc:185
#, fuzzy
msgid "For example, for items use: `onItem().invoke(item -> ...);`"
msgstr "例如，对于物品的使用。 `onItem().invoke(item → …​);` "

#. type: Plain text
#: upstream/_guides/mutiny-primer.adoc:188
#, fuzzy
msgid "For failure, use: `onFailure().invoke(failure -> ...)`"
msgstr "对于失败，使用。 `onFailure().invoke(failure → …​)` "

#. type: Plain text
#: upstream/_guides/mutiny-primer.adoc:193
#, fuzzy
msgid "The `invoke` method is synchronous.  Sometimes you need to execute an asynchronous action.  In this case use `call`, as in: `onItem().call(item -> someAsyncAction(item))`.  Note that `call` does not change the item, it just calls an asynchronous action, and when this one completes, it emits the original item downstream."
msgstr " `invoke` 方法是同步的。有时你需要执行一个异步的动作。在这种情况下，使用 `call` ，如： `onItem().call(item → someAsyncAction(item))` 。请注意， `call` 并不改变项目，它只是调用一个异步动作，当这个动作完成后，它就会向下游发出原始项目。"

#. type: Title ===
#: upstream/_guides/mutiny-primer.adoc:194
#, fuzzy, no-wrap
msgid "Transforming item"
msgstr "改造项目"

#. type: Plain text
#: upstream/_guides/mutiny-primer.adoc:198
#, fuzzy
msgid "The first instrumental pattern consists of transforming the item events you receive.  As we have seen in the previous section, it could indicate the successful insertion, or the elements stored in the database."
msgstr "第一个工具性模式包括转化你收到的项目事件。正如我们在上一节中所看到的，它可以表示成功插入，或存储在数据库中的元素。"

#. type: Plain text
#: upstream/_guides/mutiny-primer.adoc:200
#, fuzzy
msgid "Transforming an item is done using: `onItem().transform(item -> ....)`."
msgstr "转化一个项目是用： `onItem().transform(item → …​.)` 。"

#. type: Plain text
#: upstream/_guides/mutiny-primer.adoc:202
#, fuzzy
msgid "More details about transformation can be found in the https://smallrye.io/smallrye-mutiny/getting-started/transforming-items[Mutiny documentation]."
msgstr "关于转换的更多细节可以在 link:https://smallrye.io/smallrye-mutiny/getting-started/transforming-items[Mutiny文档] 中找到。"

#. type: Title ===
#: upstream/_guides/mutiny-primer.adoc:203
#, fuzzy, no-wrap
msgid "Sequential composition"
msgstr "顺序组成"

#. type: Plain text
#: upstream/_guides/mutiny-primer.adoc:207
#, fuzzy
msgid "Sequential composition allows chaining dependent asynchronous operations. This is achieved using `onItem().transformToUni(item -> ...)`.  Unlike `transform`, the function passed to `transformToUni` returns a Uni."
msgstr "顺序组合允许将依赖的异步操作连锁起来。这是用 `onItem().transformToUni(item → …​)` 。与 `transform` 不同，传递给 `transformToUni` 的函数返回一个Uni。"

#. type: delimited block -
#: upstream/_guides/mutiny-primer.adoc:213
#, no-wrap
msgid ""
"Uni<String> uni1 = …\n"
"uni1\n"
".onItem().transformtoUni(item -> anotherAsynchronousAction(item));\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/mutiny-primer.adoc:216
#, fuzzy
msgid "More details about asynchronous transformation can be found in the https://smallrye.io/smallrye-mutiny/getting-started/transforming-items-async[Mutiny documentation]."
msgstr "关于异步转换的更多细节可以在 link:https://smallrye.io/smallrye-mutiny/getting-started/transforming-items-async[Mutiny文档] 中找到。"

#. type: Title ===
#: upstream/_guides/mutiny-primer.adoc:217
#, fuzzy, no-wrap
msgid "Failure handling"
msgstr "失败处理"

#. type: Plain text
#: upstream/_guides/mutiny-primer.adoc:220
#, fuzzy
msgid "So far we only handle the item events, but handling failure is essential. You can handle failures using `onFailure()`."
msgstr "到目前为止，我们只处理项目事件，但处理失败是必不可少的。你可以使用 `onFailure()` 。"

#. type: Plain text
#: upstream/_guides/mutiny-primer.adoc:222
#, fuzzy
msgid "For example, you can recover with a fallback item using `onFailure().recoverWithItem(fallback)`:"
msgstr "例如，你可以使用 `onFailure().recoverWithItem(fallback)` ，用一个后备项目来恢复。"

#. type: delimited block -
#: upstream/_guides/mutiny-primer.adoc:228
#, no-wrap
msgid ""
"Uni<String> uni1 = …\n"
"uni1\n"
".onFailure().recoverWithItem(“my fallback value”);\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/mutiny-primer.adoc:231
#, fuzzy
msgid "You can also retry the operation such as in:"
msgstr "你也可以重试操作，如在。"

#. type: delimited block -
#: upstream/_guides/mutiny-primer.adoc:237
#, no-wrap
msgid ""
"Uni<String> uni1 = …\n"
"uni1\n"
".onFailure().retry().atMost(5);\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/mutiny-primer.adoc:240
#, fuzzy
msgid "More info about failure recovery can be found on https://smallrye.io/smallrye-mutiny/getting-started/handling-failures[the handling failure documentation] and https://smallrye.io/smallrye-mutiny/getting-started/retry[the retry documentation]."
msgstr "关于故障恢复的更多信息可以在 link:https://smallrye.io/smallrye-mutiny/getting-started/handling-failures[处理故障文档] 和 link:https://smallrye.io/smallrye-mutiny/getting-started/retry[重试文档] 中找到。"

#. type: Title ==
#: upstream/_guides/mutiny-primer.adoc:241
#, fuzzy, no-wrap
msgid "Events and Actions"
msgstr "事件和行动"

#. type: Plain text
#: upstream/_guides/mutiny-primer.adoc:244
#, fuzzy
msgid "The following tables list the events that you can receive for Uni and Multi. Each of them is associated with its own group (onX). The second table lists the classic action you can do upon an event. Note that some groups offer more possibilities."
msgstr "下表列出了你可以为Uni和Multi接收的事件。每个事件都与它自己的组（onX）有关。第二个表格列出了你在事件发生后可以做的经典动作。请注意，有些组提供了更多的可能性。"

#. type: Table
#: upstream/_guides/mutiny-primer.adoc:248
#, fuzzy, no-wrap
msgid "Events from the upstream"
msgstr "来自上游的事件"

#. type: Table
#: upstream/_guides/mutiny-primer.adoc:250
#, fuzzy, no-wrap
msgid "Events from the downstream"
msgstr "下游的事件"

#. type: Table
#: upstream/_guides/mutiny-primer.adoc:251
#, fuzzy, no-wrap
msgid "Uni"
msgstr "统一"

#. type: Table
#: upstream/_guides/mutiny-primer.adoc:252
#, fuzzy, no-wrap
msgid "Subscription (1), Item (0..1), failure (0..1)"
msgstr "订阅（1），项目（0...1），失败（0...1）。"

#. type: Table
#: upstream/_guides/mutiny-primer.adoc:254
#, fuzzy, no-wrap
msgid "Cancellation"
msgstr "取消"

#. type: Table
#: upstream/_guides/mutiny-primer.adoc:255
#, fuzzy, no-wrap
msgid "Multi"
msgstr "多功能"

#. type: Table
#: upstream/_guides/mutiny-primer.adoc:256
#, fuzzy, no-wrap
msgid "Subscription (1), Item (0..n), failure (0..1), completion (0..1)"
msgstr "订阅 (1), 项目 (0..n), 失败 (0..1), 完成 (0..1)"

#. type: Table
#: upstream/_guides/mutiny-primer.adoc:257
#, fuzzy, no-wrap
msgid "Cancellation, Request"
msgstr "取消，请求"

#. type: Plain text
#: upstream/_guides/mutiny-primer.adoc:260
#, fuzzy
msgid "Check the full list of events on https://smallrye.io/smallrye-mutiny/getting-started/observing-events[the event documentation]."
msgstr "在 link:https://smallrye.io/smallrye-mutiny/getting-started/observing-events[活动文件] 上查看完整的活动清单。"

#. type: Table
#: upstream/_guides/mutiny-primer.adoc:262
#, fuzzy, no-wrap
msgid "Action"
msgstr "行动"

#. type: Table
#: upstream/_guides/mutiny-primer.adoc:262
#, fuzzy, no-wrap
msgid "API"
msgstr "API"

#. type: Table
#: upstream/_guides/mutiny-primer.adoc:264
#, fuzzy, no-wrap
msgid "Comment"
msgstr "评论"

#. type: Table
#: upstream/_guides/mutiny-primer.adoc:264
#, fuzzy, no-wrap
msgid "transform"
msgstr "转变"

#. type: Table
#: upstream/_guides/mutiny-primer.adoc:264
#, fuzzy, no-wrap
msgid "`onItem().transform(Function<I, O> function);`"
msgstr " `onItem().transform(Function<I, O> function);` "

#. type: Table
#: upstream/_guides/mutiny-primer.adoc:266
#, fuzzy, no-wrap
msgid ""
"Transform the event into another event using a synchronous function.\n"
"The downstream receives the result of the function (or a failure if the transformation failed)."
msgstr "使用一个同步函数将事件转化为另一个事件。下游收到该函数的结果（如果转换失败，则为失败）。"

#. type: Table
#: upstream/_guides/mutiny-primer.adoc:266
#, fuzzy, no-wrap
msgid "transformToUni"
msgstr "转化为Uni"

#. type: Table
#: upstream/_guides/mutiny-primer.adoc:266
#, fuzzy, no-wrap
msgid "`onItem().transformToUni(Function<I, Uni<O>> function);`"
msgstr " `onItem().transformToUni(Function<I, Uni<O>> function);` "

#. type: Table
#: upstream/_guides/mutiny-primer.adoc:267
#, fuzzy, no-wrap
msgid "Transform the event into another event using an asynchronous function. The downstream receives the item emitted by the produced Uni (or a failure if the transformation failed). If the produced Uni emits a failure, that failure is passed to the downstream."
msgstr "使用异步函数将该事件转化为另一个事件。下游接收由产生的Uni发出的项目（如果转换失败，则为失败）。如果产生的Uni发出了一个失败，那么这个失败就会被传递给下游的人。"

#. type: Table
#: upstream/_guides/mutiny-primer.adoc:267
#, fuzzy, no-wrap
msgid "invoke"
msgstr "启用"

#. type: Table
#: upstream/_guides/mutiny-primer.adoc:267
#, fuzzy, no-wrap
msgid "`onItem().invoke(Consumer<I> consumer)`"
msgstr " `onItem().invoke(Consumer<I> consumer)` "

#. type: Table
#: upstream/_guides/mutiny-primer.adoc:268
#, fuzzy, no-wrap
msgid "Invokes the synchronous consumer. This is particularly convenient to execute side-effects actions. The downstream receives the original event, or a failure if the consumer throws an exception"
msgstr "调用同步的消费者。这对于执行副作用的动作特别方便。下游会收到原始事件，如果消费者抛出异常，则会收到失败。"

#. type: Table
#: upstream/_guides/mutiny-primer.adoc:268
#, fuzzy, no-wrap
msgid "call"
msgstr "呼叫"

#. type: Table
#: upstream/_guides/mutiny-primer.adoc:268
#, fuzzy, no-wrap
msgid "`onItem().call(Function<I, Uni<?>>)`"
msgstr " `onItem().call(Function<I, Uni<?>>)` "

#. type: Table
#: upstream/_guides/mutiny-primer.adoc:269
#, fuzzy, no-wrap
msgid "Invokes the asynchronous function. This is particularly convenient to execute asynchronous side-effect actions.The downstream receives the original event, or a failure if the consumer throws an exception or if the produced Uni emits a failure."
msgstr "调用异步函数。这对于执行异步的副作用动作特别方便。下游收到原始事件，或者如果消费者抛出一个异常，或者如果产生的Uni发出一个失败。"

#. type: Table
#: upstream/_guides/mutiny-primer.adoc:269
#, fuzzy, no-wrap
msgid "fail"
msgstr "不合格"

#. type: Table
#: upstream/_guides/mutiny-primer.adoc:269
#, fuzzy, no-wrap
msgid "`onItem().failWith(Function<I, Throwable>)`"
msgstr " `onItem().failWith(Function<I, Throwable>)` "

#. type: Table
#: upstream/_guides/mutiny-primer.adoc:270
#, fuzzy, no-wrap
msgid "Emits a failure when it receives the event."
msgstr "当它收到该事件时，发出一个失败的消息。"

#. type: Table
#: upstream/_guides/mutiny-primer.adoc:270
#, fuzzy, no-wrap
msgid "complete (Multi only)"
msgstr "完整的(仅限多国)"

#. type: Table
#: upstream/_guides/mutiny-primer.adoc:270
#, fuzzy, no-wrap
msgid "`onItem().complete()`"
msgstr " `onItem().complete()` "

#. type: Table
#: upstream/_guides/mutiny-primer.adoc:271
#, fuzzy, no-wrap
msgid "Emits the completion event when it receives the event."
msgstr "当它收到事件时发出完成事件。"

#. type: Title ===
#: upstream/_guides/mutiny-primer.adoc:273
#, fuzzy, no-wrap
msgid "Other patterns"
msgstr "其他模式"

#. type: Plain text
#: upstream/_guides/mutiny-primer.adoc:277
#, fuzzy
msgid "Mutiny provides lots of other features.  Head over to the https://smallrye.io/smallrye-mutiny[Mutiny documentation] to see many more examples, including the whole list of events and how to handle them."
msgstr "Mutiny提供了很多其他的功能。到 link:https://smallrye.io/smallrye-mutiny[Mutiny文档] 中去看更多的例子，包括整个事件列表和如何处理它们。"

#. type: Plain text
#: upstream/_guides/mutiny-primer.adoc:279
#, fuzzy
msgid "Some frequently asked guides are the following:"
msgstr "一些经常被问及的指南如下。"

#. type: Plain text
#: upstream/_guides/mutiny-primer.adoc:281
#, fuzzy
msgid "merge vs. concatenation - https://smallrye.io/smallrye-mutiny/guides/merge-concat"
msgstr "合并与串联 - https://smallrye.io/smallrye-mutiny/guides/merge-concat "

#. type: Plain text
#: upstream/_guides/mutiny-primer.adoc:282
#, fuzzy
msgid "controlling the emission thread - https://smallrye.io/smallrye-mutiny/guides/emit-subscription"
msgstr "控制排放线 - https://smallrye.io/smallrye-mutiny/guides/emit-subscription "

#. type: Plain text
#: upstream/_guides/mutiny-primer.adoc:283
#, fuzzy
msgid "explicit blocking - https://smallrye.io/smallrye-mutiny/guides/imperative-to-reactive"
msgstr "明确阻断 - https://smallrye.io/smallrye-mutiny/guides/imperative-to-reactive "

#. type: Title ==
#: upstream/_guides/mutiny-primer.adoc:284
#, fuzzy, no-wrap
msgid "Shortcuts"
msgstr "捷径"

#. type: Plain text
#: upstream/_guides/mutiny-primer.adoc:288
#, fuzzy
msgid "When using Uni, having to write `onItem()` can be cumbersome.  Fortunately, Mutiny provides a set of shortcut to make your code more concise:"
msgstr "当使用Uni时，不得不写 `onItem()` ，这是很麻烦的。幸运的是，Mutiny提供了一套快捷方式，使你的代码更加简洁。"

#. type: Table
#: upstream/_guides/mutiny-primer.adoc:291
#, fuzzy, no-wrap
msgid "Shortcut"
msgstr "捷径"

#. type: Table
#: upstream/_guides/mutiny-primer.adoc:293
#, fuzzy, no-wrap
msgid "Equivalent"
msgstr "等价物"

#. type: Table
#: upstream/_guides/mutiny-primer.adoc:293
#, fuzzy, no-wrap
msgid "uni.map(x → y)"
msgstr "uni.map(x → y)"

#. type: Table
#: upstream/_guides/mutiny-primer.adoc:294
#, fuzzy, no-wrap
msgid "uni.onItem().transform(x → y)"
msgstr "uni.onItem().transform(x → y)"

#. type: Table
#: upstream/_guides/mutiny-primer.adoc:294
#, fuzzy, no-wrap
msgid "uni.flatMap(x → uni2)"
msgstr "uni.flatMap(x → uni2)"

#. type: Table
#: upstream/_guides/mutiny-primer.adoc:295
#: upstream/_guides/mutiny-primer.adoc:296
#, fuzzy, no-wrap
msgid "uni.onItem().transformToUni(x → uni2)"
msgstr "uni.onItem().transformToUni(x → uni2)"

#. type: Table
#: upstream/_guides/mutiny-primer.adoc:295
#, fuzzy, no-wrap
msgid "uni.chain(x → uni2)"
msgstr "uni.chain(x → uni2)"

#. type: Table
#: upstream/_guides/mutiny-primer.adoc:296
#, fuzzy, no-wrap
msgid "uni.then(() → uni2)"
msgstr "uni.then(() → uni2)"

#. type: Table
#: upstream/_guides/mutiny-primer.adoc:297
#, fuzzy, no-wrap
msgid "uni.onItem().transformToUni(ignored → uni2)"
msgstr "uni.onItem().transformToUni(ignored → uni2)"

#. type: Table
#: upstream/_guides/mutiny-primer.adoc:297
#, fuzzy, no-wrap
msgid "uni.invoke(x → System.out.println(x))"
msgstr "uni.invoke(x → System.out.println(x))"

#. type: Table
#: upstream/_guides/mutiny-primer.adoc:298
#, fuzzy, no-wrap
msgid "uni.onItem().invoke(x → System.out.println(x))"
msgstr "uni.onItem().invoke(x → System.out.println(x))"

#. type: Table
#: upstream/_guides/mutiny-primer.adoc:298
#, fuzzy, no-wrap
msgid "uni.call(x → uni2)"
msgstr "uni.call(x → uni2)"

#. type: Table
#: upstream/_guides/mutiny-primer.adoc:299
#, fuzzy, no-wrap
msgid "uni.onItem().call(x → uni2)"
msgstr "uni.onItem().call(x → uni2)"

#. type: Table
#: upstream/_guides/mutiny-primer.adoc:299
#, fuzzy, no-wrap
msgid "uni.eventually) → System.out.println(\"eventually\""
msgstr "uni.eventually) → System.out.println(\"eventually\""

#. type: Table
#: upstream/_guides/mutiny-primer.adoc:300
#, fuzzy, no-wrap
msgid "uni.onItemOrFailure().invokeignoredItem, ignoredException) → System.out.println(\"eventually\""
msgstr "uni.onItemOrFailure().invokeignoredItem, ignoredException) → System.out.println(\"最终\""

#. type: Table
#: upstream/_guides/mutiny-primer.adoc:300
#, fuzzy, no-wrap
msgid "uni.eventually(() → uni2)"
msgstr "uni.evenly(() → uni2)"

#. type: Table
#: upstream/_guides/mutiny-primer.adoc:301
#, fuzzy, no-wrap
msgid "uni.onItemOrFailure().call((ignoredItem, ignoredException) → uni2)"
msgstr "uni.onItemOrFailure().call((ignoredItem, ignoredException) → uni2)"

#. type: Title ==
#: upstream/_guides/mutiny-primer.adoc:303
#, fuzzy, no-wrap
msgid "Reactive Streams"
msgstr "反应式流"

#. type: Plain text
#: upstream/_guides/mutiny-primer.adoc:311
#, fuzzy
msgid "Mutiny uses https://www.reactive-streams.org/[Reactive Streams].  `Multi` implements `Publisher` and enforces the back-pressure protocol.  Emissions are constrained by the request emitted from the downstream subscribers.  Thus, it does not overload the subscribers.  Note that in some cases, you can’t follow this protocol (because the Multi emits events that can’t be controlled, such as time, or measures sensors).  In this case, Mutiny provides a way to control the overflow using `onOverflow()`."
msgstr "Mutiny使用 link:https://www.reactive-streams.org/[Reactive Streams] 。 `Multi` ，实现了 `Publisher` ，并执行了背压协议。排放受到来自下游订阅者发出的请求的限制。因此，它不会使订阅者过载。请注意，在某些情况下，你不能遵循这个协议（因为Multi发射的事件不能被控制，比如时间，或者测量传感器）。在这种情况下，Mutiny提供了一种方法来控制溢出，使用 `onOverflow()` 。"

#. type: Plain text
#: upstream/_guides/mutiny-primer.adoc:314
#, fuzzy
msgid "`Uni` does not implement Reactive Streams `Publisher`.  A `Uni` can only emit one event, so subscribing to the `Uni` is enough to express your intent to use the result and does not need the request protocol ceremony."
msgstr " `Uni` 没有实现Reactive Streams 。一个 ，只能发出一个事件，所以订阅 ，就足以表达你对结果的使用意图，不需要请求协议仪式。 `Publisher` `Uni` `Uni` "

#. type: Title ==
#: upstream/_guides/mutiny-primer.adoc:315
#, fuzzy, no-wrap
msgid "Mutiny and Vert.x"
msgstr "叛变和死亡。"

#. type: Plain text
#: upstream/_guides/mutiny-primer.adoc:320
#, fuzzy
msgid "Vert.x is a toolkit to build reactive applications and systems.  It provides a huge ecosystem of libraries following the reactive principles (i.e., non-blocking and asynchronous).  Vert.x is an essential part of Quarkus, as it provides its reactive capabilities."
msgstr "Vert.x是一个构建反应式应用和系统的工具包。它提供了一个巨大的遵循反应式原则（即非阻塞和异步）的库的生态系统。Vert.x是Quarkus的一个重要组成部分，因为它提供了它的反应式能力。"

#. type: Plain text
#: upstream/_guides/mutiny-primer.adoc:323
#, fuzzy
msgid "In addition, the whole Vert.x API can be used with Quarkus.  To provide a cohesive experience, the Vert.x API is also available using a Mutiny variant, i.e., returns Uni and Multi."
msgstr "此外，整个Vert.x API都可以与Quarkus一起使用。为了提供一个连贯的体验，Vert.x API也可以使用Mutiny的变体，即返回Uni和Multi。"

#. type: Plain text
#: upstream/_guides/mutiny-primer.adoc:325
#, fuzzy
msgid "More details about this API can be found on: https://quarkus.io/blog/mutiny-vertx/."
msgstr "关于这个API的更多细节可以在 https://quarkus.io/blog/mutiny-vertx/ "

#. type: Title ==
#: upstream/_guides/mutiny-primer.adoc:326
#, fuzzy, no-wrap
msgid "Mutiny Integration in Quarkus"
msgstr "瓜尔库斯的叛变整合"

#. type: Plain text
#: upstream/_guides/mutiny-primer.adoc:330
#, fuzzy
msgid "The integration of Mutiny in Quarkus goes beyond just the library.  Mutiny exposes hooks that allow Quarkus and Mutiny to be closely integrated:"
msgstr "Mutiny在Quarkus中的整合不仅仅是库的问题。Mutiny暴露了一些钩子，使Quarkus和Mutiny能够紧密结合。"

#. type: Plain text
#: upstream/_guides/mutiny-primer.adoc:332
#, fuzzy
msgid "Calling `await` or `toIterable` would fail if you are running on an I/O thread, preventing blocking the I/O thread;"
msgstr "如果你在一个I/O线程上运行，调用 `await` 或 `toIterable` 会失败，防止阻塞I/O线程。"

#. type: Plain text
#: upstream/_guides/mutiny-primer.adoc:333
#, fuzzy
msgid "The `log()` operator use the Quarkus logger;"
msgstr " `log()` ，操作员使用Quarkus记录仪。"

#. type: Plain text
#: upstream/_guides/mutiny-primer.adoc:334
msgid "The default Mutiny thread pool is the Quarkus worker thread pool;"
msgstr ""

#. type: Plain text
#: upstream/_guides/mutiny-primer.adoc:335
msgid "Context Propagation is enabled by default when using Mutiny Uni and Multi"
msgstr ""

#. type: Plain text
#: upstream/_guides/mutiny-primer.adoc:337
msgid "More details about the infrastructure integration can be found on https://smallrye.io/smallrye-mutiny/guides/infrastructure."
msgstr ""
