# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:52+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/stork-reference.adoc:6
#, fuzzy, no-wrap
msgid "Stork Reference Guide"
msgstr "鹳鸟参考指南"

#. type: Plain text
#: upstream/_guides/stork-reference.adoc:12
#, fuzzy
msgid "This guide is the companion from the xref:stork.adoc[Stork Getting Started Guide].  It explains the configuration and usage of SmallRye Stork integration in Quarkus."
msgstr "本指南是《 link:stork.html[Stork入门指南] 》的配套文件。它解释了Quarkus中SmallRye Stork集成的配置和使用。"

#. type: Title ==
#: upstream/_guides/stork-reference.adoc:13
#, fuzzy, no-wrap
msgid "Supported clients"
msgstr "支持的客户"

#. type: Plain text
#: upstream/_guides/stork-reference.adoc:16
#, fuzzy
msgid "The current integration of Stork supports:"
msgstr "目前对Stork的整合支持。"

#. type: Plain text
#: upstream/_guides/stork-reference.adoc:18
#, fuzzy
msgid "the Reactive REST Client"
msgstr "反应式REST客户端"

#. type: Plain text
#: upstream/_guides/stork-reference.adoc:19
#, fuzzy
msgid "the gRPC clients"
msgstr "gRPC客户端"

#. type: Plain text
#: upstream/_guides/stork-reference.adoc:21
#, fuzzy
msgid "Warning: The gRPC client integration does not support statistic-based load balancers."
msgstr "警告。gRPC客户端集成不支持基于统计学的负载均衡器。"

#. type: Title ==
#: upstream/_guides/stork-reference.adoc:22
#, fuzzy, no-wrap
msgid "Available service discovery and selection"
msgstr "可用的服务发现和选择"

#. type: Plain text
#: upstream/_guides/stork-reference.adoc:25
#, fuzzy
msgid "Check the https://smallrye.io/smallrye-stork[SmallRye Stork website] to find more about the provided service discovery and selection."
msgstr "查看 link:https://smallrye.io/smallrye-stork[SmallRye Stork网站] ，了解更多关于所提供的服务发现和选择。"

#. type: Title ==
#: upstream/_guides/stork-reference.adoc:26
#, fuzzy, no-wrap
msgid "Using Stork in Kubernetes"
msgstr "在Kubernetes中使用Stork"

#. type: Plain text
#: upstream/_guides/stork-reference.adoc:30
#, fuzzy
msgid "Stork provides a service discovery support for Kubernetes, which goes beyond what Kubernetes provides by default.  It looks for all the pods backing up a Kubernetes service, but instead of applying a round-robin (as Kubernetes would do), it gives you the option to select the pod using a Stork load-balancer."
msgstr "Stork为Kubernetes提供了一个服务发现支持，这超出了Kubernetes默认提供的范围。它寻找所有支持Kubernetes服务的pod，但不是应用轮流（像Kubernetes那样），而是让你选择使用Stork负载平衡器的pod。"

#. type: Plain text
#: upstream/_guides/stork-reference.adoc:32
#, fuzzy
msgid "To use this feature, add the following dependency to your project:"
msgstr "要使用这个功能，请在你的项目中添加以下依赖关系。"

#. type: Block title
#: upstream/_guides/stork-reference.adoc:34
#: upstream/_guides/stork-reference.adoc:67
#: upstream/_guides/stork-reference.adoc:219
#, fuzzy, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: delimited block -
#: upstream/_guides/stork-reference.adoc:40
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.smallrye.stork</groupId>\n"
"    <artifactId>stork-service-discovery-kubernetes</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_guides/stork-reference.adoc:43
#: upstream/_guides/stork-reference.adoc:82
#: upstream/_guides/stork-reference.adoc:234
#, fuzzy, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: delimited block -
#: upstream/_guides/stork-reference.adoc:46
#, no-wrap
msgid "implementation(\"io.smallrye.stork:stork-service-discovery-kubernetes\")\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/stork-reference.adoc:49
#, fuzzy
msgid "For each service expected to be exposed as a Kubernetes Service, configure the lookup:"
msgstr "对于每个预计将作为Kubernetes服务暴露的服务，配置查找。"

#. type: delimited block -
#: upstream/_guides/stork-reference.adoc:54
#, no-wrap
msgid ""
"quarkus.stork.my-service.service-discovery.type=kubernetes\n"
"quarkus.stork.my-service.service-discovery.k8s-namespace=my-namespace\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/stork-reference.adoc:58
#, fuzzy
msgid "Stork looks for the Kubernetes Service with the given name (`my-service` in the previous example) in the specified namespace.  Instead of using the Kubernetes Service IP directly and let Kubernetes handle the selection and balancing, Stork inspects the service and retrieves the list of pods providing the service. Then, it can select the instance."
msgstr "Stork在指定的命名空间中寻找具有给定名称的Kubernetes服务（在前面的例子中是 `my-service` ）。Stork没有直接使用Kubernetes服务IP并让Kubernetes处理选择和平衡，而是检查服务并检索提供该服务的pod列表。然后，它可以选择实例。"

#. type: Title ==
#: upstream/_guides/stork-reference.adoc:59
#, fuzzy, no-wrap
msgid "Implementing a custom service discovery"
msgstr "实施自定义服务发现"

#. type: Plain text
#: upstream/_guides/stork-reference.adoc:62
#, fuzzy
msgid "Stork is extensible, and you can implement your own service discovery mechanism."
msgstr "Stork是可扩展的，你可以实现你自己的服务发现机制。"

#. type: Title ===
#: upstream/_guides/stork-reference.adoc:63
#: upstream/_guides/stork-reference.adoc:215
#, fuzzy, no-wrap
msgid "Dependency"
msgstr "依赖性"

#. type: Plain text
#: upstream/_guides/stork-reference.adoc:65
#, fuzzy
msgid "To implement your Service Discovery Provider, make sure your project depends on Core and Configuration Generator. The former brings classes necessary to implement custom discovery, the latter contains an annotation processor that generates classes needed by Stork."
msgstr "为了实现你的服务发现提供者，确保你的项目依赖于核心和配置生成器。前者带来了实现自定义发现所需的类，后者包含一个注释处理器，生成Stork所需的类。"

#. type: delimited block -
#: upstream/_guides/stork-reference.adoc:79
#: upstream/_guides/stork-reference.adoc:231
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.smallrye.stork</groupId>\n"
"    <artifactId>stork-core</artifactId>\n"
"</dependency>\n"
"<dependency>\n"
"    <groupId>io.smallrye.stork</groupId>\n"
"    <artifactId>stork-configuration-generator</artifactId>\n"
"    <!-- provided scope is sufficient for the annotation processor -->\n"
"    <scope>provided</scope>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/stork-reference.adoc:86
#: upstream/_guides/stork-reference.adoc:238
#, no-wrap
msgid ""
"implementation(\"io.smallrye.stork:stork-core\")\n"
"compileOnly(\"io.smallrye.stork:stork-configuration-generator\")\n"
msgstr ""

#. type: delimited block =
#: upstream/_guides/stork-reference.adoc:92
#, fuzzy
msgid "If the provider is located in an extension, the configuration generator should be declared in the `annotationProcessorPaths` section of the runtime module using the default scope:"
msgstr "如果提供者位于一个扩展中，配置生成器应使用默认范围在运行时模块的 `annotationProcessorPaths` 部分中声明。"

#. type: delimited block -
#: upstream/_guides/stork-reference.adoc:102
#, no-wrap
msgid ""
"<annotationProcessorPaths>\n"
"  ...\n"
"  <path>\n"
"    <groupId>io.smallrye.stork</groupId>\n"
"    <artifactId>stork-configuration-generator</artifactId>\n"
"  </path>\n"
"</annotationProcessorPaths>\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/stork-reference.adoc:105
#, fuzzy, no-wrap
msgid "Implementing a service discovery provider"
msgstr "实施一个服务发现提供者"

#. type: delimited block =
#: upstream/_guides/stork-reference.adoc:110
#, fuzzy
msgid "The custom provider is a factory that creates an `io.smallrye.stork.ServiceDiscovery` instance for each configured service using this service discovery provider.  A type, for example, `acme` identifies each provider.  This type is used in the configuration to reference the provider:"
msgstr "自定义提供者是一个工厂，它为使用该服务发现提供者的每个配置的服务创建一个 `io.smallrye.stork.ServiceDiscovery` 实例。一个类型，例如， `acme` ，标识了每个提供者。这个类型在配置中被用来引用提供者。"

#. type: delimited block -
#: upstream/_guides/stork-reference.adoc:114
#, no-wrap
msgid "quarkus.stork.my-service.service-discovery.type=acme\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/stork-reference.adoc:117
#, fuzzy
msgid "The first step consists of implementing the `io.smallrye.stork.spi.ServiceDiscoveryProvider` interface:"
msgstr "第一步包括实现 `io.smallrye.stork.spi.ServiceDiscoveryProvider` 接口。"

#. type: delimited block -
#: upstream/_guides/stork-reference.adoc:121
#: upstream/_guides/stork-reference.adoc:160
#: upstream/_guides/stork-reference.adoc:267
#: upstream/_guides/stork-reference.adoc:296
#, no-wrap
msgid "package examples;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/stork-reference.adoc:128
#, no-wrap
msgid ""
"import io.smallrye.stork.api.ServiceDiscovery;\n"
"import io.smallrye.stork.api.config.ServiceConfig;\n"
"import io.smallrye.stork.api.config.ServiceDiscoveryAttribute;\n"
"import io.smallrye.stork.api.config.ServiceDiscoveryType;\n"
"import io.smallrye.stork.spi.StorkInfrastructure;\n"
"import io.smallrye.stork.spi.ServiceDiscoveryProvider;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/stork-reference.adoc:136
#, no-wrap
msgid ""
"@ServiceDiscoveryType(\"acme\") // <1>\n"
"@ServiceDiscoveryAttribute(name = \"host\",\n"
"        description = \"Host name of the service discovery server.\", required = true) // <2>\n"
"@ServiceDiscoveryAttribute(name = \"port\",\n"
"        description = \"Port of the service discovery server.\", required = false)\n"
"public class AcmeServiceDiscoveryProvider // <3>\n"
"        implements ServiceDiscoveryProvider<AcmeServiceDiscoveryProviderConfiguration> {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/stork-reference.adoc:146
#, no-wrap
msgid ""
"    // <4>\n"
"    @Override\n"
"    public ServiceDiscovery createServiceDiscovery(AcmeServiceDiscoveryProviderConfiguration config,\n"
"                                                   String serviceName,\n"
"                                                   ServiceConfig serviceConfig,\n"
"                                                   StorkInfrastructure storkInfrastructure) {\n"
"        return new AcmeServiceDiscovery(config);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/stork-reference.adoc:149
#, fuzzy
msgid "This implementation is straightforward."
msgstr "这种实施是直接的。"

#. type: Plain text
#: upstream/_guides/stork-reference.adoc:151
#, fuzzy
msgid "`@ServiceDiscoveryType` annotation defines the type of the service discovery provider. For each `ServiceDiscoveryProvider` annotated with this annotation, a configuration class will be generated. The name of the configuration class is constructed by appending `Configuration` to the name of the provider."
msgstr " `@ServiceDiscoveryType` 注解定义了服务发现提供者的类型。对于每个用这个注解注解的 ，将生成一个配置类。配置类的名称是通过在提供者的名称后面加上 来构建的。 `ServiceDiscoveryProvider` `Configuration` "

#. type: Plain text
#: upstream/_guides/stork-reference.adoc:152
#, fuzzy
msgid "Use `@ServiceDiscoveryAttribute` to define configuration properties for services configured with this service discovery provider. Configuration properties are gathered from all properties of a form: `quarkus.stork.my-service.service-discovery.attr=value`."
msgstr "使用 `@ServiceDiscoveryAttribute` 来为用该服务发现提供者配置的服务定义配置属性。配置属性从一个表格的所有属性中收集： `quarkus.stork.my-service.service-discovery.attr=value` 。"

#. type: Plain text
#: upstream/_guides/stork-reference.adoc:153
#, fuzzy
msgid "The provider needs to implement `ServiceDiscoveryType` typed by the configuration class."
msgstr "提供者需要实现 `ServiceDiscoveryType` ，由配置类打字。"

#. type: Plain text
#: upstream/_guides/stork-reference.adoc:154
#, fuzzy
msgid "`createServiceDiscovery` method is the factory method. It receives the configuration and access to the name of the service and available infrastructure."
msgstr " `createServiceDiscovery` 方法是工厂方法。它接收配置并访问服务的名称和可用的基础设施。"

#. type: Plain text
#: upstream/_guides/stork-reference.adoc:156
#, fuzzy
msgid "Then, we need to implement the `ServiceDiscovery` interface:"
msgstr "然后，我们需要实现 `ServiceDiscovery` 接口。"

#. type: delimited block -
#: upstream/_guides/stork-reference.adoc:163
#, no-wrap
msgid ""
"import java.util.Collections;\n"
"import java.util.List;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/stork-reference.adoc:169
#, no-wrap
msgid ""
"import io.smallrye.mutiny.Uni;\n"
"import io.smallrye.stork.api.ServiceDiscovery;\n"
"import io.smallrye.stork.api.ServiceInstance;\n"
"import io.smallrye.stork.impl.DefaultServiceInstance;\n"
"import io.smallrye.stork.utils.ServiceInstanceIds;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/stork-reference.adoc:171
#, no-wrap
msgid "public class AcmeServiceDiscovery implements ServiceDiscovery {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/stork-reference.adoc:174
#, no-wrap
msgid ""
"    private final String host;\n"
"    private final int port;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/stork-reference.adoc:179
#, no-wrap
msgid ""
"    public AcmeServiceDiscovery(AcmeServiceDiscoveryProviderConfiguration configuration) {\n"
"        this.host = configuration.getHost();\n"
"        this.port = Integer.parseInt(configuration.getPort());\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/stork-reference.adoc:190
#, no-wrap
msgid ""
"    @Override\n"
"    public Uni<List<ServiceInstance>> getServiceInstances() {\n"
"        // Proceed to the lookup...\n"
"        // Here, we just return a DefaultServiceInstance with the configured host and port\n"
"        // The last parameter specifies whether the communication with the instance should happen over a secure connection\n"
"        DefaultServiceInstance instance =\n"
"                new DefaultServiceInstance(ServiceInstanceIds.next(), host, port, false);\n"
"        return Uni.createFrom().item(() -> Collections.singletonList(instance));\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/stork-reference.adoc:196
#, fuzzy
msgid "Again, this implementation is simplistic.  Typically, instead of creating a service instance with values from the configuration, you would connect to a service discovery backend, look for the service and build the list of service instances accordingly.  That's why the method returns a `Uni`.  Most of the time, the lookup is a remote operation."
msgstr "同样，这个实现是简单的。通常情况下，你会连接到一个服务发现的后端，寻找服务并建立相应的服务实例列表，而不是用配置中的值创建一个服务实例。这就是为什么该方法返回一个 `Uni` 。大多数时候，查找是一个远程操作。"

#. type: Title ===
#: upstream/_guides/stork-reference.adoc:197
#, fuzzy, no-wrap
msgid "Using your service discovery"
msgstr "使用你的服务发现"

#. type: Plain text
#: upstream/_guides/stork-reference.adoc:201
#: upstream/_guides/stork-reference.adoc:336
#, fuzzy
msgid "In the project using it, don't forget to add the dependency on the module providing your implementation.  Then, in the configuration, just add:"
msgstr "在使用它的项目中，不要忘记添加对提供你的实现的模块的依赖性。然后，在配置中，只要添加。"

#. type: delimited block -
#: upstream/_guides/stork-reference.adoc:207
#, no-wrap
msgid ""
"quarkus.stork.my-service.service-discovery.type=acme\n"
"quarkus.stork.my-service.service-discovery.host=localhost\n"
"quarkus.stork.my-service.service-discovery.port=1234\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/stork-reference.adoc:210
#, fuzzy
msgid "Then, Stork will use your implementation to locate the `my-service` service."
msgstr "然后，Stork将使用你的实现来定位 `my-service` 服务。"

#. type: Title ==
#: upstream/_guides/stork-reference.adoc:211
#, fuzzy, no-wrap
msgid "Implementing a custom service selection / load-balancer"
msgstr "实施自定义服务选择/负载平衡器"

#. type: Plain text
#: upstream/_guides/stork-reference.adoc:214
#, fuzzy
msgid "Stork is extensible, and you can implement your own service selection (load-balancer) mechanism."
msgstr "Stork是可扩展的，你可以实现你自己的服务选择（负载平衡器）机制。"

#. type: Plain text
#: upstream/_guides/stork-reference.adoc:217
#, fuzzy
msgid "To implement your Load Balancer Provider, make sure your project depends on Core and Configuration Generator. The former brings classes necessary to implement custom load balancer, the latter contains an annotation processor that generates classes needed by Stork."
msgstr "为了实现你的负载平衡器提供者，确保你的项目依赖于核心和配置生成器。前者带来了实现自定义负载平衡器所需的类，后者包含一个注释处理器，生成Stork所需的类。"

#. type: delimited block =
#: upstream/_guides/stork-reference.adoc:243
#, fuzzy
msgid "Similar to custom discovery providers, if the provider is located in an extension, the configuration generator should be declared in the `annotationProcessorPaths` section of the runtime module using the default scope."
msgstr "与自定义发现提供者类似，如果提供者位于扩展中，配置生成器应使用默认范围在运行时模块的 `annotationProcessorPaths` 部分中声明。"

#. type: Title ===
#: upstream/_guides/stork-reference.adoc:245
#, fuzzy, no-wrap
msgid "Implementing a load balancer provider"
msgstr "实施负载平衡器供应商"

#. type: Plain text
#: upstream/_guides/stork-reference.adoc:248
#, fuzzy
msgid "Load balancer implementation consists of three elements:"
msgstr "负载平衡器的实施由三个要素组成。"

#. type: Plain text
#: upstream/_guides/stork-reference.adoc:250
#, fuzzy
msgid "`LoadBalancer` which is responsible for selecting service instances for a single Stork service"
msgstr " `LoadBalancer` 负责为单个Stork服务选择服务实例"

#. type: Plain text
#: upstream/_guides/stork-reference.adoc:251
#, fuzzy
msgid "`LoadBalancerProvider` which creates instances of `LoadBalancer` for a given load balancer _type_"
msgstr " `LoadBalancerProvider` 它为一个给定的负载均衡器 _类型_ 创建了 的实例。 `LoadBalancer` "

#. type: Plain text
#: upstream/_guides/stork-reference.adoc:252
#, fuzzy
msgid "`LoadBalancerProviderConfiguration` which is a configuration for the load balancer"
msgstr " `LoadBalancerProviderConfiguration` 这是对负载平衡器的一个配置"

#. type: Plain text
#: upstream/_guides/stork-reference.adoc:256
#, fuzzy
msgid "A _type_, for example, `acme`, identifies each provider.  This _type_ is used in the configuration to reference the provider:"
msgstr "一个 _类型_ ，例如， `acme` ，标识每个提供者。这个 _类型_ 在配置中被用来引用提供者。"

#. type: delimited block -
#: upstream/_guides/stork-reference.adoc:260
#, no-wrap
msgid "quarkus.stork.my-service.load-balancer.type=acme\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/stork-reference.adoc:264
#, fuzzy
msgid "Similarly to `ServiceDiscoveryProvider, a `LoadBalancerProvider` implementation needs to be annotated with `@LoadBalancerType` that defines the _type_.  Any configuration properties that the provider expects should be defined with `@LoadBalancerAttribute` annotations placed on the provider."
msgstr "与 `ServiceDiscoveryProvider, a `LoadBalancerProvider` 类似，实现需要用定义 _类型_ 的 `@LoadBalancerType` 注释。提供者期望的任何配置属性都应该用放在提供者上的 `@LoadBalancerAttribute` 注解来定义。"

#. type: delimited block -
#: upstream/_guides/stork-reference.adoc:273
#, no-wrap
msgid ""
"import io.smallrye.stork.api.LoadBalancer;\n"
"import io.smallrye.stork.api.ServiceDiscovery;\n"
"import io.smallrye.stork.api.config.LoadBalancerAttribute;\n"
"import io.smallrye.stork.api.config.LoadBalancerType;\n"
"import io.smallrye.stork.spi.LoadBalancerProvider;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/stork-reference.adoc:279
#, no-wrap
msgid ""
"@LoadBalancerType(\"acme\")\n"
"@LoadBalancerAttribute(name = \"my-attribute\",\n"
"        description = \"Attribute that alters the behavior of the LoadBalancer\")\n"
"public class AcmeLoadBalancerProvider implements\n"
"        LoadBalancerProvider<AcmeLoadBalancerProviderConfiguration> {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/stork-reference.adoc:286
#, no-wrap
msgid ""
"    @Override\n"
"    public LoadBalancer createLoadBalancer(AcmeLoadBalancerProviderConfiguration config,\n"
"                                           ServiceDiscovery serviceDiscovery) {\n"
"        return new AcmeLoadBalancer(config);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/stork-reference.adoc:290
#, fuzzy
msgid "Note, that similarly to the `ServiceDiscoveryProvider`, the `LoadBalancerProvider` interface takes a configuration class as a parameter. This configuration class is generated automatically by the _Configuration Generator_.  Its name is created by appending `Configuration` to the name of the provider class."
msgstr "注意，与 `ServiceDiscoveryProvider` 类似， `LoadBalancerProvider` 接口需要一个配置类作为参数。这个配置类是由 _配置生成器_ 自动生成的。它的名字是通过在提供者类的名字后面加上 `Configuration` 来创建的。"

#. type: Plain text
#: upstream/_guides/stork-reference.adoc:292
#, fuzzy
msgid "The next step is to implement the `LoadBalancer` interface:"
msgstr "下一步是实现 `LoadBalancer` 接口。"

#. type: delimited block -
#: upstream/_guides/stork-reference.adoc:300
#, no-wrap
msgid ""
"import java.util.ArrayList;\n"
"import java.util.Collection;\n"
"import java.util.Random;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/stork-reference.adoc:304
#, no-wrap
msgid ""
"import io.smallrye.stork.api.LoadBalancer;\n"
"import io.smallrye.stork.api.NoServiceInstanceFoundException;\n"
"import io.smallrye.stork.api.ServiceInstance;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/stork-reference.adoc:306
#, no-wrap
msgid "public class AcmeLoadBalancer implements LoadBalancer {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/stork-reference.adoc:308
#, no-wrap
msgid "    private final Random random;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/stork-reference.adoc:312
#, no-wrap
msgid ""
"    public AcmeLoadBalancer(AcmeLoadBalancerProviderConfiguration config) {\n"
"        random = new Random();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/stork-reference.adoc:322
#, no-wrap
msgid ""
"    @Override\n"
"    public ServiceInstance selectServiceInstance(Collection<ServiceInstance> serviceInstances) {\n"
"        if (serviceInstances.isEmpty()) {\n"
"            throw new NoServiceInstanceFoundException(\"No services found.\");\n"
"        }\n"
"        int index = random.nextInt(serviceInstances.size());\n"
"        return new ArrayList<>(serviceInstances).get(index);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/stork-reference.adoc:325
#, fuzzy
msgid "Again, this implementation is simplistic and just picks a random instance from the received list."
msgstr "同样，这个实现是简单的，只是从收到的列表中随机挑选一个实例。"

#. type: delimited block -
#: upstream/_guides/stork-reference.adoc:330
#, no-wrap
msgid "examples.AcmeLoadBalancerProvider\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/stork-reference.adoc:332
#, no-wrap
msgid "Using your load balancer"
msgstr ""

#. type: delimited block -
#: upstream/_guides/stork-reference.adoc:341
#, no-wrap
msgid ""
"quarkus.stork.my-service.service-discovery.type=...\n"
"quarkus.stork.my-service.load-balancer.type=acme\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/stork-reference.adoc:344
msgid "Then, Stork will use your implementation to select the `my-service` service instance."
msgstr ""
