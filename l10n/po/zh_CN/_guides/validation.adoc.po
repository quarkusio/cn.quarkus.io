# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:52+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/validation.adoc:6
#, fuzzy, no-wrap
msgid "Validation with Hibernate Validator"
msgstr "用Hibernate验证器进行验证"

#. type: Plain text
#: upstream/_guides/validation.adoc:11
#, fuzzy
msgid "This guide covers how to use Hibernate Validator/Bean Validation for:"
msgstr "本指南涵盖了如何使用Hibernate Validator/Bean Validation来实现。"

#. type: Plain text
#: upstream/_guides/validation.adoc:13
#, fuzzy
msgid "validating the input/output of your REST services;"
msgstr "验证你的REST服务的输入/输出。"

#. type: Plain text
#: upstream/_guides/validation.adoc:14
#, fuzzy
msgid "validating the parameters and return values of the methods of your business services."
msgstr "验证你的业务服务的方法的参数和返回值。"

#. type: Title ==
#: upstream/_guides/validation.adoc:15
#, fuzzy, no-wrap
msgid "Prerequisites"
msgstr "先决条件"

#. type: Title ==
#: upstream/_guides/validation.adoc:19
#, fuzzy, no-wrap
msgid "Architecture"
msgstr "建筑学"

#. type: Plain text
#: upstream/_guides/validation.adoc:24
#, fuzzy
msgid "The application built in this guide is quite simple. The user fills a form on a web page.  The web page sends the form content to the `BookResource` as JSON (using Ajax). The `BookResource` validates the user input and returns the _result_ as JSON."
msgstr "本指南中构建的应用程序非常简单。用户在一个网页上填写一个表单。网页将表单内容作为JSON发送到 `BookResource` （使用Ajax）。 `BookResource` 验证用户的输入并将 _结果_ 作为JSON返回。"

#. type: Plain text
#: upstream/_guides/validation.adoc:26
#, fuzzy
msgid "image:validation-guide-architecture.png[alt=Architecture]"
msgstr "image:validation-guide-architecture.png[alt=\"Architecture\"]"

#. type: Title ==
#: upstream/_guides/validation.adoc:27
#, fuzzy, no-wrap
msgid "Solution"
msgstr "解决方案"

#. type: Plain text
#: upstream/_guides/validation.adoc:31
#, fuzzy
msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can go right to the completed example."
msgstr "我们建议你按照下面几节的说明，一步一步地创建应用程序。然而，你可以直接进入已完成的例子。"

#. type: Plain text
#: upstream/_guides/validation.adoc:33
#, fuzzy
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "克隆 Git 仓库。 `git clone {quickstarts-clone-url}` ，或者下载一个{quickstarts-archive-url}[存档]。"

#. type: Plain text
#: upstream/_guides/validation.adoc:35
#, fuzzy
msgid "The solution is located in the `validation-quickstart` {quickstarts-tree-url}/validation-quickstart[directory]."
msgstr "该解决方案位于 `validation-quickstart` {quickstarts-tree-url}/validation-quickstart[目录]中。"

#. type: Title ==
#: upstream/_guides/validation.adoc:36
#, fuzzy, no-wrap
msgid "Creating the Maven project"
msgstr "创建Maven项目"

#. type: Plain text
#: upstream/_guides/validation.adoc:39
#, fuzzy
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "首先，我们需要一个新的项目。用以下命令创建一个新项目。"

#. type: Plain text
#: upstream/_guides/validation.adoc:45
#, fuzzy
msgid "This command generates a Maven structure importing the RESTEasy Reactive/JAX-RS, Jackson and Hibernate Validator/Bean Validation extensions."
msgstr "该命令生成一个Maven结构，导入RESTEasy Reactive/JAX-RS、Jackson和Hibernate Validator/Bean Validation扩展。"

#. type: Plain text
#: upstream/_guides/validation.adoc:48
#, fuzzy
msgid "If you already have your Quarkus project configured, you can add the `hibernate-validator` extension to your project by running the following command in your project base directory:"
msgstr "如果你已经配置了你的Quarkus项目，你可以通过在你的项目基础目录下运行以下命令，将 `hibernate-validator` 扩展到你的项目。"

#. type: Plain text
#: upstream/_guides/validation.adoc:53
#, fuzzy
msgid "The result of this command is dependent on your build tool:"
msgstr "这个命令的结果取决于你的构建工具。"

#. type: Block title
#: upstream/_guides/validation.adoc:55
#, fuzzy, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: delimited block -
#: upstream/_guides/validation.adoc:61
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-hibernate-validator</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_guides/validation.adoc:64
#, fuzzy, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: delimited block -
#: upstream/_guides/validation.adoc:67
#, no-wrap
msgid "implementation(\"io.quarkus:quarkus-hibernate-validator\")\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/validation.adoc:69
#, fuzzy, no-wrap
msgid "Constraints"
msgstr "限制条件"

#. type: Plain text
#: upstream/_guides/validation.adoc:73
#, fuzzy
msgid "In this application, we are going to test an elementary object, but we support complicated constraints and can validate graphs of objects.  Create the `org.acme.validation.Book` class with the following content:"
msgstr "在这个应用中，我们要测试一个基本的对象，但我们支持复杂的约束，可以验证对象的图。创建 `org.acme.validation.Book` 类，内容如下。"

#. type: delimited block -
#: upstream/_guides/validation.adoc:77 upstream/_guides/validation.adoc:104
#: upstream/_guides/validation.adoc:208
#, no-wrap
msgid "package org.acme.validation;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/validation.adoc:80
#, no-wrap
msgid ""
"import javax.validation.constraints.NotBlank;\n"
"import javax.validation.constraints.Min;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/validation.adoc:82 upstream/_guides/validation.adoc:400
#, no-wrap
msgid "public class Book {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/validation.adoc:85
#, no-wrap
msgid ""
"    @NotBlank(message=\"Title may not be blank\")\n"
"    public String title;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/validation.adoc:88
#, no-wrap
msgid ""
"    @NotBlank(message=\"Author may not be blank\")\n"
"    public String author;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/validation.adoc:92
#, no-wrap
msgid ""
"    @Min(message=\"Author has been very lazy\", value=1)\n"
"    public double pages;\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/validation.adoc:96
#, fuzzy
msgid "Constraints are added on fields, and when an object is validated, the values are checked.  The getter and setter methods are also used for JSON mapping."
msgstr "限制条件被添加到字段上，当一个对象被验证时，这些值被检查。getter和setter方法也被用于JSON映射。"

#. type: Title ==
#: upstream/_guides/validation.adoc:97
#, fuzzy, no-wrap
msgid "JSON mapping and validation"
msgstr "JSON映射和验证"

#. type: Plain text
#: upstream/_guides/validation.adoc:100
#, fuzzy
msgid "Create the following REST resource as `org.acme.validation.BookResource`:"
msgstr "创建以下REST资源为 `org.acme.validation.BookResource` 。"

#. type: delimited block -
#: upstream/_guides/validation.adoc:109
#, no-wrap
msgid ""
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/validation.adoc:112
#, no-wrap
msgid ""
"@Path(\"/books\")\n"
"public class BookResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/validation.adoc:115
#, no-wrap
msgid ""
"    @Inject\n"
"    Validator validator; <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/validation.adoc:127
#, no-wrap
msgid ""
"    @Path(\"/manual-validation\")\n"
"    @POST\n"
"    public Result tryMeManualValidation(Book book) {\n"
"        Set<ConstraintViolation<Book>> violations = validator.validate(book);\n"
"        if (violations.isEmpty()) {\n"
"            return new Result(\"Book is valid! It was validated by manual validation.\");\n"
"        } else {\n"
"            return new Result(violations);\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/validation.adoc:129
#, fuzzy
msgid "The `Validator` instance is injected via CDI."
msgstr " `Validator` 实例是通过CDI注入的。"

#. type: Plain text
#: upstream/_guides/validation.adoc:131
#, fuzzy
msgid "Yes it does not compile, `Result` is missing, but we will add it very soon."
msgstr "是的，它不能编译， `Result` ，但我们将很快添加它。"

#. type: Plain text
#: upstream/_guides/validation.adoc:133
#, fuzzy
msgid "The method parameter (`book`) is created from the JSON payload automatically."
msgstr "方法参数( `book` )是由JSON有效载荷自动创建的。"

#. type: Plain text
#: upstream/_guides/validation.adoc:138
#, fuzzy
msgid "The method uses the `Validator` instance to check the payload.  It returns a set of violations.  If this set is empty, it means the object is valid.  In case of failures, the messages are concatenated and sent back to the browser."
msgstr "该方法使用 `Validator` 实例来检查有效载荷。它返回一个违反规定的集合。如果这个集合是空的，就意味着该对象是有效的。在失败的情况下，信息被串联起来并送回给浏览器。"

#. type: Plain text
#: upstream/_guides/validation.adoc:140
#, fuzzy
msgid "Let's now create the `Result` class as an inner class:"
msgstr "现在让我们把 `Result` 类作为一个内层类来创建。"

#. type: delimited block -
#: upstream/_guides/validation.adoc:144
#, no-wrap
msgid "public static class Result {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/validation.adoc:149
#, no-wrap
msgid ""
"    Result(String message) {\n"
"        this.success = true;\n"
"        this.message = message;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/validation.adoc:156
#, no-wrap
msgid ""
"    Result(Set<? extends ConstraintViolation<?>> violations) {\n"
"        this.success = false;\n"
"        this.message = violations.stream()\n"
"             .map(cv -> cv.getMessage())\n"
"             .collect(Collectors.joining(\", \"));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/validation.adoc:159
#, no-wrap
msgid ""
"    private String message;\n"
"    private boolean success;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/validation.adoc:163
#, no-wrap
msgid ""
"    public String getMessage() {\n"
"        return message;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/validation.adoc:167
#, no-wrap
msgid ""
"    public boolean isSuccess() {\n"
"        return success;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/validation.adoc:169 upstream/_guides/validation.adoc:409
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/validation.adoc:173
#, fuzzy
msgid "The class is very simple and only contains 2 fields and the associated getters and setters.  Because we indicate that we produce JSON, the mapping to JSON is made automatically."
msgstr "该类非常简单，只包含2个字段和相关的getters和setters。因为我们指出我们产生JSON，所以自动进行JSON的映射。"

#. type: Title ==
#: upstream/_guides/validation.adoc:174
#, fuzzy, no-wrap
msgid "REST end point validation"
msgstr "REST端点验证"

#. type: Plain text
#: upstream/_guides/validation.adoc:180
#, fuzzy
msgid "While using the `Validator` manually might be useful for some advanced usage, if you simply want to validate the parameters or the return value or your REST end point, you can annotate it directly, either with constraints (`@NotNull`, `@Digits`...)  or with `@Valid` (which will cascade the validation to the bean)."
msgstr "虽然手动使用 `Validator` 可能对一些高级用法很有用，但如果你只是想验证参数或返回值或你的REST端点，你可以直接注释它，要么用约束条件（ `@NotNull` , `@Digits` ...），要么用 `@Valid` （这将把验证串联到Bean上）。"

#. type: Plain text
#: upstream/_guides/validation.adoc:182
#, fuzzy
msgid "Let's create an end point validating the `Book` provided in the request:"
msgstr "让我们创建一个端点，验证请求中提供的 `Book` 。"

#. type: delimited block -
#: upstream/_guides/validation.adoc:192
#, no-wrap
msgid ""
"@Path(\"/end-point-method-validation\")\n"
"@POST\n"
"@Produces(MediaType.APPLICATION_JSON)\n"
"@Consumes(MediaType.APPLICATION_JSON)\n"
"public Result tryMeEndPointMethodValidation(@Valid Book book) {\n"
"    return new Result(\"Book is valid! It was validated by end point method validation.\");\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/validation.adoc:195
#, fuzzy
msgid "As you can see, we don't have to manually validate the provided `Book` anymore as it is automatically validated."
msgstr "正如你所看到的，我们不必再手动验证所提供的 `Book` ，因为它是自动验证的。"

#. type: Plain text
#: upstream/_guides/validation.adoc:198
#, fuzzy
msgid "If a validation error is triggered, a violation report is generated and serialized as JSON as our end point produces a JSON output.  It can be extracted and manipulated to display a proper error message."
msgstr "如果触发了验证错误，就会生成一份违规报告，并将其序列化为JSON，因为我们的端点会产生JSON输出。它可以被提取和处理，以显示一个适当的错误信息。"

#. type: Title ==
#: upstream/_guides/validation.adoc:199
#, fuzzy, no-wrap
msgid "Service method validation"
msgstr "服务方法验证"

#. type: Plain text
#: upstream/_guides/validation.adoc:202
#, fuzzy
msgid "It might not always be handy to have the validation rules declared at the end point level as it could duplicate some business validation."
msgstr "在端点水平上声明验证规则可能并不总是很方便，因为它可能重复一些业务验证。"

#. type: Plain text
#: upstream/_guides/validation.adoc:204
#, fuzzy
msgid "The best option is then to annotate a method of your business service with your constraints (or in our particular case with `@Valid`):"
msgstr "最好的选择是用你的约束条件来注释你的业务服务的方法（或者在我们的特定案例中用 `@Valid` ）。"

#. type: delimited block -
#: upstream/_guides/validation.adoc:211
#, no-wrap
msgid ""
"import javax.enterprise.context.ApplicationScoped;\n"
"import javax.validation.Valid;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/validation.adoc:214
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class BookService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/validation.adoc:219
#, no-wrap
msgid ""
"    public void validateBook(@Valid Book book) {\n"
"        // your business logic here\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/validation.adoc:222
#, fuzzy
msgid "Calling the service in your rest end point triggers the `Book` validation automatically:"
msgstr "在你的休息端点中调用服务，会自动触发 `Book` 验证。"

#. type: delimited block -
#: upstream/_guides/validation.adoc:226
#, no-wrap
msgid "@Inject BookService bookService;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/validation.adoc:237
#, no-wrap
msgid ""
"@Path(\"/service-method-validation\")\n"
"@POST\n"
"public Result tryMeServiceMethodValidation(Book book) {\n"
"    try {\n"
"        bookService.validateBook(book);\n"
"        return new Result(\"Book is valid! It was validated by service method validation.\");\n"
"    } catch (ConstraintViolationException e) {\n"
"        return new Result(e.getConstraintViolations());\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/validation.adoc:241
#, fuzzy
msgid "Note that, if you want to push the validation errors to the frontend, you have to catch the exception and push the information yourselves as they will not be automatically pushed to the JSON output."
msgstr "注意，如果你想把验证错误推送到前端，你必须自己捕捉异常并推送信息，因为它们不会被自动推送到JSON输出。"

#. type: Plain text
#: upstream/_guides/validation.adoc:243
#, fuzzy
msgid "Keep in mind that you usually don't want to expose to the public the internals of your services"
msgstr "请记住，你通常不想把你的服务的内部情况暴露给公众。"

#. type: Plain text
#: upstream/_guides/validation.adoc:244
#, fuzzy
msgid "and especially not the validated value contained in the violation object."
msgstr "特别是不包含在违规对象中的验证值。"

#. type: Title ==
#: upstream/_guides/validation.adoc:245
#, fuzzy, no-wrap
msgid "A frontend"
msgstr "一个前台"

#. type: Plain text
#: upstream/_guides/validation.adoc:250
#, fuzzy
msgid "Now let's add the simple web page to interact with our `BookResource`.  Quarkus automatically serves static resources contained in the `META-INF/resources` directory.  In the `src/main/resources/META-INF/resources` directory, replace the `index.html` file with the content from this {quickstarts-blob-url}/validation-quickstart/src/main/resources/META-INF/resources/index.html[index.html] file in it."
msgstr "现在让我们添加一个简单的网页来与我们的 `BookResource` 。Quarkus会自动提供包含在 `META-INF/resources` 目录中的静态资源。在 `src/main/resources/META-INF/resources` 目录中，用这个{quickstarts-blob-url}/validation-quickstart/src/main/resources/META-INF/resources/index.html[index.html]文件中的内容取代 `index.html` 文件。"

#. type: Title ==
#: upstream/_guides/validation.adoc:251
#, fuzzy, no-wrap
msgid "Run the application"
msgstr "运行应用程序"

#. type: Plain text
#: upstream/_guides/validation.adoc:254
#, fuzzy
msgid "Now, let's see our application in action. Run it with:"
msgstr "现在，让我们看看我们的应用程序的运行情况。用以下方式运行它。"

#. type: Plain text
#: upstream/_guides/validation.adoc:258
#, fuzzy
msgid "Then, open your browser to http://localhost:8080/:"
msgstr "然后，打开你的浏览器 http://localhost:8080/ "

#. type: Plain text
#: upstream/_guides/validation.adoc:260
#, fuzzy
msgid "Enter the book details (valid or invalid)"
msgstr "输入书的详细信息（有效或无效）。"

#. type: Plain text
#: upstream/_guides/validation.adoc:261
#, fuzzy
msgid "Click on the _Try me..._ buttons to check if your data is valid using one of the methods we presented above."
msgstr "点击 _Try me_ ...按钮，用我们上面介绍的方法之一检查你的数据是否有效。"

#. type: Plain text
#: upstream/_guides/validation.adoc:263
#, fuzzy
msgid "image:validation-guide-screenshot.png[alt=Application]"
msgstr "image:validation-guide-screenshot.png[alt=\"Application\"]"

#. type: Plain text
#: upstream/_guides/validation.adoc:265
#, fuzzy
msgid "The application can be packaged using:"
msgstr "该应用程序可以用以下方式打包。"

#. type: Plain text
#: upstream/_guides/validation.adoc:269
#, fuzzy
msgid "and executed using `java -jar target/quarkus-app/quarkus-run.jar`."
msgstr "并使用 `java -jar target/quarkus-app/quarkus-run.jar` 来执行。"

#. type: Plain text
#: upstream/_guides/validation.adoc:271
#, fuzzy
msgid "You can also build the native executable using:"
msgstr "你也可以用以下方法构建本地可执行文件。"

#. type: Title ==
#: upstream/_guides/validation.adoc:274
#, fuzzy, no-wrap
msgid "Going further"
msgstr "更进一步"

#. type: Title ===
#: upstream/_guides/validation.adoc:276
#, fuzzy, no-wrap
msgid "Hibernate Validator extension and CDI"
msgstr "Hibernate验证器扩展和CDI"

#. type: Plain text
#: upstream/_guides/validation.adoc:279
#, fuzzy
msgid "The Hibernate Validator extension is tightly integrated with CDI."
msgstr "Hibernate Validator扩展与CDI紧密结合。"

#. type: Title ====
#: upstream/_guides/validation.adoc:280
#, fuzzy, no-wrap
msgid "Configuring the ValidatorFactory"
msgstr "配置ValidatorFactory"

#. type: Plain text
#: upstream/_guides/validation.adoc:283
#, fuzzy
msgid "Sometimes, you might need to configure the behavior of the `ValidatorFactory`, for instance to use a specific `ParameterNameProvider`."
msgstr "有时，你可能需要配置 `ValidatorFactory` 的行为，例如，使用一个特定的 `ParameterNameProvider` 。"

#. type: Plain text
#: upstream/_guides/validation.adoc:286
#, fuzzy
msgid "While the `ValidatorFactory` is instantiated by Quarkus itself, you can very easily tweak it by declaring replacement beans that will be injected in the configuration."
msgstr "虽然 `ValidatorFactory` 是由Quarkus本身实例化的，但你可以非常容易地通过声明将被注入配置中的替换豆来调整它。"

#. type: Plain text
#: upstream/_guides/validation.adoc:288
#, fuzzy
msgid "If you create a bean of the following types in your application, it will automatically be injected into the `ValidatorFactory` configuration:"
msgstr "如果你在你的应用程序中创建了以下类型的Bean，它将自动被注入到 `ValidatorFactory` 配置中。"

#. type: Plain text
#: upstream/_guides/validation.adoc:290
#, fuzzy
msgid "`javax.validation.ClockProvider`"
msgstr " `javax.validation.ClockProvider` "

#. type: Plain text
#: upstream/_guides/validation.adoc:291
#, fuzzy
msgid "`javax.validation.ConstraintValidator`"
msgstr " `javax.validation.ConstraintValidator` "

#. type: Plain text
#: upstream/_guides/validation.adoc:292
#, fuzzy
msgid "`javax.validation.ConstraintValidatorFactory`"
msgstr " `javax.validation.ConstraintValidatorFactory` "

#. type: Plain text
#: upstream/_guides/validation.adoc:293
#, fuzzy
msgid "`javax.validation.MessageInterpolator`"
msgstr " `javax.validation.MessageInterpolator` "

#. type: Plain text
#: upstream/_guides/validation.adoc:294
#, fuzzy
msgid "`javax.validation.ParameterNameProvider`"
msgstr " `javax.validation.ParameterNameProvider` "

#. type: Plain text
#: upstream/_guides/validation.adoc:295
#, fuzzy
msgid "`javax.validation.TraversableResolver`"
msgstr " `javax.validation.TraversableResolver` "

#. type: Plain text
#: upstream/_guides/validation.adoc:296
#, fuzzy
msgid "`org.hibernate.validator.spi.properties.GetterPropertySelectionStrategy`"
msgstr " `org.hibernate.validator.spi.properties.GetterPropertySelectionStrategy` "

#. type: Plain text
#: upstream/_guides/validation.adoc:297
#, fuzzy
msgid "`org.hibernate.validator.spi.nodenameprovider.PropertyNodeNameProvider`"
msgstr " `org.hibernate.validator.spi.nodenameprovider.PropertyNodeNameProvider` "

#. type: Plain text
#: upstream/_guides/validation.adoc:298
#, fuzzy
msgid "`org.hibernate.validator.spi.scripting.ScriptEvaluatorFactory`"
msgstr " `org.hibernate.validator.spi.scripting.ScriptEvaluatorFactory` "

#. type: Plain text
#: upstream/_guides/validation.adoc:300
#, fuzzy
msgid "You don't have to wire anything."
msgstr "你不需要给任何东西接线。"

#. type: delimited block =
#: upstream/_guides/validation.adoc:304
#, fuzzy
msgid "Obviously, for each listed type, you can declare only one bean."
msgstr "很明显，对于每个列出的类型，你只能声明一个bean。"

#. type: delimited block =
#: upstream/_guides/validation.adoc:306
#, fuzzy
msgid "Most of the time, these beans should be declared as `@ApplicationScoped`."
msgstr "大多数情况下，这些豆子应该被声明为 `@ApplicationScoped` 。"

#. type: delimited block =
#: upstream/_guides/validation.adoc:310
#, fuzzy
msgid "However, in the case of ``ConstraintValidator``s that are dependent of attributes of the constraint annotation (typically when implementing the `initialize(A constraintAnnotation)` method), use the `@Dependent` scope to make sure each annotation context has a separate instance of the `ConstraintValidator` bean."
msgstr "然而，在 `ConstraintValidator` s依赖于约束注解的属性的情况下（通常在实现 `initialize(A constraintAnnotation)` 方法时），使用 `@Dependent` 范围来确保每个注解上下文都有一个单独的 `ConstraintValidator` Bean实例。"

#. type: Title ====
#: upstream/_guides/validation.adoc:312
#, fuzzy, no-wrap
msgid "Constraint validators as beans"
msgstr "作为豆类的限制性验证器"

#. type: Plain text
#: upstream/_guides/validation.adoc:315
#, fuzzy
msgid "You can declare your constraint validators as CDI beans:"
msgstr "你可以把你的约束验证器声明为CDI豆。"

#. type: delimited block -
#: upstream/_guides/validation.adoc:320
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class MyConstraintValidator implements ConstraintValidator<MyConstraint, String> {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/validation.adoc:323
#, no-wrap
msgid ""
"    @Inject\n"
"    MyService service;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/validation.adoc:329
#, no-wrap
msgid ""
"    @Override\n"
"    public boolean isValid(String value, ConstraintValidatorContext context) {\n"
"        if (value == null) {\n"
"            return true;\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/validation.adoc:333
#, no-wrap
msgid ""
"        return service.validate(value);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/validation.adoc:337
#, fuzzy
msgid "When initializing a constraint validator of a given type, Quarkus will check if a bean of this type is available and, if so, it will use it instead of instantiating one."
msgstr "当初始化一个给定类型的约束验证器时，Quarkus将检查是否有这种类型的bean，如果有，它将使用它而不是实例化一个。"

#. type: Plain text
#: upstream/_guides/validation.adoc:339
#, fuzzy
msgid "Thus, as demonstrated in our example, you can fully use injection in your constraint validator beans."
msgstr "因此，正如我们的例子所展示的，你可以在你的约束验证器Bean中完全使用注入。"

#. type: delimited block =
#: upstream/_guides/validation.adoc:343
#, fuzzy
msgid "Except in very specific situations, it is recommended to make the said beans `@ApplicationScoped`."
msgstr "除非在非常特殊的情况下，建议将上述豆子 `@ApplicationScoped` 。"

#. type: Title ===
#: upstream/_guides/validation.adoc:345
#, fuzzy, no-wrap
msgid "Validation and localization"
msgstr "审定和本地化"

#. type: Plain text
#: upstream/_guides/validation.adoc:348
#, fuzzy
msgid "By default, constraint violation messages will be returned in the build system locale."
msgstr "默认情况下，违反约束的信息将以构建系统的语言返回。"

#. type: Plain text
#: upstream/_guides/validation.adoc:350
#, fuzzy
msgid "You can configure this behavior by adding the following configuration in your `application.properties`:"
msgstr "你可以通过在你的 `application.properties` 中添加以下配置来配置这种行为。"

#. type: delimited block -
#: upstream/_guides/validation.adoc:355
#, no-wrap
msgid ""
"# The default locale to use\n"
"quarkus.default-locale=fr-FR\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/validation.adoc:359
#, fuzzy
msgid "If you are using RESTEasy Reactive, in the context of a JAX-RS endpoint, Hibernate Validator will automatically resolve the optimal locale to use from the `Accept-Language` HTTP header, provided the supported locales have been properly specified in the `application.properties`:"
msgstr "如果你使用的是RESTEasy Reactive，在JAX-RS端点的背景下，Hibernate验证器会自动从 `Accept-Language` HTTP头中解析出要使用的最佳locale，前提是支持的locale已经在 `application.properties` 。"

#. type: delimited block -
#: upstream/_guides/validation.adoc:364
#, no-wrap
msgid ""
"# The list of all the supported locales\n"
"quarkus.locales=en-US,es-ES,fr-FR\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/validation.adoc:366
#, fuzzy, no-wrap
msgid "Validation groups for REST endpoint or service method validation"
msgstr "用于REST端点或服务方法验证的验证组"

#. type: Plain text
#: upstream/_guides/validation.adoc:370
#, fuzzy
msgid "It's sometimes necessary to enable different validation constraints for the same class when it's passed to a different method."
msgstr "当同一个类被传递给不同的方法时，有时有必要为它启用不同的验证约束。"

#. type: Plain text
#: upstream/_guides/validation.adoc:375
#, fuzzy
msgid "For example, a `Book` may need to have a `null` identifier when passed to the `post` method (because the identifier will be generated), but a non-`null` identifier when passed to the `put` method (because the method needs the identifier to know what to update)."
msgstr "例如，一个 `Book` ，在传递给 `post` 方法时，可能需要有一个 `null` 的标识符（因为标识符将被生成），但在传递给 `put` 方法时，则需要一个非 `null` 的标识符（因为该方法需要标识符来知道要更新什么）。"

#. type: Plain text
#: upstream/_guides/validation.adoc:378
#, fuzzy
msgid "To address this, you can take advantage of validation groups.  Validation groups are markers that you put on your constraints in order to enable or disable them at will."
msgstr "为了解决这个问题，你可以利用验证组的优势。验证组是你放在约束条件上的标记，以便随意启用或停用它们。"

#. type: Plain text
#: upstream/_guides/validation.adoc:380
#, fuzzy
msgid "First, define the `Post` and `Put` groups, which are just Java interfaces."
msgstr "首先，定义 `Post` 和 `Put` 组，这只是Java接口。"

#. type: delimited block -
#: upstream/_guides/validation.adoc:389
#, no-wrap
msgid ""
"public interface ValidationGroups {\n"
"    interface Post extends Default { // <1>\n"
"    }\n"
"    interface Put extends Default { // <1>\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/validation.adoc:394
#, fuzzy
msgid "Make the custom groups extend the `Default` group.  This means that whenever these groups are enabled, the `Default` group is also enabled.  This is useful if you have constraints that you want validated in both the `Post` and `Put` method: you can simply use the default group on those constraints, like on the `title` property below."
msgstr "使自定义组扩展到 `Default` 组。这意味着，只要这些组被启用， `Default` 组也会被启用。如果你有希望在 `Post` 和 `Put` 方法中都得到验证的约束条件，这就很有用：你可以简单地在这些约束条件上使用默认组，就像在下面的 `title` 属性上。"

#. type: Plain text
#: upstream/_guides/validation.adoc:396
#, fuzzy
msgid "Then add the relevant constraints to `Book`, assigning the right group to each constraint:"
msgstr "然后将相关约束添加到 `Book` ，为每个约束分配正确的组。"

#. type: delimited block -
#: upstream/_guides/validation.adoc:404
#, no-wrap
msgid ""
"    @Null(groups = ValidationGroups.Post.class)\n"
"    @NotNull(groups = ValidationGroups.Put.class)\n"
"    public Long id;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/validation.adoc:407
#, no-wrap
msgid ""
"    @NotBlank\n"
"    public String title;\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/validation.adoc:412
#, fuzzy
msgid "Finally, add a `@ConvertGroup` annotation next to your `@Valid` annotation in your validated method."
msgstr "最后，在你的验证方法中的 `@Valid` 注释旁边添加一个 `@ConvertGroup` 注释。"

#. type: delimited block -
#: upstream/_guides/validation.adoc:421
#, no-wrap
msgid ""
"@Path(\"/\")\n"
"@POST\n"
"@Consumes(MediaType.APPLICATION_JSON)\n"
"public void post(@Valid @ConvertGroup(to = ValidationGroups.Post.class) Book book) { // <1>\n"
"    // ...\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/validation.adoc:428
#, no-wrap
msgid ""
"@Path(\"/\")\n"
"@PUT\n"
"@Consumes(MediaType.APPLICATION_JSON)\n"
"public void put(@Valid @ConvertGroup(to = ValidationGroups.Put.class) Book book) { // <2>\n"
"    // ...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/validation.adoc:432
#, fuzzy
msgid "Enable the `Post` group, meaning only constraints assigned to the `Post` (and `Default`) groups will be validated for the `book` parameter of the `post` method.  In this case, it means `Book.id` must be `null` and `Book.title` must not be blank."
msgstr "启用 `Post` 组，意味着只有分配给 `Post` （和 `Default` ）组的约束条件才会被验证为 `post` 方法的 `book` 参数。在这种情况下，这意味着 `Book.id` 必须是 `null` ， `Book.title` 不能是空白。"

#. type: Plain text
#: upstream/_guides/validation.adoc:435
msgid "Enable the `Put` group, meaning only constraints assigned to the `Put` (and `Default`) groups will be validated for the `book` parameter of the `put` method.  In this case, it means `Book.id` must not be `null` and `Book.title` must not be blank."
msgstr ""

#. type: Title ==
#: upstream/_guides/validation.adoc:437
#, no-wrap
msgid "Hibernate Validator Configuration Reference"
msgstr ""
