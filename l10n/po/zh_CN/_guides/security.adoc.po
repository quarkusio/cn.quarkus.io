# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: \n"
"POT-Creation-Date: 2022-10-06 09:14+0000\n"
"PO-Revision-Date: 2022-10-08 23:58+0800\n"
"Last-Translator: \n"
"Language-Team: \n"
"Language: zh\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 3.1.1\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/security.adoc:6
#, no-wrap
msgid "Quarkus Security overview"
msgstr "Quarkus安全概述"

#. type: Plain text
#: upstream/_guides/security.adoc:11
msgid "Quarkus Security is a framework that provides the architecture, multiple authentication and authorization mechanisms, and other tools for you to build secure and production-quality Java applications."
msgstr "Quarkus Security是一个框架，它提供了架构、多种认证和授权机制以及其他工具，用来为开发者提供构建达到生产级别安全性质量保证的Quarkus应用程序。"

#. type: Title ==
#: upstream/_guides/security.adoc:12 no-wrap
msgid "Getting started with Quarkus Security"
msgstr "开始使用Quarkus Security"

#. type: Plain text
#: upstream/_guides/security.adoc:15
msgid "Before you start building security into your Quarkus applications, review the overview information to learn about the Quarkus Security architecture and the different authentication and authorization mechanisms that Quarkus supports."
msgstr "在您开始在您的Quarkus应用程序中建立安全机制之前，请回顾一下概述信息，了解Quarkus Security架构以及Quarkus支持的不同认证和授权机制。"

#. type: Plain text
#: upstream/_guides/security.adoc:19
msgid "To get started with security in Quarkus, we recommend that you first combine the Quarkus built-in xref:security-basic-auth-concept.adoc[Basic HTTP authentication] with the JPA identity provider to enable role-based access control (RBAC).  Complete the steps in the ref:security-getting-started.adoc[Secure a Quarkus application with Basic authentication] tutorial.  After you have successfully secured your Quarkus application with basic HTTP authentication, you can increase the security further by adding more advanced authentication mechanisms, for example, OpenID Connect (OIDC) authentication."
msgstr "要开始使用Quarkus的安全性，我们建议您首先将Quarkus内置的 link:security-basic-auth-concept.html[Basic HTTP认证] 与JPA身份提供者结合起来，以实现基于角色的访问控制（RBAC）。完成 ref:security-getting-started.adoc[Secure a Quarkus application with Basic authentication] 教程中的步骤。在您成功地用基本的HTTP认证来保护您的Quarkus应用程序后，您可以通过添加更高级的认证机制来进一步提高安全性，例如，OpenID Connect（OIDC）认证。"

#. type: Title ==
#: upstream/_guides/security.adoc:20
#, no-wrap
msgid "Security architecture"
msgstr "安全架构"

#. type: Plain text
#: upstream/_guides/security.adoc:23
msgid "The `HttpAuthenticationMechanism` interface is the main entry mechanism for securing HTTP applications in Quarkus."
msgstr "`HttpAuthenticationMechanism` 接口是Quarkus 保护HTTP 程序安全的主要入口机制。"

#. type: Plain text
#: upstream/_guides/security.adoc:26
msgid "Quarkus Security uses `HttpAuthenticationMechanism` to extract the authentication credentials from the HTTP request and delegates them to `IdentityProvider` to convert the credentials to `SecurityIdentity`.  For example, the credentials can come from the `Authorization` header, client HTTPS certificates, or cookies."
msgstr "Quarkus Security使用 `HttpAuthenticationMechanism` 从HTTP请求中提取认证凭证，并委托给 `IdentityProvider` 来完成这些凭证到 `SecurityIdentity` 的转换。例如，凭证可能来自于HTTP `Authorization` 头、客户端HTTPS证书或cookies。"

#. type: Plain text
#: upstream/_guides/security.adoc:28
msgid "`IdentityProvider` verifies the authentication credentials and maps them to `SecurityIdentity`, which has the username, roles, original authentication credentials, and other attributes."
msgstr "`IdentityProvider` 会验证认证凭证并将其映射到 `SecurityIdentity` ，其中包含用户名、角色、原始认证凭证和其他属性。"

#. type: Plain text
#: upstream/_guides/security.adoc:30
msgid "For every authenticated resource, you can inject a `SecurityIdentity` instance to get the authenticated identity information."
msgstr "对于每个认证资源，您可以注入一个 `SecurityIdentity` 实例来获得认证的身份信息。"

#. type: Plain text
#: upstream/_guides/security.adoc:33
msgid "In other contexts, it is possible to have other parallel representations of the same information or parts of it, for example, `SecurityContext` for JAX-RS or `JsonWebToken` for JSON Web Tokens (JWT)."
msgstr "在其他一些情况下，您可能有相同信息或部分相同信息的其他不同表示，如JAX-RS的 `SecurityContext` ，或JWT的 `JsonWebToken` 。"

#. type: Title ==
#: upstream/_guides/security.adoc:34
#, no-wrap
msgid "Authentication mechanisms"
msgstr "认证机制"

#. type: Plain text
#: upstream/_guides/security.adoc:37
msgid "Quarkus supports multiple authentication mechanisms"
msgstr "Quarkus支持多种认证机制"

#. type: Title ===
#: upstream/_guides/security.adoc:38
#, no-wrap
msgid "Basic and Form HTTP authentication"
msgstr "Basic和Form HTTP认证机制"

#. type: Plain text
#: upstream/_guides/security.adoc:41
msgid "xref:security-basic-auth-concept.adoc[Basic HTTP Authentication] and xref:security-built-in-authentication.adoc#form-auth[Form HTTP authentication] are the core authentication mechanisms supported in Quarkus."
msgstr "xref:security-basic-auth-concept.adoc[Basic HTTP 认证] and xref:security-built-in-authentication.adoc#form-auth[Form HTTP 认证] 是Quarkus支持的核心认证机制。"

#. type: Title ===
#: upstream/_guides/security.adoc:42
#, no-wrap
msgid "WebAuthn authentication"
msgstr "WebAuthn认证机制"

#. type: Plain text
#: upstream/_guides/security.adoc:47
msgid "https://webauthn.guide/[WebAuthn] is an authentication mechanism that replaces passwords.  When you write a service for registering new users, or logging them in, instead of asking for a password, you can use WebAuthn, which replaces the password.  For more information, see xref:security-webauthn.adoc[Secure a Quarkus application by using the WebAuthn authentication mechanism]."
msgstr "link:https://webauthn.guide/[WebAuthn] 是一种旨在取代密码的认证机制。简而言之，每当您写一个注册新用户或提供登录的服务，您就可以使用WebAuthn来代替使用密码的方式。更多信息，请参阅 link:security-webauthn.html[使用WebAuthn 认证机制保护 Quarkus 应用程序]."

#. type: Title ===
#: upstream/_guides/security.adoc:48
#, no-wrap
msgid "Mutual TLS (mTLS) authentication"
msgstr "TLS互认证"

#. type: Plain text
#: upstream/_guides/security.adoc:52
msgid "Quarkus provides mutual TLS (mTLS) authentication so that you can authenticate users based on their X.509 certificates.  For more information, see xref:security-built-in-authentication.adoc#mutual-tls[mutual TLS authentication]."
msgstr "Quarkus提供了TLS互认证，这样您就可以根据用户的X.509证书进行认证。更多信息请参见 link:security-built-in-authentication.html#mutual-tls[TLS互认证] 。"

#. type: Title ===
#: upstream/_guides/security.adoc:53
#, no-wrap
msgid "OpenID Connect authentication"
msgstr "OpenID Connect 认证"

#. type: Plain text
#: upstream/_guides/security.adoc:56
msgid "OpenID Connect (OIDC) is an identity layer that works on top of the OAuth 2.0 protocol. OIDC enables client applications to verify the identity of a user based on the authentication performed by the OIDC provider and to retrieve basic information about that user."
msgstr "OpenID Connect（OIDC）是一个身份层，它工作在OAuth 2.0协议之上。OIDC使客户端应用程序能够根据OIDC提供者进行的认证来验证用户的身份，并获取用户的基本信息。"

#. type: Plain text
#: upstream/_guides/security.adoc:61
msgid "The Quarkus `quarkus-oidc` extension provides a reactive, interoperable, multitenant-enabled OIDC adapter that supports Bearer Token and Authorization Code Flow authentication mechanisms.  The Bearer Token mechanism extracts the token from the HTTP Authorization header.  The Authorization Code Flow mechanism redirects the user to an OIDC provider to authenticate the identity of the user.  After the user is redirected back to Quarkus, the mechanism completes the authentication process by exchanging the provided code that was granted for the ID, access, and refresh tokens."
msgstr "`quarkus-oidc` 扩展提供了一个响应式的、可互操作的、支持多租户的OIDC适配器，以支持 `Bearer Token` 和 `Authorization Code Flow` 认证机制。`Bearer Token` 机制从HTTP header中提取token。 `Authorization Code Flow` 机制将用户重定向到OIDC提供者来认证用户身份，并在用户被重定向回Quarkus后，通过将提供的代码授权与ID、访问和刷新token进行交换来完成认证过程。"

#. type: Plain text
#: upstream/_guides/security.adoc:64
msgid "You can verify ID and access JWT tokens by using the refreshable JSON Web Key (JWK) set or you can introspect them remotely.  However, opaque (binary) tokens can only be introspected remotely."
msgstr "您可以使用可刷新的 `JWK` 密钥集验证ID和访问 `JWT` token。但JWT和不透明（二进制）token都可以被远程自省(introspect)。"

#. type: delimited block =
#: upstream/_guides/security.adoc:68
msgid "Using the Quarkus OIDC extension, both Bearer Token and Authorization Code Flow mechanisms use <<smallrye-jwt, SmallRye JWT>> to represent JWT tokens as MicroProfile JWT `org.eclipse.microprofile.jwt.JsonWebToken`."
msgstr "通过 `Quarkus OIDC` 扩展， `Bearer` 和 `Authorization Code Flow` 认证机制都使用 link:#smallrye-jwt[SmallRye JWT] 来将Microprofile JWT `org.eclipse.microprofile.jwt.JsonWebToken` 表示为JWTtoken。"

#. type: Title ====
#: upstream/_guides/security.adoc:70
#, no-wrap
msgid "Additional Quarkus resources for OIDC authentication"
msgstr "用于OIDC认证的其他Quarkus资源"

#. type: Plain text
#: upstream/_guides/security.adoc:73
msgid "For more information about OIDC authentication and authorization methods you can use to secure your Quarkus applications, see the following detailed resources:"
msgstr "关于可以应用于保护Quarkus程序的OIDC认证和授权的更多方式，请看以下更详细的资源："

#. type: Table
#: upstream/_guides/security.adoc:76
#, no-wrap
msgid "OIDC topic"
msgstr "OIDC专题"

#. type: Table
#: upstream/_guides/security.adoc:77
#, no-wrap
msgid "Quarkus information resource"
msgstr "Quarkus信息资源"

#. type: Table
#: upstream/_guides/security.adoc:77
#, no-wrap
msgid "Bearer Token authentication mechanis"
msgstr "Bearertoken认证机制"

#. type: Table
#: upstream/_guides/security.adoc:78
#, no-wrap
msgid "xref:security-openid-connect.adoc[Using OpenID Connect (OIDC) to protect service applications using Bearer Token authorization]"
msgstr "关于Bearer Token认证机制的信息，请参见 link:security-openid-connect.html[使用OpenID Connect保护应用程序服务] 。"

#. type: Table
#: upstream/_guides/security.adoc:78
#, no-wrap
msgid "Authorization Code Flow authentication mechanis"
msgstr "Authorization Code Flow 认证机制"

#. type: Table
#: upstream/_guides/security.adoc:79
#, no-wrap
msgid "xref:security-openid-connect-web-authentication.adoc[OpenID Connect (OIDC) authorization code flow mechanism]"
msgstr "link:security-openid-connect-web-authentication.html[OpenID Connect (OIDC) authorization code flow mechanism]"

#. type: Table
#: upstream/_guides/security.adoc:79
#, no-wrap
msgid "Multiple tenants that can support Bearer Token or Authorization Code Flow mechanism"
msgstr "可支持 Bearer Token or Authorization Code Flow 机制的多租户模式"

#. type: Table
#: upstream/_guides/security.adoc:80
#, no-wrap
msgid "xref:security-openid-connect-multitenancy.adoc[Using OpenID Connect (OIDC) multi-tenancy]"
msgstr "link:security-openid-connect-multitenancy.html[使用OpenID连接（OIDC）多租户]"

#. type: Table
#: upstream/_guides/security.adoc:80
#, no-wrap
msgid "Using Keycloak to centralize authorization"
msgstr "使用Keycloak进行集中授权"

#. type: Table
#: upstream/_guides/security.adoc:81
#, no-wrap
msgid "xref:security-keycloak-authorization.adoc[Using OpenID Connect (OIDC) and Keycloak to centralize authorization]"
msgstr "link:security-keycloak-authorization.html[使用OpenID连接（OIDC）和Keycloak来集中授权]"

#. type: Table
#: upstream/_guides/security.adoc:81
#, no-wrap
msgid "Configuring Keycloak programmatically"
msgstr "以编程方式配置Keycloak"

#. type: Table
#: upstream/_guides/security.adoc:82
#, no-wrap
msgid "xref:security-keycloak-admin-client.adoc[Using the Keycloak admin client]"
msgstr "link:security-keycloak-admin-client.html[使用Keycloak管理客户端]"

#. type: delimited block =
#: upstream/_guides/security.adoc:88
msgid "If you need to enable the Quarkus OIDC extension at runtime, set `quarkus.oidc.tenant-enabled=false` at build time and then re-enable it at runtime by using a system property.  For more information about managing the individual tenant configurations in multitenant OIDC deployments, see the _Disabling tenant configurations_ section in the xref:security-openid-connect-multitenancy.adoc#disable-tenant[Using OpenID Connect (OIDC) multi-tenancy] guide."
msgstr "如果您想在运行时启用Quarkus OIDC扩展，那么在构建时设置 `quarkus.oidc.tenant-enabled=false` ，并在运行时使用系统属性重新启用它。更多关于管理多租户OIDC部署中各个租户配置的信息，请参见 link:security-openid-connect-multitenancy.html#disable-tenant[禁用租户配置] 。"

#. type: Title ===
#: upstream/_guides/security.adoc:90
#, no-wrap
msgid "OpenID Connect client and filters"
msgstr "OpenID Connect客户端和过滤器"

#. type: Plain text
#: upstream/_guides/security.adoc:93
msgid "The `quarkus-oidc-client` extension provides `OidcClient` for acquiring and refreshing access tokens from OpenID Connect and OAuth2 providers that support the following token grants:"
msgstr "`quarkus-oidc-client` 扩展提供 `OidcClient` ，用于从支持以下token授权的OpenID Connect和OAuth2提供者那里获取和刷新访问token："

#. type: Plain text
#: upstream/_guides/security.adoc:94
msgid "`client-credentials`"
msgstr "`client-credentials`"

#. type: Plain text
#: upstream/_guides/security.adoc:95
msgid "`password`"
msgstr "`password`"

#. type: Plain text
#: upstream/_guides/security.adoc:96
msgid "`refresh_token`"
msgstr "`refresh_token`"

#. type: Plain text
#: upstream/_guides/security.adoc:100
msgid "The `quarkus-oidc-client-filter` extension requires the `quarkus-oidc-client` extension and provides JAX-RS `OidcClientRequestFilter`, which sets the access token acquired by `OidcClient` as the `Bearer` scheme value of the HTTP `Authorization` header.  This filter can be registered with MP RestClient implementations injected into the current Quarkus endpoint, but it is not related to the authentication requirements of this service endpoint.  For example, it can be a public endpoint, or it can be protected with mTLS."
msgstr "`quarkus-oidc-client-filter` 扩展依赖于 `quarkus-oidc-client` 扩展，并提供 JAX-RS `OidcClientRequestFilter` ，它将由 `OidcClient` 获得的访问token设置为 HTTP `Authorization` 头的 `Bearer` scheme值。这个过滤器可以与注入当前 Quarkus 节点的 MP RestClient 实现一起被注册，但它与这个服务节点的认证要求无关。例如，它可以是一个公共节点，也可以用mTLS保护。"

#. type: delimited block =
#: upstream/_guides/security.adoc:104
msgid "In this scenario, you do not need to protect your Quarkus endpoint by using the Quarkus OpenID Connect adapter."
msgstr "在这种情况下，您不需要通过使用Quarkus OpenID Connect适配器来保护您的Quarkus节点。"

#. type: Plain text
#: upstream/_guides/security.adoc:109
msgid "The `quarkus-oidc-token-propagation` extension requires the `quarkus-oidc` extension and provides JAX-RS `TokenCredentialRequestFilter`, which sets the OpenID Connect Bearer or Authorization Code Flow access token as the `Bearer` scheme value of the HTTP `Authorization` header.  This filter can be registered with MP RestClient implementations injected into the current Quarkus endpoint, which in turn must be protected by using the Quarkus OpenID Connect adapter.  This filter can be used to propagate the access token to the downstream services."
msgstr "`quarkus-oidc-token-propagation` 扩展依赖于 `quarkus-oidc` 扩展，并提供 JAX-RS  `TokenCredentialRequestFilter` ，它将 OpenID Connect Bearer 或 Authorization Code Flow 访问token设置为 HTTP `Authorization` 头的 `Bearer` scheme值。这个过滤器可以与注入当前 Quarkus 节点的 MP RestClient 实现一起被注册，并且Quarkus节点本身必须用Quarkus OpenID Connect适配器来保护。这个过滤器可以用来将访问token传播到下游服务中。"

#. type: Plain text
#: upstream/_guides/security.adoc:111
msgid "For more information, see the xref:security-openid-connect-client.adoc[OpenID Connect client and token propagation quickstart] and xref:security-openid-connect-client-reference.adoc[OpenID Connect (OIDC) and OAuth2 client and filters reference] guides."
msgstr "更多信息请参见《 link:security-openid-connect-client.html[使用OpenID Connect客户端和token传递quickstart] 》和 《 link:security-openid-connect-client-reference.htmlOpenID Connect (OIDC) 和 OAuth2 客户端以及过滤器参考] 》指南。"

#. type: Title ===
#: upstream/_guides/security.adoc:113
#, no-wrap
msgid "SmallRye JWT authentication"
msgstr "SmallRye JWT authentication"

#. type: Plain text
#: upstream/_guides/security.adoc:116
msgid "The `quarkus-smallrye-jwt` extension provides a MicroProfile JSON Web Token (JWT) 1.2.1 implementation and multiple options to verify signed and encrypted `JWT` tokens and represents them as `org.eclipse.microprofile.jwt.JsonWebToken`."
msgstr "`quarkus-smallrye-jwt` 提供Microprofile JWT 1.2.1的实现和更多的选项来验证签名和加密的 `JWT` token，并将其表示为 `org.eclipse.microprofile.jwt.JsonWebToken`。"

#. type: Plain text
#: upstream/_guides/security.adoc:119
msgid "`quarkus-smallrye-jwt` is an alternative to the `quarkus-oidc` Bearer Token authentication mechanism, and verifies only `JWT` tokens by using either PEM keys or the refreshable `JWK` key set.  `quarkus-smallrye-jwt` also provides the JWT generation API, which you can use to easily create `signed`, `inner-signed`, and `encrypted` `JWT` tokens."
msgstr "`quarkus-smallrye-jwt` 提供了一个替代 `quarkus-oidc` Bearer Token认证机制的方法，并且目前只能验证使用PEM密钥或可刷新的 `JWK` 密钥集的 `JWT` token。此外，`quarkus-smallrye-jwt` 还提供了 JWT generation API`，以便轻松创建 `signed` 、 `inner-signed` 和 `encrypted` `JWT` token。"

#. type: Plain text
#: upstream/_guides/security.adoc:121
msgid "For more information, see xref:security-jwt.adoc[Using SmallRye JWT role-based access control]."
msgstr "更多信息请参见《 link:security-jwt.html[使用SmallRye JWT RBAC] 》指南。"

#. type: Title ===
#: upstream/_guides/security.adoc:122
#, no-wrap
msgid "OAuth2 authentication"
msgstr "OAuth2 认证机制"

#. type: Plain text
#: upstream/_guides/security.adoc:126
msgid "`quarkus-elytron-security-oauth2` provides an alternative to the `quarkus-oidc` Bearer Token authentication mechanism. `quarkus-elytron-security-oauth2` is based on `Elytron` and is primarily intended for introspecting opaque tokens remotely.  For more information, see xref:security-oauth2.adoc[Using OAuth2]."
msgstr "`quarkus-elytron-security-oauth2` 提供了一个替代 `quarkus-oidc` Bearer Token认证机制的方法。它基于 `Elytron` 并且主要是为了对不透明的token进行远程自我检查。更多信息请参见 link:security-oauth2.html[使用OAuth2] 指南。"

#. type: Title ===
#: upstream/_guides/security.adoc:128
#, no-wrap
msgid "Choosing between OpenID Connect, SmallRye JWT, and OAuth2 authentication mechanisms"
msgstr "在OpenID Connect、SmallRye JWT和OAuth2扩展之间做出选择"

#. type: Plain text
#: upstream/_guides/security.adoc:131
msgid "Use the following information to help you to decide which authentication mechanism to use to secure your Quarkus applications:"
msgstr "使用以下信息来帮助您决定使用哪种认证机制来保护您的Quarkus应用程序："

#. type: Plain text
#: upstream/_guides/security.adoc:134
msgid "`quarkus-oidc` requires an OpenID Connect provider such as Keycloak, which can be used to verify the Bearer tokens or authenticate the end users with the Authorization Code flow.  In both cases, `quarkus-oidc` requires a connection to the specified OpenID Connect provider."
msgstr "`quarkus-oidc` 扩展需要一个OpenID Connect提供者，如Keycloak，用以验证Bearer tokens或用Authorization Code flow验证终端用户。在这两种情况下 `quarkus-oidc` 需要连接到这个OpenID Connect提供者。"

#. type: Plain text
#: upstream/_guides/security.adoc:137
msgid "If the user authentication requires Authorization Code flow or you need to support multiple tenants, use `quarkus-oidc`.  `quarkus-oidc` can also request user information by using both Authorization Code Flow and Bearer access tokens."
msgstr "如果用户认证需要是使用Authorization Code flow或者您需要支持多租户，请使用 `quarkus-oidc` 。 `quarkus-oidc` 也可以通过Authorization Code Flow 和 Bearer access tokens来请求用户信息。"

#. type: Plain text
#: upstream/_guides/security.adoc:139
msgid "If your Bearer tokens must be verified, use `quarkus-oidc`, `quarkus-smallrye-jwt`, or `quarkus-elytron-security-oauth2`."
msgstr "当需要验证Bearer tokens时，您可以使用 `quarkus-oidc` , `quarkus-smallrye-jwt` 和 `quarkus-elytron-security-oauth2` 。"

#. type: Plain text
#: upstream/_guides/security.adoc:142
msgid "If your Bearer tokens are in a JWT format, you can use either of the three extensions. Both `quarkus-oidc` and `quarkus-smallrye-jwt` support refreshing the JsonWebKey (JWK) set when the OpenID Connect provider rotates the keys.  Therefore, if remote token introspection must be avoided or is unsupported by the providers, use `quarkus-oidc` or `quarkus-smallrye-jwt` for verifying JWT tokens."
msgstr "如果您有JWT格式的 Bearer tokens，那么这三个扩展都可以使用。 `quarkus-oidc` 和 `quarkus-smallrye-jwt` 都支持在OpenID Connect提供者旋转密钥时刷新JsonWebKey（JWK）集，因此，如果必须避免远程token自查或提供者不支持，则应使用 `quarkus-oidc` 或 `quarkus-smallrye-jwt` 来验证JWTtoken。"

#. type: Plain text
#: upstream/_guides/security.adoc:145
msgid "If you need to introspect the JWT tokens remotely, you can use either `quarkus-oidc` or `quarkus-elytron-security-oauth2` because they support the verification of the opaque or binary tokens by using remote introspection.  `quarkus-smallrye-jwt` does not support the remote introspection of both opaque or JWT tokens but instead relies on the locally available keys that are usually retrieved from the OpenID Connect provider."
msgstr "如果您需要进行JWT tokens远程自查，您可以使用 `quarkus-oidc` 或 `quarkus-elytron-security-oauth2` ，因为它们支持通过使用远程自查来验证不透明或二进制token。 `quarkus-smallrye-jwt` 不支持对不透明或JWT token进行远程自查，而是依赖于通常从OpenID Connect提供者那里检索的本地可用密钥。"

#. type: Plain text
#: upstream/_guides/security.adoc:148
msgid "`quarkus-oidc` and `quarkus-smallrye-jwt` support the injecting of JWT and opaque tokens into the endpoint code.  Injected JWT tokens provide more information about the user. All extensions can have the tokens injected as `Principal`."
msgstr "`quarkus-oidc` 和 `quarkus-smallrye-jwt` 支持将JWT和不透明的token都注入到节点代码中。注入的JWT token可以提供更丰富的用户信息。所有的扩展都可以将 token 以 `Principal` 的形式注入。"

#. type: Plain text
#: upstream/_guides/security.adoc:150
msgid "`quarkus-smallrye-jwt` supports more key formats than `quarkus-oidc`. `quarkus-oidc` uses only the JWK-formatted keys that are part of a JWK set, whereas `quarkus-smallrye-jwt` supports PEM keys."
msgstr "`quarkus-smallrye-jwt` 比 `quarkus-oidc` 支持更多的密钥格式。后者只使用属于JWK集的JWK格式的密钥，反之前者还支持PEM密钥。"

#. type: Plain text
#: upstream/_guides/security.adoc:153
msgid "`quarkus-smallrye-jwt` handles locally signed, inner-signed-and-encrypted, and encrypted tokens.  While `quarkus-oidc` and `quarkus-elytron-security-oauth2` can also verify such tokens but treats them as opaque tokens and verifies them through remote introspection."
msgstr "`quarkus-smallrye-jwt` 不仅可以在本地处理有签名的 token ，而且还可以处理内部签名并加密(inner-signed-and-encrypted)和单纯加密的 token 。事实上， `quarkus-oidc` 和 `quarkus-elytron-security-oauth2` 也可以验证这样的 token ，但只能把它们当作不透明的 token ，并通过远程自查来验证。"

#. type: Plain text
#: upstream/_guides/security.adoc:155
msgid "If you need a lightweight library for the remote introspection of opaque or JWT tokens, use `quarkus-elytron-security-oauth2`."
msgstr "如果您需要一个轻量级的库来进行不透明或JWT token 的远程自查，请使用 `quarkus-elytron-security-oauth2` 。"

#. type: delimited block =
#: upstream/_guides/security.adoc:162
msgid "Your decision to choose whether to use opaque or JWT token format will be driven by architectural considerations.  Opaque tokens tend to be much shorter than JWT tokens but need most of the token-associated state to be maintained in the provider database.  Opaque tokens are effectively database pointers.  JWT tokens are significantly longer than the opaque tokens but the providers are effectively delegating storing most of the token-associated state to the client by storing it as the token claims and either signing or encrypting them."
msgstr "请注意，选择使用不透明 token 还是JWT token 格式通常是由架构考虑驱动的。不透明 token 通常比JWT token 短得多，但它们需要在提供者的数据库中维护大部分的 token 相关状态。不透明 token 实际上就是数据库指针。JWT token 比不透明 token 要长得多，但提供者通过将大部分 token 相关状态存储为 token 声明并对其进行签名或加密从而有效地将其委托给客户端。"

#. type: Plain text
#: upstream/_guides/security.adoc:165
msgid "The following table provides a summary of the options for each authentication mechanism:"
msgstr "下表提供了每种认证机制的选项摘要："

#. type: Table
#: upstream/_guides/security.adoc:167
#, no-wrap
msgid "quarkus-oidc"
msgstr ""

#. type: Table
#: upstream/_guides/security.adoc:167
#, no-wrap
msgid "quarkus-smallrye-jwt"
msgstr ""

#. type: Table
#: upstream/_guides/security.adoc:169
#, no-wrap
msgid "quarkus-elytron-security-oauth2"
msgstr ""

#. type: Table
#: upstream/_guides/security.adoc:170
#, no-wrap
msgid "Requires Bearer JWT verification"
msgstr "需要进行Bearer JWT验证"

#. type: Table
#: upstream/_guides/security.adoc:171
#, no-wrap
msgid "Local verification or introspection"
msgstr "本地验证或自查"

#. type: Table
#: upstream/_guides/security.adoc:172 upstream/_guides/security.adoc:211
#, no-wrap
msgid "Local verification"
msgstr "本地验证"

#. type: Table
#: upstream/_guides/security.adoc:173 upstream/_guides/security.adoc:175
#: upstream/_guides/security.adoc:177 upstream/_guides/security.adoc:210
#: upstream/_guides/security.adoc:212
#, no-wrap
msgid "Introspection"
msgstr "自查"

#. type: Table
#: upstream/_guides/security.adoc:174
#, no-wrap
msgid "Requires Bearer opaque token verification"
msgstr "需要进行不透明Bearer token验证"

#. type: Table
#: upstream/_guides/security.adoc:176 upstream/_guides/security.adoc:181
#: upstream/_guides/security.adoc:188 upstream/_guides/security.adoc:191
#: upstream/_guides/security.adoc:192 upstream/_guides/security.adoc:195
#: upstream/_guides/security.adoc:196 upstream/_guides/security.adoc:199
#: upstream/_guides/security.adoc:200 upstream/_guides/security.adoc:202
#: upstream/_guides/security.adoc:204 upstream/_guides/security.adoc:206
#: upstream/_guides/security.adoc:208 upstream/_guides/security.adoc:214
#: upstream/_guides/security.adoc:216 upstream/_guides/security.adoc:218
#: upstream/_guides/security.adoc:220
#, no-wrap
msgid "No"
msgstr "不"

#. type: Table
#: upstream/_guides/security.adoc:178
#, no-wrap
msgid "Refreshing `JsonWebKey` set for verifying JWT tokens"
msgstr "刷新 `JsonWebKey` 集以验证JWT tokens"

#. type: Table
#: upstream/_guides/security.adoc:179 upstream/_guides/security.adoc:180
#: upstream/_guides/security.adoc:183 upstream/_guides/security.adoc:184
#: upstream/_guides/security.adoc:185 upstream/_guides/security.adoc:187
#: upstream/_guides/security.adoc:190 upstream/_guides/security.adoc:194
#: upstream/_guides/security.adoc:198 upstream/_guides/security.adoc:203
#: upstream/_guides/security.adoc:219
#, no-wrap
msgid "Yes"
msgstr "是"

#. type: Table
#: upstream/_guides/security.adoc:182
#, no-wrap
msgid "Represent token as `Principal``"
msgstr "将token表示为 `Principal``"

#. type: Table
#: upstream/_guides/security.adoc:186
#, no-wrap
msgid "Inject JWT as MP JSON Web Token (JWT)"
msgstr "将JWT注入为MP Json Web Token（JWT）"

#. type: Table
#: upstream/_guides/security.adoc:189
#, no-wrap
msgid "Authorization Code Flow"
msgstr ""

#. type: Table
#: upstream/_guides/security.adoc:193
#, no-wrap
msgid "Multi-tenancy"
msgstr "多租户"

#. type: Table
#: upstream/_guides/security.adoc:197
#, no-wrap
msgid "User info support"
msgstr "支持UserInfo"

#. type: Table
#: upstream/_guides/security.adoc:201
#, no-wrap
msgid "PEM key format support"
msgstr "支持Pem密钥格式"

#. type: Table
#: upstream/_guides/security.adoc:205
#, no-wrap
msgid "SecretKey support"
msgstr "支持SecretKey"

#. type: Table
#: upstream/_guides/security.adoc:207
#, no-wrap
msgid "In JSON Web Key (JWK) format"
msgstr "以JsonWebKey (JWK) 格式"

#. type: Table
#: upstream/_guides/security.adoc:209
#, no-wrap
msgid "Inner-signed and encrypted or encrypted tokens"
msgstr "Inner-Signed/Encrypted 或 Encrypted tokens"

#. type: Table
#: upstream/_guides/security.adoc:213
#, no-wrap
msgid "Custom token verification"
msgstr "自定义token验证"

#. type: Table
#: upstream/_guides/security.adoc:215
#, no-wrap
msgid "With injected JWT parser"
msgstr "使用注入的JWT Parser"

#. type: Table
#: upstream/_guides/security.adoc:217
#, no-wrap
msgid "Accept JWT as a cookie"
msgstr "接受JWT作为cookie"

#. type: Title ==
#: upstream/_guides/security.adoc:223
#, no-wrap
msgid "Identity providers"
msgstr "身份提供者（Identity Providers）"

#. type: Plain text
#: upstream/_guides/security.adoc:227
msgid "The JPA `IdentityProvider` creates a `SecurityIdentity` instance, which is used during user authentication to verify and authorize access requests making your Quarkus application secure."
msgstr "JPA `IdentityProvider` 创建了一个 `SecurityIdentity` 实例，在用户认证过程中，它被用来验证和授权访问请求以保证您的Quarkus应用程序安全。"

#. type: Plain text
#: upstream/_guides/security.adoc:230
msgid "`IdentityProvider` converts the authentication credentials provided by `HttpAuthenticationMechanism` to a `SecurityIdentity` instance."
msgstr "`IdentityProvider` 将 `HttpAuthenticationMechanism` 提供的认证凭证转换为 `SecurityIdentity` 实例。"

#. type: Plain text
#: upstream/_guides/security.adoc:233
msgid "Some extensions, for example, `OIDC`, `OAuth2`, and `SmallRye JWT` have inline `IdentityProvider` implementations specific to the supported authentication flow.  For example, `quarkus-oidc` uses its own `IdentityProvider` to convert a token to a `SecurityIdentity` instance."
msgstr "一些扩展如 `OIDC` 、 `OAuth2` 以及 `SmallRye JWT` 有内联的 `IdentityProvider` 实现来针对支持的认证流程的。例如， `quarkus-oidc` 使用它自己的 `IdentityProvider` 来将token转换为 `SecurityIdentity` 实例。"

#. type: Plain text
#: upstream/_guides/security.adoc:235
msgid "If you use `Basic` or `Form` HTTP-based authentication then you must add an `IdentityProvider` instance that can convert a username and password to a `SecurityIdentity` instance."
msgstr "如果您使用基于 `Basic` 或 `Form` HTTP的认证，那么您必须添加一个 `IdentityProvider` 实例，它可以将用户名和密码转换成 `SecurityIdentity` 实例。"

#. type: Plain text
#: upstream/_guides/security.adoc:237
msgid "For more information about `Basic` or `Form` HTTP-based authentication, see the following resources:"
msgstr "关于基于 `Basic` 或 `Form` HTTP的认证的更多信息，请参阅一下资料："

#. type: Plain text
#: upstream/_guides/security.adoc:238
msgid "xref:security-getting-started.adoc[Secure a Quarkus application with Basic authentication]"
msgstr "link:security-getting-started.html[使用Basic认保护Quarkus应用程序]"

#. type: Plain text
#: upstream/_guides/security.adoc:239
msgid "xref:security-jdbc.adoc[Using security with JDBC]"
msgstr "link:security-jdbc.html[使用JDBC security]"

#. type: Plain text
#: upstream/_guides/security.adoc:240
msgid "xref:security-ldap.adoc[Using security with an LDAP realm]"
msgstr "link:security-ldap.html[使用LDAP realm security]"

#. type: Title ==
#: upstream/_guides/security.adoc:241
#, no-wrap
msgid "Authorization"
msgstr "授权"

#. type: Plain text
#: upstream/_guides/security.adoc:245
msgid "Quarkus also supports role-based access control (RBAC).  For more information about RBAC and other authorization options in Quarkus, see xref:security-authorization.adoc[Security authorization]."
msgstr "Quarkus也支持基于角色的访问控制（RBAC）。关于RBAC和Quarkus中其他授权选项的更多信息，请参见 link:security-authorization.html[安全授权] 。"

#. type: Title ==
#: upstream/_guides/security.adoc:246
#, no-wrap
msgid "Quarkus Security customization"
msgstr "Quarkus Security 定制化"

#. type: Plain text
#: upstream/_guides/security.adoc:249
msgid "Quarkus Security is highly customizable. You can customize the following core security components of Quarkus:"
msgstr "Quarkus Security是高度可定制的。您可以定制Quarkus的以下核心安全组件："

#. type: Plain text
#: upstream/_guides/security.adoc:250
msgid "`HttpAuthenticationMechanism`"
msgstr ""

#. type: Plain text
#: upstream/_guides/security.adoc:251
msgid "`IdentityProvider`"
msgstr ""

#. type: Plain text
#: upstream/_guides/security.adoc:252
msgid "`SecurityidentityAugmentor`"
msgstr ""

#. type: Plain text
#: upstream/_guides/security.adoc:254
msgid "For more information about customizing Quarkus Security including reactive security, and how to register a security provider, see xref:security-customization.adoc[Security customization]."
msgstr "关于定制Quarkus Security包括响应式Security的更多信息，以及如何注册一个安全提供者，请参见 link:security-customization.html[安全定制] 。"

#. type: Title ==
#: upstream/_guides/security.adoc:255
#, no-wrap
msgid "Combining authentication mechanisms"
msgstr "组合认证机制"

#. type: Plain text
#: upstream/_guides/security.adoc:259
msgid "If the user credentials are provided by different sources, you can combine authentication mechanisms.  For example, you can combine built-in `Basic` and `quarkus-oidc` `Bearer` authentication mechanisms."
msgstr "如果用户证书是由不同的来源提供的，您可以使用组合认证机制。例如，您可以结合内置的 `Basic` 和 `quarkus-oidc` `Bearer` 认证机制。"

#. type: delimited block =
#: upstream/_guides/security.adoc:263
msgid "You cannot combine the `quarkus-oidc` `Bearer` and `smallrye-jwt` authentication mechanisms because both mechanisms attempt to verify the token extracted from the HTTP `Authorization Bearer` scheme."
msgstr "但结合 `quarkus-oidc` `Bearer` 和 `smallrye-jwt` 认证机制是不允许的，因为两者都试图验证从HTTP `Authorization Bearer` scheme中提取的token。"

#. type: Title ===
#: upstream/_guides/security.adoc:265
#, no-wrap
msgid "Path-specific authentication mechanisms"
msgstr "特定路径认证机制"

#. type: Plain text
#: upstream/_guides/security.adoc:268
msgid "The following configuration example demonstrates how you can enforce a single selectable authentication mechanism for a given request path:"
msgstr "以下配置示例演示了如何强制要求对一个给定的请求路径选择一个认证机制："

#. type: delimited block -
#: upstream/_guides/security.adoc:273
#, no-wrap
msgid ""
"quarkus.http.auth.permission.basic-or-bearer.paths=/service\n"
"quarkus.http.auth.permission.basic-or-bearer.policy=authenticated\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security.adoc:277
#, no-wrap
msgid ""
"quarkus.http.auth.permission.basic.paths=/basic-only\n"
"quarkus.http.auth.permission.basic.policy=authenticated\n"
"quarkus.http.auth.permission.basic.auth-mechanism=basic\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security.adoc:281
#, no-wrap
msgid ""
"quarkus.http.auth.permission.bearer.paths=/bearer-only\n"
"quarkus.http.auth.permission.bearer.policy=authenticated\n"
"quarkus.http.auth.permission.bearer.auth-mechanism=bearer\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security.adoc:284
msgid "Ensure that the value of the `auth-mechanism` property matches the authentication scheme supported by `HttpAuthenticationMechanism`, for example, `basic`, `bearer`, or `form`."
msgstr "`auth-mechanism` 属性值必须与 HttpAuthenticationMechanism 支持的认证方案相匹配，如 `basic` 或 `bearer` 或 `form` 等等。"

#. type: Title ==
#: upstream/_guides/security.adoc:285
#, no-wrap
msgid "Proactive authentication"
msgstr "主动认证"

#. type: Plain text
#: upstream/_guides/security.adoc:289
msgid "By default, Quarkus does proactive authentication, which means that all incoming requests with credentials are authenticated regardless of whether the target page requires authentication.  For more information, see xref:security-built-in-authentication.adoc#proactive-authentication[Proactive authentication]."
msgstr "默认情况下，Quarkus会进行我们所说的主动认证。这意味着所有包含证书的请求将总是被认证，而不论目标页面是否需要认证。更多信息见 link:security-built-in-authentication.html#proactive-authentication[主动认证] 。"

#. type: Title ==
#: upstream/_guides/security.adoc:290
#, no-wrap
msgid "Secure connections with SSL/TLS"
msgstr "使用SSL/TLS的安全连接"

#. type: Plain text
#: upstream/_guides/security.adoc:293
#, no-wrap
msgid " For more information about how Quarkus supports secure connections with SSL/TLS, see the xref:http-reference.adoc#ssl[HTTP reference] information.\n"
msgstr " 更多信息请参见 link:http-reference.html#adoc[HTTP reference] 指南。\n"

#. type: Title ==
#: upstream/_guides/security.adoc:294
#, no-wrap
msgid "Cross-origin resource sharing"
msgstr "Cross-Origin 资源共享"

#. type: Plain text
#: upstream/_guides/security.adoc:298
msgid "To make your Quarkus application accessible to another application running on a different domain, you need to configure cross-origin resource sharing (CORS).  For more information about the CORS filter that is provided by Quarkus, see the xref:http-reference.adoc#cors-filter[HTTP reference] information."
msgstr "如果您打算让您的Quarkus应用程序可以被运行在不同区域的另一个应用程序访问，您将需要配置CORS（Cross-Origin资源共享）。请阅读 link:http-reference.html#cors-filter[TTP reference] 以了解更多关于Quarkus所提供的CORS过滤器信息。"

#. type: Title ==
#: upstream/_guides/security.adoc:299
#, no-wrap
msgid "Cross-site Request Forgery (CSRF) prevention"
msgstr "防止跨站请求伪造"

#. type: Plain text
#: upstream/_guides/security.adoc:303
msgid "Quarkus Security provides a RESTEasy Reactive filter that can protect your applications against a https://owasp.org/www-community/attacks/csrf[Cross-Site Request Forgery] attack.  For more information, see xref:security-csrf-prevention.adoc[Cross-Site Request Forgery Prevention]."
msgstr "Quarkus Security提供的RESTEasy Reactive过滤器可以保护您的应用程序免遭 link:https://owasp.org/www-community/attacks/csrf[跨站请求伪造] 攻击。请阅读《 link:security-csrf-prevention.html[跨站请求伪造预防] 指南》以了解更多信息。"

#. type: Title ==
#: upstream/_guides/security.adoc:304
#, no-wrap
msgid "SameSite cookies"
msgstr "SameSite cookies"

#. type: Plain text
#: upstream/_guides/security.adoc:308
msgid "You can add a https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite[SameSite] cookie property to any of the cookies set by a Quarkus endpoint.  For more information, see xref:http-reference.adoc#same-site-cookie[SameSite cookies]."
msgstr "您可以在Quarkus终端设置的任何cookie中添加 link:https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite[SameSite] cookie属性的信息，请参见 link:http-reference.html#same-site-cookie[SameSite] 以了解更多信息。"

#. type: Title ==
#: upstream/_guides/security.adoc:309
#, no-wrap
msgid "Secret engines"
msgstr "秘密引擎"

#. type: Plain text
#: upstream/_guides/security.adoc:311
msgid "Secrets engines are components that store, generate, or encrypt data."
msgstr "秘密引擎是存储、生成或加密数据的组件。"

#. type: Plain text
#: upstream/_guides/security.adoc:314
msgid "Quarkus provides comprehensive HashiCorp Vault support.  For more information, see the link:{vault-guide}[Quarkus and HashiCorp Vault] documentation."
msgstr "Quarkus提供了非常全面的HashiCorp Vault支持，请参见 link:{vault-guide}[Quarkus和HashiCorp Vault] 文档以了解更多信息。"

#. type: Title ==
#: upstream/_guides/security.adoc:315
#, no-wrap
msgid "Secure serialization"
msgstr "安全序列化"

#. type: Plain text
#: upstream/_guides/security.adoc:319
msgid "If your Quarkus Security architecture includes RESTEasy Reactive and Jackson, Quarkus can limit the fields that are included in JSON serialization based on the configured security.  For more information, see xref:resteasy-reactive.adoc#secure-serialization[Writing REST services with RESTEasy Reactive]."
msgstr "如果您的Quarkus Security架构包含RESTEasy Reactive和Jackson时，Quarkus可以根据配置的安全性限制包含在JSON序列化中的字段。详情请参见 link:resteasy-reactive.html#secure-serialization[RESTEasy Reactive文档] 。"

#. type: Title ==
#: upstream/_guides/security.adoc:320
#, no-wrap
msgid "National Vulnerability Database"
msgstr "国家安全漏洞数据库"

#. type: Plain text
#: upstream/_guides/security.adoc:324
msgid "Most of the Quarkus tags are registered in the US link:https://nvd.nist.gov[National Vulnerability Database] (NVD) in Common Platform Enumeration (CPE) name format.  To view the registered Quarkus CPE names, use link:https://nvd.nist.gov/products/cpe/search/results?namingFormat=2.3&keyword=quarkus[this search query]."
msgstr "大多数Quarkus标签已经在美国 link:https://nvd.nist.gov[国家漏洞数据库] （NVD）中使用通用平台条目（Common Platform Enumeration，CPE）名称格式注册。所有注册的Quarkus CPE名称都可以通过 link:https://nvd.nist.gov/products/cpe/search/results?namingFormat=2.3&keyword=quarkus[这个搜索查询] 找到。"

#. type: Plain text
#: upstream/_guides/security.adoc:326
msgid "If the NVE database flags a CVE against a Quarkus tag, a link that provides more details about the CVE is added to the given CPE name entry."
msgstr "如果NVE数据库针对一个Quarkus tag标记了一个CVE，那么一个提供了这个CVE更多细节的链接就会被添加到给定的CPE名录下。"

#. type: Plain text
#: upstream/_guides/security.adoc:328
msgid "The NVD CPE team updates the list regularly, but if you encounter a false positive, report the details by creating an issue in the link:https://github.com/quarkusio/quarkus/issues/2611[quarkusio] repository."
msgstr "NVD CPE团队会定期更新列表，但如果您遇到一个异常，请在 link:https://github.com/quarkusio/quarkus/issues/2611[quarkusio] 仓库中创建一个issue来报告细节。"

#. type: Plain text
#: upstream/_guides/security.adoc:330
msgid "You can detect the vulnerabilities at the application build time with an NVD feed by using the Maven link:https://jeremylong.github.io/DependencyCheck/dependency-check-maven/[OWASP Dependency check plugin]."
msgstr "您可以通过使用Maven link:https://jeremylong.github.io/DependencyCheck/dependency-check-maven/[OWASP依赖性检查插件] 在应用构建时用NVD feed来检测漏洞。"

#. type: Plain text
#: upstream/_guides/security.adoc:333
msgid "To add the OWASP Dependency check plugin to your Quarkus Maven project, add the following XML configuration to the `pom.xml` file:"
msgstr "要在Quarkus Maven项目中添加OWASP依赖性检查插件，请在 `pom.xml` 文件中添加以下XML配置："

#. type: delimited block -
#: upstream/_guides/security.adoc:341
#, no-wrap
msgid ""
"<plugin>\n"
"    <groupId>org.owasp</groupId>\n"
"    <artifactId>dependency-check-maven</artifactId>\n"
"    <version>${owasp-dependency-check-plugin.version}</version>\n"
"</plugin>\n"
msgstr ""

#. type: delimited block =
#: upstream/_guides/security.adoc:346
msgid "Set the `owasp-dependency-check-plugin.version` value to `7.1.1` or later."
msgstr "其中 `owasp-dependency-check-plugin.version` 应该设置为 `7.1.1` 或更高。"

#. type: Plain text
#: upstream/_guides/security.adoc:349
msgid "Next, configure the plugin as follows:"
msgstr "您可以像这样配置该插件："

#. type: delimited block -
#: upstream/_guides/security.adoc:365
#, no-wrap
msgid ""
"<plugin>\n"
"    <groupId>org.owasp</groupId>\n"
"    <artifactId>dependency-check-maven</artifactId>\n"
"    <version>${owasp-dependency-check-plugin.version}</version>\n"
"    <configuration>\n"
"        <!-- Fail only when detecting High Vulnerability issues -->\n"
"        <failBuildOnCVSS>7</failBuildOnCVSS>\n"
"        <suppressionFiles>\n"
"            <suppressionFile>${project.basedir}/dependency-cpe-suppression.xml</suppressionFile>\n"
"        </suppressionFiles>\n"
"    </configuration>\n"
"</plugin>\n"
"---- \n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security.adoc:368
#, no-wrap
msgid ""
"To detect less severe issues, adjust the value of `failBuildOnCVSS` to suppress the false positives, as demonstrated in the following code sample:\n"
"[source,xml]\n"
msgstr ""
"您也可以通过调整 `failBuildOnCVSS` 值来减弱false positives，从而来检测相对不是很严重的问题，如以下代码所示 ： \n"
"[source,xml]\n"

#. type: Plain text
#: upstream/_guides/security.adoc:430
#, no-wrap
msgid ""
"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n"
"<suppressions xmlns=\"https://jeremylong.github.io/DependencyCheck/dependency-suppression.1.2.xsd\">\n"
"    <!--\n"
"        This is a CPE suppression file for the maven dependency check plugin.\n"
"        Each CPE that is found by error (false positive) needs to be suppressed for a specific jar using its' GAV.\n"
"        See https://jeremylong.github.io/DependencyCheck/general/suppression.html\n"
"     -->\n"
"    <suppress>\n"
"        <notes>\n"
"            <![CDATA[\n"
"                Suppress the false positive CPE for netty-tcnative-classes to netty\n"
"            ]]>\n"
"        </notes>\n"
"        <gav regex=\"true\">^io\\.netty:netty-tcnative-classes.*:.*$</gav>\n"
"        <cpe>cpe:/a:netty:netty</cpe>\n"
"    </suppress>\n"
"    <suppress>\n"
"        <notes>\n"
"            <![CDATA[\n"
"                Suppress the false positive CPE for Quarkus Mutiny to mutiny:mutiny\n"
"            ]]>\n"
"        </notes>\n"
"        <gav regex=\"true\">^io\\.quarkus:quarkus-mutiny.*:.*$</gav>\n"
"        <cpe>cpe:/a:mutiny:mutiny</cpe>\n"
"    </suppress>\n"
"    <suppress>\n"
"        <notes>\n"
"            <![CDATA[\n"
"                Suppress the false positive CPE for Smallrye Mutiny to mutiny:mutiny\n"
"            ]]>\n"
"        </notes>\n"
"        <gav regex=\"true\">^io\\.smallrye.reactive:mutiny.*:.*$</gav>\n"
"        <cpe>cpe:/a:mutiny:mutiny</cpe>\n"
"    </suppress>\n"
"    <suppress>\n"
"        <notes>\n"
"            <![CDATA[\n"
"                Suppress the false positive CPE for Smallrye Mutiny to mutiny:mutiny\n"
"            ]]>\n"
"        </notes>\n"
"        <gav regex=\"true\">^io\\.smallrye.reactive:smallrye-mutiny.*:.*$</gav>\n"
"        <cpe>cpe:/a:mutiny:mutiny</cpe>\n"
"    </suppress>\n"
"    <suppress>\n"
"        <notes>\n"
"            <![CDATA[\n"
"                Suppress the false positive CPE for Smallrye Mutiny to mutiny:mutiny\n"
"            ]]>\n"
"        </notes>\n"
"        <gav regex=\"true\">^io\\.smallrye.reactive:vertx-mutiny.*:.*$</gav>\n"
"        <cpe>cpe:/a:mutiny:mutiny</cpe>\n"
"    </suppress>\n"
"    <suppress>\n"
"        <notes>\n"
"            <![CDATA[\n"
"                Suppress the false positive CPE for graal-sdk to GraalVM (the JVM distribution)\n"
"            ]]>\n"
"        </notes>\n"
"        <gav regex=\"true\">^org\\.graalvm\\.sdk:g like this\n"
"    </suppress>\n"
"</suppressions>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security.adoc:434
#, no-wrap
msgid ""
"Ensure that you review and update the suppression list regularly to ensure that the results are up to date.\n"
"You can optionally apply a time limit to individual suppressions by adding an expiry attribute, as outlined in the following example: \n"
msgstr ""
"确保您会检查和更新这个suppression列表以保证结果是及时更新的。\n"
"您可以选择通过添加过期属性来对单个的suppression项目应用一个时间限制，如下面所示：\n"

#. type: delimited block -
#: upstream/_guides/security.adoc:437
#, no-wrap
msgid ""
"`<suppress until=\"2022-01-01Z\">...</suppress>`\n"
"You can adjust the expiry date if you need to.\n"
msgstr ""
"`<suppress until=\"2022-01-01Z\">...</suppress>`\n"
"如果需要您可以调整过期时间。\n"

#. type: Title ==
#: upstream/_guides/security.adoc:438
#, no-wrap
msgid "Quarkus Security testing"
msgstr "Quarkus Security 测试"

#. type: delimited block -
#: upstream/_guides/security.adoc:441
msgid "When testing Quarkus security, ensure that your `IdentityProvider` is already set with usernames, passwords, and roles in `application.properties`.  For more information about testing Quarkus Security, see xref:security-testing.adoc#configuring-user-information[Configuring user information]."
msgstr "当测试Quarkus Security的时候，请确保您已经在 `application.properties` 设置了 `IdentityProvider` 以及对应的用户名、密码以及角色。请参见 link:security-testing.html#configuring-user-information[设置用户信息] 以了解更多关于测试Quarkus Security的信息。"

#, fuzzy
#~ msgid "This document provides a brief overview of Quarkus Security and links to the individual guides."
#~ msgstr "这份文件提供了Quarkus Security的简要概述，并提供了各个指南的链接。"

#~ msgid "Getting Started"
#~ msgstr "入门指南"

#, fuzzy
#~ msgid "Please see the xref:security-getting-started.adoc[Getting Started With Security] guide for a quick walkthrough through Quarkus Security where you can learn how to use xref:security-basic-auth-concept.adoc[Basic HTTP Authentication] mechanism and `JPA Identity Provider` to create `SecurityIdentity` and authorize a secure access to the endpoint with `Role Based Access Control`."
#~ msgstr "请参阅 link:security-getting-started.html[安全入门] 指南，快速了解Quarkus安全，您可以了解如何使用 link:security-built-in-authentication.html#basic-auth[基本HTTP认证] 机制和 `JPA Identity Provider` ，创建 `SecurityIdentity` ，并通过 `Role Based Access Control` ，授权安全访问端点。"

#, fuzzy
#~ msgid "Architecture"
#~ msgstr "建筑学"

#, fuzzy
#~ msgid "For example, the credentials may be coming with the HTTP `Authorization` header, client HTTPS certificates or cookies."
#~ msgstr "例如，凭证可能来自于HTTP `Authorization` 头、客户端HTTPS证书或cookies。"

#, fuzzy
#~ msgid "Quarkus supports several sources to load authentication information from."
#~ msgstr "Quarkus支持从几个来源加载认证信息。"

#, fuzzy
#~ msgid "Please see xref:security-webauthn.adoc[our dedicated WebAuthn documentation] for more information."
#~ msgstr "请参阅 link:security-webauthn.html[我们专门的WebAuthn文档] 以了解更多信息。"

#, fuzzy
#~ msgid "Please see xref:security-built-in-authentication.adoc#mutual-tls[Mutual TLS Authentication] for more information."
#~ msgstr "更多信息请参见 link:security-built-in-authentication.html#mutual-tls[相互TLS认证] 。"

#, fuzzy
#~ msgid "The Quarkus `quarkus-oidc` extension provides a reactive, interoperable, multitenant-enabled OIDC adapter that supports Bearer Token and Authorization Code Flow authentication mechanisms."
#~ msgstr " `quarkus-oidc` 扩展提供了一个反应式的、可互操作的、支持多租户的OpenID Connect适配器，支持 和 认证机制。 `Bearer Token` `Authorization Code Flow` "

#, fuzzy
#~ msgid "For information about the Bearer Token authentication mechanism, see xref:security-openid-connect.adoc[Using OpenID Connect to Protect Service Applications]."
#~ msgstr "关于承载token认证机制的信息，请参见 link:security-openid-connect.html[使用OpenID Connect保护服务应用程序] 。"

#, fuzzy
#~ msgid "For information about the Authorization Code Flow authentication mechanism, see xref:security-openid-connect-web-authentication.adoc[Using OpenID Connect to Protect Web Application]."
#~ msgstr "关于授权码流认证机制的信息，请参见 link:security-openid-connect-web-authentication.html[使用OpenID Connect保护Web应用程序] 。"

#, fuzzy
#~ msgid "For information about multiple tenants that can support Bearer Token or Authorization Code Flow mechanisms, see xref:security-openid-connect-multitenancy.adoc[Using OpenID Connect Multi-Tenancy]."
#~ msgstr "关于可以支持承载token或授权码流机制的多个租户的信息，请参见 link:security-openid-connect-multitenancy.html[使用OpenID Connect多租户] 。"

#, fuzzy
#~ msgid "For information about using Keycloak to Centralize Authorization, see the xref:security-keycloak-authorization.adoc[Using Keycloak to Centralize Authorization] guide."
#~ msgstr "如果您使用Keycloak和Bearertoken，那么也请看 link:security-keycloak-authorization.html[使用Keycloak来集中授权] 指南。"

#, fuzzy
#~ msgid "For information about configuring Keycloak programmatically, see the xref:security-keycloak-admin-client.adoc[Keycloak Admin Client] guide."
#~ msgstr "有关以编程方式配置Keycloak的信息，请参阅 link:security-keycloak-admin-client.html[Keycloak Admin Client] 指南。"

#, fuzzy
#~ msgid "SmallRye JWT"
#~ msgstr "小黑麦JWT"

#, fuzzy
#~ msgid "It provides an alternative to `quarkus-oidc` Bearer Token Authentication Mechanism. It can currently verify only `JWT` tokens using the PEM keys or refreshable `JWK` key set."
#~ msgstr "它提供了一个替代 `quarkus-oidc` Bearer Token认证机制的方法。它目前只能验证使用PEM密钥或可刷新的 `JWK` 密钥集的 `JWT` token。"

#, fuzzy
#~ msgid "Additionally, it provides `JWT Generation API` for creating `signed`, `inner-signed` and/or `encrypted` `JWT` tokens with ease."
#~ msgstr "此外，它还提供了 `JWT Generation API` ，以便轻松创建 `signed` 、 `inner-signed` 和/或 `encrypted` `JWT` 代币。"

#, fuzzy
#~ msgid "OAuth2"
#~ msgstr "OAuth2"

#, fuzzy
#~ msgid "See the xref:security-oauth2.adoc[Using OAuth2] guide for more information."
#~ msgstr "更多信息请参见 link:security-oauth2.html[使用OAuth2] 指南。"

#, fuzzy
#~ msgid "`quarkus-smallrye-jwt` does not support the remote introspection of the opaque tokens or even JWT tokens - it always relies on the locally available keys - possibly fetched from the OpenID Connect provider. So if you need to introspect the JWT tokens remotely then both `quarkus-oidc` and `quarkus-elytron-security-oauth2` will work. Both extensions also support the verification of the opaque/binary tokens by using the remote introspection."
#~ msgstr " `quarkus-smallrye-jwt` 不支持对不透明token甚至JWTtoken进行远程自查--它总是依赖于本地可用的密钥--可能是从OpenID Connect提供商那里获取的。因此，如果您需要远程自查JWTtoken，那么 和 都可以工作。这两个扩展还支持通过远程自省验证不透明/二进制token。 `quarkus-oidc` `quarkus-elytron-security-oauth2` "

#, fuzzy
#~ msgid "Below is a summary of the options."
#~ msgstr "以下是选项的摘要。"

#, fuzzy
#~ msgid "xref:security-getting-started.adoc[JPA IdentityProvider]"
#~ msgstr "link:security-getting-started.html[JPA IdentityProvider]"

#, fuzzy
#~ msgid "For a a Basic Authentication configuration walk-through using JPA, see:"
#~ msgstr "关于使用JPA的基本认证配置指南，请参见。"

#, fuzzy
#~ msgid "For testing, use the xref:security-testing.adoc#configuring-user-information[User Properties IdentityProvider] section with the `IdentityProvider` with already set usernames, passwords, and roles in `application.properties`."
#~ msgstr " `application.properties` 为了测试，使用 link:security-testing.html#configuring-user-information[用户属性IdentityProvider] 部分，在 `IdentityProvider` ，其中已经设置了用户名、密码和角色。"

#, fuzzy
#~ msgid "See xref:security-built-in-authentication.adoc#proactive-authentication[Proactive Authentication] for more information."
#~ msgstr "更多信息见 link:security-built-in-authentication.html#proactive-authentication[主动认证] 。"

#, fuzzy
#~ msgid "See xref:security-authorization.adoc[Security Authorization] for more information about Role Based Access Control and other authorization options."
#~ msgstr "关于基于角色的访问控制和其他授权选项的更多信息，请参阅 link:security-authorization.html[安全授权] 。"

#, fuzzy
#~ msgid "Customization and other useful tips"
#~ msgstr "定制和其他有用的提示"

#, fuzzy
#~ msgid "Quarkus Security is highly customizable. One can register custom ``HttpAuthenticationMechanism``s, ``IdentityProvider``s and ``SecurityidentityAugmentor``s."
#~ msgstr "Quarkus Security是高度可定制的。人们可以注册自定义的 `HttpAuthenticationMechanism` 、 `IdentityProvider` 、 `SecurityidentityAugmentor` 。"

#, fuzzy
#~ msgid "See xref:security-customization.adoc[Security Customization] for more information about customizing Quarkus Security and other useful tips about the reactive security, registering the security providers, etc."
#~ msgstr "请参阅 link:security-customization.html[安全定制] ，了解更多关于定制Quarkus安全的信息以及其他关于反应式安全、注册安全提供者等的有用提示。"

#, fuzzy
#~ msgid "See the xref:http-reference.adoc#ssl[Supporting secure connections with SSL] guide for more information."
#~ msgstr "更多信息请参见 link:http-reference.html#adoc[支持SSL的安全连接] 指南。"

#, fuzzy
#~ msgid "Testing"
#~ msgstr "测试"

#, fuzzy
#~ msgid "See xref:security-testing.adoc[Security Testing] for more information about testing Quarkus Security."
#~ msgstr "参见 link:security-testing.html[安全测试] ，了解更多关于测试Quarkus安全的信息。"

#, fuzzy
#~ msgid "Vault"
#~ msgstr "穹顶"

#, fuzzy
#~ msgid "We will be asking the NVD CPE team to update the list as well as link Quarkus CPE name entries with the related CVEs on a regular basis.  If you work with the link:https://jeremylong.github.io/DependencyCheck/dependency-check-maven/[OWASP Dependency Check Plugin] which is using NVD feeds to detect the vulnerabilities at the application build time and see a false positive reported then please re-open link:https://github.com/quarkusio/quarkus/issues/2611[this issue] and provide the details."
#~ msgstr "我们将要求NVD CPE团队定期更新列表，并将Quarkus CPE名称条目与相关的CVEs联系起来。如果您使用 link:https://jeremylong.github.io/DependencyCheck/dependency-check-maven/[OWASP依赖性检查插件] ，该插件在应用程序构建时使用NVD feeds来检测漏洞，并看到一个假阳性报告，那么请重新打开 link:https://github.com/quarkusio/quarkus/issues/2611[这个问题] 并提供细节。"

#, fuzzy
#~ msgid "You can add `OWASP Dependency Check Plugin` to your project's `pom.xml` like this:"
#~ msgstr "您可以像这样把 `OWASP Dependency Check Plugin` 添加到您项目的 `pom.xml` 。"

#, fuzzy
#~ msgid "See xref:security-openid-connect-multitenancy.adoc[Using OpenID Connect Multi-Tenancy] for more information about multiple tenants which can support `Bearer` or `Authorization Code Flow` authentication mechanism and configured statically or dynamically."
#~ msgstr "请参阅 link:security-openid-connect-multitenancy.html[使用OpenID Connect多] 租户，了解更多关于多租户的信息，这些租户可以支持 `Bearer` 或 `Authorization Code Flow` 认证机制，并以静态或动态方式配置。"

#, fuzzy
#~ msgid "If you need to configure Keycloak programmatically then consider using https://www.keycloak.org/docs/latest/server_development/#admin-rest-api[Keycloak Admin REST API] with the help of the `quarkus-keycloak-admin-client` or `quarkus-keycloak-admin-client-reactive` (if the application uses `quarkus-rest-client-reactive`) extension."
#~ msgstr "如果您需要以编程方式配置Keycloak，那么考虑在 `quarkus-keycloak-admin-client` 或 `quarkus-keycloak-admin-client-reactive` （如果应用程序使用 `quarkus-rest-client-reactive` ）扩展的帮助下使用 link:https://www.keycloak.org/docs/latest/server_development/#admin-rest-api[Keycloak Admin REST API] 。"

#, fuzzy
#~ msgid "LDAP"
#~ msgstr "LDAP"

#, fuzzy
#~ msgid "Please see the xref:security-ldap.adoc[Authenticate with LDAP] guide for more information about LDAP authentication mechanism."
#~ msgstr "关于LDAP认证机制的更多信息，请参见《 link:security-ldap.html[使用LDAP] 进行认证》指南。"

#, fuzzy
#~ msgid "See xref:security-jpa.adoc[JPA IdentityProvider] and xref:security-jdbc.adoc[JDBC IdentityProvider] for more information.  You can also use xref:security-testing.adoc#configuring-user-information[User Properties IdentityProvider] for testing."
#~ msgstr "更多信息请参见 link:security-jpa.html[JPA IdentityProvider] 和 link:security-jdbc.html[JDBC IdentityProvider] 。您也可以使用 link:security-testing.html#configuring-user-information[User Properties IdentityProvider] 进行测试。"
