# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:52+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/security.adoc:6
#, fuzzy, no-wrap
msgid "Security Architecture and Guides"
msgstr "安全架构和指南"

#. type: Plain text
#: upstream/_guides/security.adoc:11
#, fuzzy
msgid "Quarkus Security provides the architecture, multiple authentication and authorization mechanisms, and other tools for the developers to build a production-quality security for their Quarkus applications."
msgstr "Quarkus Security提供了架构、多种认证和授权机制以及其他工具，使开发者能够为他们的Quarkus应用程序建立一个生产质量的安全性。"

#. type: Plain text
#: upstream/_guides/security.adoc:13
#, fuzzy
msgid "This document provides a brief overview of Quarkus Security and links to the individual guides."
msgstr "这份文件提供了Quarkus Security的简要概述，并提供了各个指南的链接。"

#. type: Title ==
#: upstream/_guides/security.adoc:14
#, fuzzy, no-wrap
msgid "Architecture"
msgstr "建筑学"

#. type: Plain text
#: upstream/_guides/security.adoc:17
#, fuzzy
msgid "`HttpAuthenticationMechanism` is the main entry into Quarkus HTTP Security."
msgstr " `HttpAuthenticationMechanism` 是Quarkus HTTP安全的主要条目。"

#. type: Plain text
#: upstream/_guides/security.adoc:20
#, fuzzy
msgid "Quarkus Security Manager uses `HttpAuthenticationMechanism` to extract the authentication credentials from the HTTP request and delegates to `IdentityProvider` to complete the conversion of these credentials to `SecurityIdentity`."
msgstr "Quarkus安全管理器使用 `HttpAuthenticationMechanism` ，从HTTP请求中提取认证凭证，并委托给 `IdentityProvider` ，完成这些凭证到 `SecurityIdentity` 的转换。"

#. type: Plain text
#: upstream/_guides/security.adoc:22
#, fuzzy
msgid "For example, the credentials may be coming with the HTTP `Authorization` header, client HTTPS certificates or cookies."
msgstr "例如，凭证可能来自于HTTP `Authorization` 头、客户端HTTPS证书或cookies。"

#. type: Plain text
#: upstream/_guides/security.adoc:24
#, fuzzy
msgid "`IdentityProvider` verifies the authentication credentials and maps them to `SecurityIdentity` which contains the username, roles, the original authentication credentials, and other attributes."
msgstr " `IdentityProvider` 验证认证凭证并将其映射到 ，其中包含用户名、角色、原始认证凭证和其他属性。 `SecurityIdentity` "

#. type: Plain text
#: upstream/_guides/security.adoc:26
#, fuzzy
msgid "For every authenticated resource, you can inject a `SecurityIdentity` instance to get the authenticated identity information."
msgstr "对于每个认证的资源，你可以注入一个 `SecurityIdentity` 实例来获得认证的身份信息。"

#. type: Plain text
#: upstream/_guides/security.adoc:29
#, fuzzy
msgid "In some other contexts you may have other parallel representations of the same information (or parts of it) such as `SecurityContext` for JAX-RS or `JsonWebToken` for JWT."
msgstr "在其他一些情况下，你可能有相同信息（或部分信息）的其他并行表示，如JAX-RS的 `SecurityContext` ，或JWT的 `JsonWebToken` 。"

#. type: Title ==
#: upstream/_guides/security.adoc:30
#, fuzzy, no-wrap
msgid "Authentication mechanisms"
msgstr "认证机制"

#. type: Plain text
#: upstream/_guides/security.adoc:33
#, fuzzy
msgid "Quarkus supports several sources to load authentication information from."
msgstr "Quarkus支持从几个来源加载认证信息。"

#. type: Title ===
#: upstream/_guides/security.adoc:34
#, fuzzy, no-wrap
msgid "Basic and Form Authentication Mechanisms"
msgstr "基本认证和形式认证机制"

#. type: Plain text
#: upstream/_guides/security.adoc:38
#, fuzzy
msgid "Basic and Form HTTP-based authentication mechanisms are the core authentication mechanisms supported in Quarkus.  Please see xref:security-built-in-authentication.adoc#basic-auth[Basic HTTP Authentication] and xref:security-built-in-authentication.adoc#form-auth[Form HTTP Authentication] for more information."
msgstr "基于HTTP的基本认证和表单认证机制是Quarkus支持的核心认证机制。请参阅 link:security-built-in-authentication.html#basic-auth[Basic HTTP认证] 和 link:security-built-in-authentication.html#form-auth[Form HTTP认证以] 了解更多信息。"

#. type: Title ===
#: upstream/_guides/security.adoc:39
#, fuzzy, no-wrap
msgid "WebAuthn Authentication Mechanism"
msgstr "WebAuthn认证机制"

#. type: Plain text
#: upstream/_guides/security.adoc:44
#, fuzzy
msgid "https://webauthn.guide/[WebAuthn] is an authentication mechanism designed to replace passwords. In short, every time you write a service for registering new users, or logging them in, instead of asking for a password, you use WebAuthn, which will replace the password."
msgstr "link:https://webauthn.guide/[WebAuthn] 是一种旨在取代密码的认证机制。简而言之，每当你写一个注册新用户的服务，或登录他们的时候，你就会使用WebAuthn，而不是要求密码，这将取代密码。"

#. type: Plain text
#: upstream/_guides/security.adoc:46
#, fuzzy
msgid "Please see xref:security-webauthn.adoc[our dedicated WebAuthn documentation] for more information."
msgstr "请参阅 link:security-webauthn.html[我们专门的WebAuthn文档] 以了解更多信息。"

#. type: Title ===
#: upstream/_guides/security.adoc:47
#, fuzzy, no-wrap
msgid "Mutual TLS Authentication"
msgstr "相互TLS认证"

#. type: Plain text
#: upstream/_guides/security.adoc:50
#, fuzzy
msgid "Quarkus provides Mutual TLS authentication so that you can authenticate users based on their X.509 certificates."
msgstr "Quarkus提供了相互TLS认证，这样你就可以根据用户的X.509证书进行认证。"

#. type: Plain text
#: upstream/_guides/security.adoc:52
#, fuzzy
msgid "Please see xref:security-built-in-authentication.adoc#mutual-tls[Mutual TLS Authentication] for more information."
msgstr "更多信息请参见 link:security-built-in-authentication.html#mutual-tls[相互TLS认证] 。"

#. type: Title ===
#: upstream/_guides/security.adoc:53
#, fuzzy, no-wrap
msgid "OpenID Connect"
msgstr "OpenID连接"

#. type: Plain text
#: upstream/_guides/security.adoc:56
#, fuzzy
msgid "`quarkus-oidc` extension provides a reactive, interoperable, multi-tenant enabled OpenID Connect adapter which supports `Bearer Token` and `Authorization Code Flow` authentication mechanisms."
msgstr " `quarkus-oidc` 扩展提供了一个反应式的、可互操作的、支持多租户的OpenID Connect适配器，支持 和 认证机制。 `Bearer Token` `Authorization Code Flow` "

#. type: Plain text
#: upstream/_guides/security.adoc:59
#, fuzzy
msgid "`Bearer Token` mechanism extracts the token from HTTP `Authorization` header.  `Authorization Code Flow` mechanism uses OpenID Connect Authorization Code flow. It redirects the user to IDP to authenticate and completes the authentication process after the user has been redirected back to Quarkus by exchanging the provided code grant for ID, access and refresh tokens."
msgstr " `Bearer Token` `Authorization Code Flow` 机制从HTTP header中提取令牌。 机制使用OpenID Connect授权代码流。它将用户重定向到IDP进行认证，并在用户被重定向回Quarkus后，通过将提供的代码授权与ID、访问和刷新令牌进行交换来完成认证过程。 `Authorization` "

#. type: Plain text
#: upstream/_guides/security.adoc:61
#, fuzzy
msgid "ID and access `JWT` tokens are verified with the refreshable `JWK` key set but both JWT and opaque (binary) tokens can be introspected remotely."
msgstr "ID和访问 `JWT` 令牌是用可刷新的 `JWK` 密钥集验证的，但JWT和不透明（二进制）令牌都可以被远程反省。"

#. type: Plain text
#: upstream/_guides/security.adoc:63
#, fuzzy
msgid "See the xref:security-openid-connect.adoc[Using OpenID Connect to Protect Service Applications] guide for more information about `Bearer Token` authentication mechanism."
msgstr "关于 `Bearer Token` 认证机制的更多信息，请参见《 link:security-openid-connect.html[使用OpenID Connect保护服务应用程序] 》指南。"

#. type: Plain text
#: upstream/_guides/security.adoc:65
#, fuzzy
msgid "See the xref:security-openid-connect-web-authentication.adoc[Using OpenID Connect to Protect Web Application] guide for more information about `Authorization Code Flow` authentication mechanism."
msgstr "关于 `Authorization Code Flow` 认证机制的更多信息，请参见《 link:security-openid-connect-web-authentication.html[使用OpenID连接保护网络应用] 》指南。"

#. type: delimited block =
#: upstream/_guides/security.adoc:69
#, fuzzy
msgid "Both `quarkus-oidc` `Bearer` and `Authorization Code Flow` Authentication mechanisms use <<smallrye-jwt, SmallRye JWT>> to represent JWT tokens as Microprofile JWT `org.eclipse.microprofile.jwt.JsonWebToken`."
msgstr " `quarkus-oidc` `Bearer` 和 `Authorization Code Flow` 认证机制都使用 link:#smallrye-jwt[SmallRye JWT] 来表示JWT令牌为Microprofile JWT `org.eclipse.microprofile.jwt.JsonWebToken` 。"

#. type: Plain text
#: upstream/_guides/security.adoc:72
#, fuzzy
msgid "See xref:security-openid-connect-multitenancy.adoc[Using OpenID Connect Multi-Tenancy] for more information about multiple tenants which can support `Bearer` or `Authorization Code Flow` authentication mechanism and configured statically or dynamically."
msgstr "请参阅 link:security-openid-connect-multitenancy.html[使用OpenID Connect多] 租户，了解更多关于多租户的信息，这些租户可以支持 `Bearer` 或 `Authorization Code Flow` 认证机制，并以静态或动态方式配置。"

#. type: delimited block =
#: upstream/_guides/security.adoc:77
#, fuzzy
msgid "If you would like to have Quarkus OIDC extension enabled at runtime then set `quarkus.oidc.tenant-enabled=false` at build time and re-enable it at runtime using a system property.  See also xref:security-openid-connect-multitenancy.adoc#disable-tenant[Disabling Tenant Configurations] for more information about managing the individual tenant configurations in the multi-tenant OIDC deployments."
msgstr "如果你想在运行时启用Quarkus OIDC扩展，那么在构建时设置 `quarkus.oidc.tenant-enabled=false` ，并在运行时使用系统属性重新启用它。更多关于管理多租户OIDC部署中各个租户配置的信息，请参见 link:security-openid-connect-multitenancy.html#disable-tenant[禁用租户] 配置。"

#. type: Plain text
#: upstream/_guides/security.adoc:80
#, fuzzy
msgid "If you use Keycloak and Bearer tokens then also see the xref:security-keycloak-authorization.adoc[Using Keycloak to Centralize Authorization] guide."
msgstr "如果你使用Keycloak和Bearer令牌，那么也请看 link:security-keycloak-authorization.html[使用Keycloak来集中授权] 指南。"

#. type: delimited block =
#: upstream/_guides/security.adoc:84
#, fuzzy
msgid "If you need to configure Keycloak programmatically then consider using https://www.keycloak.org/docs/latest/server_development/#admin-rest-api[Keycloak Admin REST API] with the help of the `quarkus-keycloak-admin-client` or `quarkus-keycloak-admin-client-reactive` (if the application uses `quarkus-rest-client-reactive`) extension."
msgstr "如果你需要以编程方式配置Keycloak，那么考虑在 `quarkus-keycloak-admin-client` 或 `quarkus-keycloak-admin-client-reactive` （如果应用程序使用 `quarkus-rest-client-reactive` ）扩展的帮助下使用 link:https://www.keycloak.org/docs/latest/server_development/#admin-rest-api[Keycloak Admin REST API] 。"

#. type: Title ===
#: upstream/_guides/security.adoc:86
#, fuzzy, no-wrap
msgid "OpenID Connect Client and Filters"
msgstr "OpenID连接客户端和过滤器"

#. type: Plain text
#: upstream/_guides/security.adoc:89
#, fuzzy
msgid "`quarkus-oidc-client` extension provides `OidcClient` for acquiring and refreshing access tokens from OpenID Connect and OAuth2 providers which support `client-credentials`, `password` and `refresh_token` token grants."
msgstr " `quarkus-oidc-client` 扩展提供 ，用于从支持 、 、 的OpenID Connect和OAuth2提供商那里获取和刷新访问令牌。 `OidcClient` `client-credentials` `password` `refresh_token` "

#. type: Plain text
#: upstream/_guides/security.adoc:91
#, fuzzy
msgid "`quarkus-oidc-client-filter` extension depends on the `quarkus-oidc-client` extension and provides JAX-RS `OidcClientRequestFilter` which sets the access token acquired by `OidcClient` as an HTTP `Authorization` header's `Bearer` scheme value. This filter can be registered with MP RestClient implementations injected into the current Quarkus endpoint but it is not related to the authentication requirements of this service endpoint. For example, it can be a public endpoint or it can be protected with MTLS - the important point is that this Quarkus endpoint does not have to be protected itself with the Quarkus OpenID Connect adapter."
msgstr " `quarkus-oidc-client-filter` 扩展依赖于 扩展，并提供 JAX-RS ，它将由 获得的访问令牌设置为 HTTP 头的 方案值。这个过滤器可以与注入当前 Quarkus 端点的 MP RestClient 实现注册，但它与这个服务端点的认证要求无关。例如，它可以是一个公共端点，也可以用MTLS保护--重要的一点是，这个Quarkus端点本身不需要用Quarkus OpenID Connect适配器来保护。 `quarkus-oidc-client` `OidcClientRequestFilter` `OidcClient` `Authorization` `Bearer` "

#. type: Plain text
#: upstream/_guides/security.adoc:93
#, fuzzy
msgid "`quarkus-oidc-token-propagation` extension depends on the `quarkus-oidc` extension and provides JAX-RS `TokenCredentialRequestFilter` which sets the OpenID Connect Bearer or Authorization Code Flow access token as an HTTP `Authorization` header's `Bearer` scheme value. This filter can be registered with MP RestClient implementations injected into the current Quarkus endpoint and the Quarkus endpoint must be protected itself with the Quarkus OpenID Connect adapter. This filter can be used to propagate the access token to the downstream services."
msgstr " `quarkus-oidc-token-propagation` 扩展依赖于 扩展，并提供 JAX-RS ，它将 OpenID Connect Bearer 或 Authorization Code Flow 访问令牌设置为 HTTP 标头的 方案值。这个过滤器可以用MP RestClient实现注册，注入到当前的Quarkus端点中，而Quarkus端点本身必须用Quarkus OpenID Connect适配器来保护。这个过滤器可以用来将访问令牌传播到下游服务中。 `quarkus-oidc` `TokenCredentialRequestFilter` `Authorization` `Bearer` "

#. type: Plain text
#: upstream/_guides/security.adoc:95
#, fuzzy
msgid "See the xref:security-openid-connect-client.adoc[Using OpenID Connect and OAuth2 Client] guide for more information."
msgstr "更多信息请参见《 link:security-openid-connect-client.html[使用OpenID连接和OAuth2客户端] 》指南。"

#. type: Title ===
#: upstream/_guides/security.adoc:97
#, fuzzy, no-wrap
msgid "SmallRye JWT"
msgstr "小黑麦JWT"

#. type: Plain text
#: upstream/_guides/security.adoc:100
#, fuzzy
msgid "`quarkus-smallrye-jwt` provides Microprofile JWT 1.1.1 implementation and many more options to verify signed and encrypted `JWT` tokens and represent them as `org.eclipse.microprofile.jwt.JsonWebToken`."
msgstr " `quarkus-smallrye-jwt` 提供Microprofile JWT 1.1.1的实现和更多的选项来验证签名和加密的 tokens，并将其表示为 。 `JWT` `org.eclipse.microprofile.jwt.JsonWebToken` "

#. type: Plain text
#: upstream/_guides/security.adoc:102
#, fuzzy
msgid "It provides an alternative to `quarkus-oidc` Bearer Token Authentication Mechanism. It can currently verify only `JWT` tokens using the PEM keys or refreshable `JWK` key set."
msgstr "它提供了一个替代 `quarkus-oidc` Bearer Token认证机制的方法。它目前只能验证使用PEM密钥或可刷新的 `JWK` 密钥集的 `JWT` 令牌。"

#. type: Plain text
#: upstream/_guides/security.adoc:104
#, fuzzy
msgid "Additionally it provides `JWT Generation API` for creating `signed`, `inner-signed` and/or `encrypted` `JWT` tokens with ease."
msgstr "此外，它还提供了 `JWT Generation API` ，以便轻松创建 `signed` 、 `inner-signed` 和/或 `encrypted` `JWT` 代币。"

#. type: Plain text
#: upstream/_guides/security.adoc:106
#, fuzzy
msgid "See the xref:security-jwt.adoc[Using SmallRye JWT] guide for more information."
msgstr "更多信息请参见《 link:security-jwt.html[使用SmallRye JWT] 》指南。"

#. type: Title ===
#: upstream/_guides/security.adoc:107
#, fuzzy, no-wrap
msgid "OAuth2"
msgstr "OAuth2"

#. type: Plain text
#: upstream/_guides/security.adoc:110
#, fuzzy
msgid "`quarkus-elytron-security-oauth2` provides an alternative to `quarkus-oidc` Bearer Token Authentication Mechanism. It is based on `Elytron` and is primarily meant for introspecting the opaque tokens remotely."
msgstr " `quarkus-elytron-security-oauth2` 提供了一个替代 Bearer Token认证机制的方法。它是基于 ，主要是为了远程反省不透明的令牌。 `quarkus-oidc` `Elytron` "

#. type: Plain text
#: upstream/_guides/security.adoc:112
#, fuzzy
msgid "See the xref:security-oauth2.adoc[Using OAuth2] guide for more information."
msgstr "更多信息请参见 link:security-oauth2.html[使用OAuth2] 指南。"

#. type: Title ===
#: upstream/_guides/security.adoc:114
#, fuzzy, no-wrap
msgid "Choosing between OpenID Connect, SmallRye JWT and OAuth2 extensions"
msgstr "在OpenID Connect、SmallRye JWT和OAuth2扩展之间做出选择"

#. type: Plain text
#: upstream/_guides/security.adoc:117
#, fuzzy
msgid "`quarkus-oidc` extension requires an OpenID Connect provider such as Keycloak which can be used to verify the Bearer tokens or authenticate the end users with the Authorization Code flow. In both cases `quarkus-oidc` requires a connection to this OpenID Connect provider."
msgstr " `quarkus-oidc` 扩展需要一个OpenID连接提供者，如Keycloak，它可以用来验证承载器令牌或用授权码流验证最终用户。在这两种情况下， ，需要连接到这个OpenID连接提供者。 `quarkus-oidc` "

#. type: Plain text
#: upstream/_guides/security.adoc:119
#, fuzzy
msgid "`quarkus-oidc` is the only option when the user authentication via Authorization Code flow or supporting multiple tenants is required. It can also request a UserInfo using both Authorization Code Flow and Bearer access tokens."
msgstr " `quarkus-oidc` 是需要通过授权码流进行用户认证或支持多个租户时的唯一选择。它也可以同时使用授权码流和承载器访问令牌来请求UserInfo。"

#. type: Plain text
#: upstream/_guides/security.adoc:121
#, fuzzy
msgid "When the Bearer tokens have to be verified then `quarkus-oidc`, `quarkus-smallrye-jwt` and `quarkus-elytron-security-oauth2` can be used."
msgstr "当需要验证承载令牌时，可以使用 `quarkus-oidc` , `quarkus-smallrye-jwt` 和 `quarkus-elytron-security-oauth2` 。"

#. type: Plain text
#: upstream/_guides/security.adoc:123
#, fuzzy
msgid "If you have Bearer tokens in a JWT format then all these 3 extensions can be used. Both `quarkus-oidc` and `quarkus-smallrye-jwt` support refreshing the JsonWebKey (JWK) set when the OpenID Connect provider rotates the keys, therefore `quarkus-oidc` or `quarkus-smallrye-jwt` should be used for verifying JWT tokens if the remote token introspection has to be avoided or not supported by the providers."
msgstr "如果你有JWT格式的承载令牌，那么这三个扩展都可以使用。 `quarkus-oidc` 和 `quarkus-smallrye-jwt` 都支持在OpenID Connect提供者旋转密钥时刷新JsonWebKey（JWK）集，因此，如果必须避免远程令牌自省或提供者不支持，则应使用 `quarkus-oidc` 或 `quarkus-smallrye-jwt` 来验证JWT令牌。"

#. type: Plain text
#: upstream/_guides/security.adoc:125
#, fuzzy
msgid "`quarkus-smallrye-jwt` does not support the remote introspection of the opaque tokens or even JWT tokens - it always relies on the locally available keys - possibly fetched from the OpenID Connect provider. So if you need to introspect the JWT tokens remotely then both `quarkus-oidc` and `quarkus-elytron-security-oauth2` will work. Both extensions also support the verification of the opaque/binary tokens via the remote introspection."
msgstr " `quarkus-smallrye-jwt` 不支持对不透明令牌甚至JWT令牌进行远程反省--它总是依赖于本地可用的密钥--可能是从OpenID Connect提供商那里获取的。因此，如果你需要远程反省JWT令牌，那么 和 都可以工作。这两个扩展还支持通过远程自省验证不透明/二进制令牌。 `quarkus-oidc` `quarkus-elytron-security-oauth2` "

#. type: Plain text
#: upstream/_guides/security.adoc:127
#, fuzzy
msgid "`quarkus-oidc` and `quarkus-smallrye-jwt` can have both JWT and opaque tokens injected into the endpoint code - the injected JWT tokens may offer a richer information about the user. All extensions can have the tokens injected as `Principal`."
msgstr " `quarkus-oidc` 和 ，可以将JWT和不透明的令牌都注入到端点代码中--注入的JWT令牌可能提供更丰富的用户信息。所有的扩展都可以将令牌以 的形式注入。 `quarkus-smallrye-jwt` `Principal` "

#. type: Plain text
#: upstream/_guides/security.adoc:129
#, fuzzy
msgid "`quarkus-smallrye-jwt` supports more key formats than `quarkus-oidc`. The latter will only use the JWK-formatted keys which are part of a JWK set. The former - can also work with PEM keys."
msgstr " `quarkus-smallrye-jwt` 比 支持更多的密钥格式。后者只使用属于JWK集的JWK格式的密钥。前者--也可以与PEM密钥一起工作。 `quarkus-oidc` "

#. type: Plain text
#: upstream/_guides/security.adoc:131
#, fuzzy
msgid "`quarkus-smallrye-jwt` can handle locally not only signed but also inner-signed-and-encrypted or only encrypted tokens. In fact `quarkus-oidc` and `quarkus-elytron-security-oauth2` can verify such tokens too but only by treating them as opaque tokens and verifying them via the remote introspection."
msgstr " `quarkus-smallrye-jwt` 不仅可以在本地处理有签名的，而且还可以处理内部签名并加密的或只加密的令牌。事实上， 和 也可以验证这样的令牌，但只能把它们当作不透明的令牌，并通过远程自省来验证。 `quarkus-oidc` `quarkus-elytron-security-oauth2` "

#. type: Plain text
#: upstream/_guides/security.adoc:133
#, fuzzy
msgid "`quarkus-elytron-security-oauth2` is the best choice if you need a light weight library for the remote introspection of either opaque or JWT tokens."
msgstr " `quarkus-elytron-security-oauth2` 如果你需要一个轻量级的库来进行不透明或JWT令牌的远程反省，那就最好了。"

#. type: Plain text
#: upstream/_guides/security.adoc:135
#, fuzzy
msgid "Note that a choice of using the opaque versus JWT token format is often driven by the architectural considerations. Opaque tokens are usually much shorter than JWT tokens but they require maintaining most of the token associated state in the provider database - the opaque tokens are effectively the database pointers. JWT tokens are significantly longer than the opaque tokens - but the providers are effectively delegating storing most of the token associated state to the client by storing it as the token claims and either signing and/or encrypting them."
msgstr "请注意，使用不透明令牌与JWT令牌格式的选择通常是由架构考虑驱动的。不透明令牌通常比JWT令牌短得多，但它们需要在提供者的数据库中维护大部分的令牌相关状态--不透明令牌实际上就是数据库指针。JWT令牌比不透明令牌要长得多--但提供者通过将大部分令牌相关状态存储为令牌声明并对其进行签名和/或加密，有效地将其委托给客户端。"

#. type: Plain text
#: upstream/_guides/security.adoc:137
#, fuzzy
msgid "Below is a summary of the options."
msgstr "以下是选项的摘要。"

#. type: Table
#: upstream/_guides/security.adoc:139
#, fuzzy, no-wrap
msgid "quarkus-oidc"
msgstr "夸库斯-艾德克"

#. type: Table
#: upstream/_guides/security.adoc:139
#, fuzzy, no-wrap
msgid "quarkus-smallrye-jwt"
msgstr "夸父-小雷-JWT"

#. type: Table
#: upstream/_guides/security.adoc:141
#, fuzzy, no-wrap
msgid "quarkus-elytron-security-oauth2"
msgstr "quarkus-elytron-security-oauth2"

#. type: Table
#: upstream/_guides/security.adoc:142
#, fuzzy, no-wrap
msgid "Bearer JWT verification is required"
msgstr "需要进行承载器JWT验证"

#. type: Table
#: upstream/_guides/security.adoc:143
#, fuzzy, no-wrap
msgid "Local Verification or Introspection"
msgstr "本地核查或反省"

#. type: Table
#: upstream/_guides/security.adoc:144 upstream/_guides/security.adoc:184
#, fuzzy, no-wrap
msgid "Local Verification"
msgstr "本地验证"

#. type: Table
#: upstream/_guides/security.adoc:145 upstream/_guides/security.adoc:147
#: upstream/_guides/security.adoc:149 upstream/_guides/security.adoc:183
#: upstream/_guides/security.adoc:185
#, fuzzy, no-wrap
msgid "Introspection"
msgstr "自省"

#. type: Table
#: upstream/_guides/security.adoc:146
#, fuzzy, no-wrap
msgid "Bearer Opaque Token verification is required"
msgstr "需要进行不记名不透明令牌验证"

#. type: Table
#: upstream/_guides/security.adoc:148 upstream/_guides/security.adoc:153
#: upstream/_guides/security.adoc:161 upstream/_guides/security.adoc:164
#: upstream/_guides/security.adoc:165 upstream/_guides/security.adoc:168
#: upstream/_guides/security.adoc:169 upstream/_guides/security.adoc:172
#: upstream/_guides/security.adoc:173 upstream/_guides/security.adoc:175
#: upstream/_guides/security.adoc:177 upstream/_guides/security.adoc:179
#: upstream/_guides/security.adoc:181 upstream/_guides/security.adoc:187
#: upstream/_guides/security.adoc:189 upstream/_guides/security.adoc:191
#: upstream/_guides/security.adoc:193
#, fuzzy, no-wrap
msgid "No"
msgstr "没有"

#. type: Table
#: upstream/_guides/security.adoc:150
#, fuzzy, no-wrap
msgid "Refreshing JsonWebKey set for verifying JWT tokens"
msgstr "刷新用于验证JWT令牌的JsonWebKey集"

#. type: Table
#: upstream/_guides/security.adoc:151 upstream/_guides/security.adoc:152
#: upstream/_guides/security.adoc:155 upstream/_guides/security.adoc:156
#: upstream/_guides/security.adoc:157 upstream/_guides/security.adoc:159
#: upstream/_guides/security.adoc:160 upstream/_guides/security.adoc:163
#: upstream/_guides/security.adoc:167 upstream/_guides/security.adoc:171
#: upstream/_guides/security.adoc:176 upstream/_guides/security.adoc:192
#, fuzzy, no-wrap
msgid "Yes"
msgstr "是"

#. type: Table
#: upstream/_guides/security.adoc:154
#, fuzzy, no-wrap
msgid "Represent token as Principal"
msgstr "作为委托人代表代币"

#. type: Table
#: upstream/_guides/security.adoc:158
#, fuzzy, no-wrap
msgid "Inject JWT as MP JWT JsonWebToken"
msgstr "注入JWT作为MP JWT JsonWebToken"

#. type: Table
#: upstream/_guides/security.adoc:162
#, fuzzy, no-wrap
msgid "Authorization Code Flow"
msgstr "授权代码流程"

#. type: Table
#: upstream/_guides/security.adoc:166
#, fuzzy, no-wrap
msgid "Multi-tenancy"
msgstr "多租户"

#. type: Table
#: upstream/_guides/security.adoc:170
#, fuzzy, no-wrap
msgid "UserInfo support"
msgstr "支持UserInfo"

#. type: Table
#: upstream/_guides/security.adoc:174
#, fuzzy, no-wrap
msgid "Pem Key format support"
msgstr "支持Pem密钥格式"

#. type: Table
#: upstream/_guides/security.adoc:178
#, fuzzy, no-wrap
msgid "SecretKey support"
msgstr "支持SecretKey"

#. type: Table
#: upstream/_guides/security.adoc:180
#, fuzzy, no-wrap
msgid "In JsonWebKey format"
msgstr "以JsonWebKey格式"

#. type: Table
#: upstream/_guides/security.adoc:182
#, fuzzy, no-wrap
msgid "InnerSigned/Encrypted or Encrypted tokens"
msgstr "InnerSigned/Encrypted 或 Encrypted 令牌"

#. type: Table
#: upstream/_guides/security.adoc:186
#, fuzzy, no-wrap
msgid "Custom Token Verificition"
msgstr "自定义令牌验证"

#. type: Table
#: upstream/_guides/security.adoc:188
#, fuzzy, no-wrap
msgid "With Injected JWTParser"
msgstr "使用注入的JWTParser"

#. type: Table
#: upstream/_guides/security.adoc:190
#, fuzzy, no-wrap
msgid "Accept JWT as cookie"
msgstr "接受JWT作为cookie"

#. type: Title ===
#: upstream/_guides/security.adoc:195
#, fuzzy, no-wrap
msgid "LDAP"
msgstr "LDAP"

#. type: Plain text
#: upstream/_guides/security.adoc:198
#, fuzzy
msgid "Please see the xref:security-ldap.adoc[Authenticate with LDAP] guide for more information about LDAP authentication mechanism."
msgstr "关于LDAP认证机制的更多信息，请参见《 link:security-ldap.html[使用LDAP] 进行认证》指南。"

#. type: Title ==
#: upstream/_guides/security.adoc:200
#, fuzzy, no-wrap
msgid "Identity Providers"
msgstr "身份提供者"

#. type: Plain text
#: upstream/_guides/security.adoc:203
#, fuzzy
msgid "`IdentityProvider` converts the authentication credentials provided by `HttpAuthenticationMechanism` to `SecurityIdentity`."
msgstr " `IdentityProvider` 将 提供的认证凭证转换为 。 `HttpAuthenticationMechanism` `SecurityIdentity` "

#. type: Plain text
#: upstream/_guides/security.adoc:206
#, fuzzy
msgid "Some extensions such as `OIDC`, `OAuth2`, `SmallRye JWT`, `LDAP` have the inlined `IdentityProvider` implementations which are specific to the supported authentication flow.  For example, `quarkus-oidc` uses its own `IdentityProvider` to convert a token to `SecurityIdentity`."
msgstr "一些扩展，如 `OIDC` 、 `OAuth2` 、 `SmallRye JWT` 、 `LDAP` ，有内联的 `IdentityProvider` 实现，这些实现是针对支持的认证流程的。例如， `quarkus-oidc` 使用它自己的 `IdentityProvider` ，将令牌转换为 `SecurityIdentity` 。"

#. type: Plain text
#: upstream/_guides/security.adoc:208
#, fuzzy
msgid "If you use `Basic` or `Form` HTTP-based authentication then you have to add an `IdentityProvider` which can convert a user name and password to `SecurityIdentity`."
msgstr "如果你使用 `Basic` 或 `Form` 基于HTTP的认证，那么你必须添加一个 `IdentityProvider` ，它可以将用户名和密码转换成 `SecurityIdentity` 。"

#. type: Plain text
#: upstream/_guides/security.adoc:211
#, fuzzy
msgid "See xref:security-jpa.adoc[JPA IdentityProvider] and xref:security-jdbc.adoc[JDBC IdentityProvider] for more information.  You can also use xref:security-testing.adoc#configuring-user-information[User Properties IdentityProvider] for testing."
msgstr "更多信息请参见 link:security-jpa.html[JPA IdentityProvider] 和 link:security-jdbc.html[JDBC IdentityProvider] 。你也可以使用 link:security-testing.html#configuring-user-information[User Properties IdentityProvider] 进行测试。"

#. type: Title ==
#: upstream/_guides/security.adoc:212
#, fuzzy, no-wrap
msgid "Combining Authentication Mechanisms"
msgstr "结合认证机制"

#. type: Plain text
#: upstream/_guides/security.adoc:216
#, fuzzy
msgid "One can combine multiple authentication mechanisms if they get the authentication credentials from the different sources.  For example, combining built-in `Basic` and `quarkus-oidc` `Bearer` authentication mechanisms is allowed, but combining `quarkus-oidc` `Bearer` and `smallrye-jwt` authentication mechanisms is not allowed because both will attempt to verify the token extracted from the HTTP `Authorization Bearer` scheme."
msgstr "如果从不同的来源获得认证凭证，人们可以结合多种认证机制。例如，结合内置的 `Basic` 和 `quarkus-oidc` `Bearer` 认证机制是允许的，但结合 `quarkus-oidc` `Bearer` 和 `smallrye-jwt` 认证机制是不允许的，因为两者都将试图验证从HTTP `Authorization Bearer` 方案中提取的令牌。"

#. type: Title ===
#: upstream/_guides/security.adoc:217
#, fuzzy, no-wrap
msgid "Path Specific Authentication Mechanism"
msgstr "特定路径认证机制"

#. type: Plain text
#: upstream/_guides/security.adoc:220
#, fuzzy
msgid "You can enforce that only a single authentication mechanism is selected for a given request path, for example:"
msgstr "例如，你可以强制要求对一个给定的请求路径只选择一个认证机制。"

#. type: delimited block -
#: upstream/_guides/security.adoc:224
#, no-wrap
msgid ""
"quarkus.http.auth.permission.basic-or-bearer.paths=/service\n"
"quarkus.http.auth.permission.basic-or-bearer.policy=authenticated\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security.adoc:228
#, no-wrap
msgid ""
"quarkus.http.auth.permission.basic.paths=/basic-only\n"
"quarkus.http.auth.permission.basic.policy=authenticated\n"
"quarkus.http.auth.permission.basic.auth-mechanism=basic\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security.adoc:232
#, no-wrap
msgid ""
"quarkus.http.auth.permission.bearer.paths=/bearer-only\n"
"quarkus.http.auth.permission.bearer.policy=authenticated\n"
"quarkus.http.auth.permission.bearer.auth-mechanism=bearer\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security.adoc:235
#, fuzzy
msgid "The value of the `auth-mechanism` property must match the authentication scheme supported by HttpAuthenticationMechanism such as `basic` or `bearer` or `form`, etc."
msgstr " `auth-mechanism` 属性的值必须与 HttpAuthenticationMechanism 支持的认证方案相匹配，如 `basic` 或 `bearer` 或 `form` ，等等。"

#. type: Title ==
#: upstream/_guides/security.adoc:236
#, fuzzy, no-wrap
msgid "Proactive Authentication"
msgstr "主动认证"

#. type: Plain text
#: upstream/_guides/security.adoc:240
#, fuzzy
msgid "By default, Quarkus does what we call proactive authentication. This means that if an incoming request has a credential then that request will always be authenticated (even if the target page does not require authentication)."
msgstr "默认情况下，Quarkus做的是我们所说的主动认证。这意味着，如果一个传入的请求有一个证书，那么这个请求将总是被认证（即使目标页面不需要认证）。"

#. type: Plain text
#: upstream/_guides/security.adoc:242
#, fuzzy
msgid "See xref:security-built-in-authentication.adoc#proactive-authentication[Proactive Authentication] for more information."
msgstr "更多信息见 link:security-built-in-authentication.html#proactive-authentication[主动认证] 。"

#. type: Title ==
#: upstream/_guides/security.adoc:243
#, fuzzy, no-wrap
msgid "Authorization"
msgstr "授权书"

#. type: Plain text
#: upstream/_guides/security.adoc:246
#, fuzzy
msgid "See xref:security-authorization.adoc[Security Authorization] for more information about Role Based Access Control and other authorization options."
msgstr "关于基于角色的访问控制和其他授权选项的更多信息，请参阅 link:security-authorization.html[安全授权] 。"

#. type: Title ==
#: upstream/_guides/security.adoc:247
#, fuzzy, no-wrap
msgid "Customization and other useful tips"
msgstr "定制和其他有用的提示"

#. type: Plain text
#: upstream/_guides/security.adoc:250
#, fuzzy
msgid "Quarkus Security is highly customizable. One can register custom ``HttpAuthenticationMechanism``s, ``IdentityProvider``s and ``SecurityidentityAugmentor``s."
msgstr "Quarkus Security是高度可定制的。人们可以注册自定义的 `HttpAuthenticationMechanism` 、 `IdentityProvider` 、 `SecurityidentityAugmentor` 。"

#. type: Plain text
#: upstream/_guides/security.adoc:252
#, fuzzy
msgid "See xref:security-customization.adoc[Security Customization] for more information about customizing Quarkus Security and other useful tips about the reactive security, registering the security providers, etc."
msgstr "请参阅 link:security-customization.html[安全定制] ，了解更多关于定制Quarkus安全的信息以及其他关于反应式安全、注册安全提供者等的有用提示。"

#. type: Title ==
#: upstream/_guides/security.adoc:253
#, fuzzy, no-wrap
msgid "Secure connections with SSL"
msgstr "使用SSL的安全连接"

#. type: Plain text
#: upstream/_guides/security.adoc:256
#, fuzzy
msgid "See the xref:http-reference#adoc[Supporting secure connections with SSL] guide for more information."
msgstr "更多信息请参见 link:http-reference.html#adoc[支持SSL的安全连接] 指南。"

#. type: Title ==
#: upstream/_guides/security.adoc:257
#, fuzzy, no-wrap
msgid "Cross-Origin Resource Sharing"
msgstr "跨源资源共享"

#. type: Plain text
#: upstream/_guides/security.adoc:260
#, fuzzy
msgid "If you plan to make your Quarkus application accessible to another application running on a different domain, you will need to configure CORS (Cross-Origin Resource Sharing). Please read the xref:http-reference.adoc#cors-filter[HTTP CORS documentation] for more information."
msgstr "如果你打算让你的Quarkus应用程序可以被运行在不同领域的另一个应用程序访问，你将需要配置CORS（跨源资源共享）。请阅读 link:http-reference.html#cors-filter[HTTP CORS文档] 以了解更多信息。"

#. type: Title ==
#: upstream/_guides/security.adoc:261
#, fuzzy, no-wrap
msgid "SameSite cookies"
msgstr "SameSite cookies"

#. type: Plain text
#: upstream/_guides/security.adoc:264
#, fuzzy
msgid "Please see xref:http-reference.adoc#same-site-cookie[SameSite cookies] for information about adding a https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite[SameSite] cookie property to any of the cookies set by a Quarkus endpoint."
msgstr "关于在Quarkus终端设置的任何cookie中添加 link:https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite[SameSite] cookie属性的信息，请参见 link:http-reference.html#same-site-cookie[SameSite] cookie。"

#. type: Title ==
#: upstream/_guides/security.adoc:265
#, fuzzy, no-wrap
msgid "Testing"
msgstr "测试"

#. type: Plain text
#: upstream/_guides/security.adoc:268
#, fuzzy
msgid "See xref:security-testing.adoc[Security Testing] for more information about testing Quarkus Security."
msgstr "参见 link:security-testing.html[安全测试] ，了解更多关于测试Quarkus安全的信息。"

#. type: Title ==
#: upstream/_guides/security.adoc:269
#, fuzzy, no-wrap
msgid "Secret Engines"
msgstr "秘密引擎"

#. type: Title ===
#: upstream/_guides/security.adoc:270
#, fuzzy, no-wrap
msgid "Vault"
msgstr "穹顶"

#. type: Plain text
#: upstream/_guides/security.adoc:272
#, fuzzy
msgid "Quarkus provides a very comprehensive HashiCorp Vault support, please see the link:{vault-guide}[Quarkus and HashiCorp Vault] documentation for more information."
msgstr "Quarkus提供了非常全面的HashiCorp Vault支持，请参见 link:{vault-guide}[Quarkus和HashiCorp Vault] 文档以了解更多信息。"

#. type: Title ==
#: upstream/_guides/security.adoc:273
#, fuzzy, no-wrap
msgid "Secure serialization"
msgstr "安全序列化"

#. type: Plain text
#: upstream/_guides/security.adoc:276
#, fuzzy
msgid "When using Security along with RESTEasy Reactive and Jackson, Quarkus can limit the fields that are included in JSON serialization based on the configured security. See the xref:resteasy-reactive.adoc#secure-serialization[RESTEasy Reactive documentation] for details."
msgstr "当与RESTEasy Reactive和Jackson一起使用Security时，Quarkus可以根据配置的安全性限制包含在JSON序列化中的字段。详情请参见 link:resteasy-reactive.html#secure-serialization[RESTEasy Reactive文档] 。"

#. type: Title ==
#: upstream/_guides/security.adoc:277
#, fuzzy, no-wrap
msgid "National Vulnerability Database"
msgstr "国家易损性数据库"

#. type: Plain text
#: upstream/_guides/security.adoc:282
#, fuzzy
msgid "Most of Quarkus tags have been registered in link:https://nvd.nist.gov[National Vulnerability Database] (NVD) using a Common Platform Enumeration (CPE) name format.  All registered Quarkus CPE names can be found using link:https://nvd.nist.gov/products/cpe/search/results?namingFormat=2.3&keyword=quarkus[this search query].  If a Quarkus tag represented by the given CPE name entry is affected by some CVE then you'll be able to follow a provided link to that CVE."
msgstr "大多数Quarkus标签已经在 link:https://nvd.nist.gov[国家漏洞数据库] （NVD）中使用通用平台枚举（CPE）名称格式注册。所有注册的Quarkus CPE名称都可以通过 link:https://nvd.nist.gov/products/cpe/search/results?namingFormat=2.3&keyword=quarkus[这个搜索查询] 找到。如果给定的CPE名称条目所代表的Quarkus标签受到某些CVE的影响，那么你就可以通过提供的链接找到该CVE。"

#. type: Plain text
#: upstream/_guides/security.adoc:285
#, fuzzy
msgid "We will be asking the NVD CPE team to update the list as well as link Quarkus CPE name entries with the related CVEs on a regular basis.  If you work with the link:https://jeremylong.github.io/DependencyCheck/dependency-check-maven/[OWASP Dependency Check Plugin] which is using NVD feeds to detect the vulnerabilities at the application build time and see a false positive reported then please re-open link:https://github.com/quarkusio/quarkus/issues/2611[this issue] and provide the details."
msgstr "我们将要求NVD CPE团队定期更新列表，并将Quarkus CPE名称条目与相关的CVEs联系起来。如果你使用 link:https://jeremylong.github.io/DependencyCheck/dependency-check-maven/[OWASP依赖性检查插件] ，该插件在应用程序构建时使用NVD feeds来检测漏洞，并看到一个假阳性报告，那么请重新打开 link:https://github.com/quarkusio/quarkus/issues/2611[这个问题] 并提供细节。"

#. type: Plain text
#: upstream/_guides/security.adoc:287
#, fuzzy
msgid "You can add `OWASP Dependency Check Plugin` to your project's `pom.xml` like this:"
msgstr "你可以像这样把 `OWASP Dependency Check Plugin` 添加到你项目的 `pom.xml` 。"

#. type: delimited block -
#: upstream/_guides/security.adoc:303
#, no-wrap
msgid ""
"<plugin>\n"
"    <groupId>org.owasp</groupId>\n"
"    <artifactId>dependency-check-maven</artifactId>\n"
"    <version>${owasp-dependency-check-plugin.version}</version>\n"
"    <configuration>\n"
"        <!-- Fail only when detecting High Vulnerability issues -->\n"
"        <failBuildOnCVSS>7</failBuildOnCVSS>\n"
"        <suppressionFiles>\n"
"            <suppressionFile>${project.basedir}/dependency-cpe-suppression.xml</suppressionFile>\n"
"        </suppressionFiles>\n"
"    </configuration>\n"
"</plugin>\n"
"---- \n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security.adoc:305
#, no-wrap
msgid "You can change `failBuildOnCVSS` value to detect less severe issues as well.\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security.adoc:308
#, no-wrap
msgid ""
"A suppression list may vary depending on whether you'd like to keep checking the false positives to avoid missing something or not.\n"
"For example, it can look like this:\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security.adoc:310
#, no-wrap
msgid "[source,xml]\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security.adoc:373
#, no-wrap
msgid ""
"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n"
"<suppressions xmlns=\"https://jeremylong.github.io/DependencyCheck/dependency-suppression.1.2.xsd\">\n"
"    <!--\n"
"        This is a CPE suppression file for the maven dependency check plugin.\n"
"        Each CPE that is found by error (false positive) needs to be suppressed for a specific jar using it's GAV.\n"
"        See https://jeremylong.github.io/DependencyCheck/general/suppression.html\n"
"     -->\n"
"    <suppress>\n"
"        <notes>\n"
"            <![CDATA[\n"
"                Suppress the false positive CPE for netty-tcnative-classes to netty\n"
"            ]]>\n"
"        </notes>\n"
"        <gav regex=\"true\">^io\\.netty:netty-tcnative-classes.*:.*$</gav>\n"
"        <cpe>cpe:/a:netty:netty</cpe>\n"
"    </suppress>\n"
"    <suppress>\n"
"        <notes>\n"
"            <![CDATA[\n"
"                Suppress the false positive CPE for Quarkus Mutiny to mutiny:mutiny\n"
"            ]]>\n"
"        </notes>\n"
"        <gav regex=\"true\">^io\\.quarkus:quarkus-mutiny.*:.*$</gav>\n"
"        <cpe>cpe:/a:mutiny:mutiny</cpe>\n"
"    </suppress>\n"
"    <suppress>\n"
"        <notes>\n"
"            <![CDATA[\n"
"                Suppress the false positive CPE for Smallrye Mutiny to mutiny:mutiny\n"
"            ]]>\n"
"        </notes>\n"
"        <gav regex=\"true\">^io\\.smallrye.reactive:mutiny.*:.*$</gav>\n"
"        <cpe>cpe:/a:mutiny:mutiny</cpe>\n"
"    </suppress>\n"
"    <suppress>\n"
"        <notes>\n"
"            <![CDATA[\n"
"                Suppress the false positive CPE for Smallrye Mutiny to mutiny:mutiny\n"
"            ]]>\n"
"        </notes>\n"
"        <gav regex=\"true\">^io\\.smallrye.reactive:smallrye-mutiny.*:.*$</gav>\n"
"        <cpe>cpe:/a:mutiny:mutiny</cpe>\n"
"    </suppress>\n"
"    <suppress>\n"
"        <notes>\n"
"            <![CDATA[\n"
"                Suppress the false positive CPE for Smallrye Mutiny to mutiny:mutiny\n"
"            ]]>\n"
"        </notes>\n"
"        <gav regex=\"true\">^io\\.smallrye.reactive:vertx-mutiny.*:.*$</gav>\n"
"        <cpe>cpe:/a:mutiny:mutiny</cpe>\n"
"    </suppress>\n"
"    <suppress>\n"
"        <notes>\n"
"            <![CDATA[\n"
"                Suppress the false positive CPE for graal-sdk to GraalVM (the JVM distribution)\n"
"            ]]>\n"
"        </notes>\n"
"        <gav regex=\"true\">^org\\.graalvm\\.sdk:graal-sdk:.*$</gav>\n"
"        <cpe>cpe:/a:oracle:graalvm</cpe>\n"
"    </suppress>\n"
"</suppressions>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security.adoc:376
#, no-wrap
msgid "Such a suppression list has to be carefully prepared and revisited from time to time. You should consider making individual suppressions time limited by adding an `until` tribute, for example: `<suppress until=\"2022-01-01Z\">...</suppress>`. It will let you doublecheck that only the same known false positives are reported when the suppression period expires, and after reviewing the report you can set a new expiry date.\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security.adoc:377
#, no-wrap
msgid "Note link:https://jeremylong.github.io/DependencyCheck/dependency-check-maven/[OWASP Dependency Check Plugin] `6.5.3` or later should be used with Quarkus.\n"
msgstr ""
