# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-12 15:52+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/smallrye-health.adoc:6
#, fuzzy, no-wrap
msgid "SmallRye Health"
msgstr "小黑麦健康"

#. type: Plain text
#: upstream/_guides/smallrye-health.adoc:12
#, fuzzy
msgid "This guide demonstrates how your Quarkus application can use https://github.com/smallrye/smallrye-health/[SmallRye Health] an implementation of the https://github.com/eclipse/microprofile-health/[MicroProfile Health] specification."
msgstr "本指南展示了你的Quarkus应用程序如何使用 link:https://github.com/smallrye/smallrye-health/[SmallRye Health] ，这是 link:https://github.com/eclipse/microprofile-health/[MicroProfile Health] 规范的实现。"

#. type: Plain text
#: upstream/_guides/smallrye-health.adoc:17
#, fuzzy
msgid "SmallRye Health allows applications to provide information about their state to external viewers which is typically useful in cloud environments where automated processes must be able to determine whether the application should be discarded or restarted."
msgstr "SmallRye Health允许应用程序向外部查看者提供有关其状态的信息，这在云环境中通常很有用，因为在这种环境中，自动程序必须能够确定是否应该丢弃或重新启动应用程序。"

#. type: Title ==
#: upstream/_guides/smallrye-health.adoc:18
#, fuzzy, no-wrap
msgid "Prerequisites"
msgstr "先决条件"

#. type: Title ==
#: upstream/_guides/smallrye-health.adoc:22
#, fuzzy, no-wrap
msgid "Architecture"
msgstr "建筑学"

#. type: Plain text
#: upstream/_guides/smallrye-health.adoc:27
#, fuzzy
msgid "In this guide, we build a simple REST application that exposes MicroProfile Health functionalities at the `/q/health/live` and `/q/health/ready` endpoints according to the specification."
msgstr "在本指南中，我们建立一个简单的REST应用程序，根据规范在 `/q/health/live` 和 `/q/health/ready` 端点暴露MicroProfile Health功能。"

#. type: Title ==
#: upstream/_guides/smallrye-health.adoc:28
#, fuzzy, no-wrap
msgid "Solution"
msgstr "解决方案"

#. type: Plain text
#: upstream/_guides/smallrye-health.adoc:32
#, fuzzy
msgid "We recommend that you follow the instructions in the next sections and create the application step by step. However, you can go right to the completed example."
msgstr "我们建议你按照下面几节的说明，一步一步地创建应用程序。然而，你可以直接进入已完成的例子。"

#. type: Plain text
#: upstream/_guides/smallrye-health.adoc:35
#, fuzzy
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "克隆 Git 仓库。 `git clone {quickstarts-clone-url}` ，或者下载一个{quickstarts-archive-url}[存档]。"

#. type: Plain text
#: upstream/_guides/smallrye-health.adoc:38
#, fuzzy
msgid "The solution is located in the `microprofile-health-quickstart` {quickstarts-tree-url}/microprofile-health-quickstart[directory]."
msgstr "该解决方案位于 `microprofile-health-quickstart` {quickstarts-tree-url}/microprofile-health-quickstart[目录]中。"

#. type: Title ==
#: upstream/_guides/smallrye-health.adoc:39
#, fuzzy, no-wrap
msgid "Creating the Maven Project"
msgstr "创建Maven项目"

#. type: Plain text
#: upstream/_guides/smallrye-health.adoc:42
#, fuzzy
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "首先，我们需要一个新的项目。用以下命令创建一个新项目。"

#. type: Plain text
#: upstream/_guides/smallrye-health.adoc:48
#, fuzzy
msgid "This command generates a project, importing the `smallrye-health` extension."
msgstr "该命令生成一个项目，导入 `smallrye-health` 扩展。"

#. type: Plain text
#: upstream/_guides/smallrye-health.adoc:51
#, fuzzy
msgid "If you already have your Quarkus project configured, you can add the `smallrye-health` extension to your project by running the following command in your project base directory:"
msgstr "如果你已经配置了你的Quarkus项目，你可以通过在你的项目基础目录下运行以下命令，将 `smallrye-health` 扩展到你的项目。"

#. type: Plain text
#: upstream/_guides/smallrye-health.adoc:56
#, fuzzy
msgid "This will add the following to your build file:"
msgstr "这将在你的构建文件中添加以下内容。"

#. type: Block title
#: upstream/_guides/smallrye-health.adoc:58
#: upstream/_guides/smallrye-health.adoc:431
#, fuzzy, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: delimited block -
#: upstream/_guides/smallrye-health.adoc:64
#: upstream/_guides/smallrye-health.adoc:437
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-smallrye-health</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_guides/smallrye-health.adoc:67
#: upstream/_guides/smallrye-health.adoc:440
#, fuzzy, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: delimited block -
#: upstream/_guides/smallrye-health.adoc:70
#: upstream/_guides/smallrye-health.adoc:443
#, no-wrap
msgid "implementation(\"io.quarkus:quarkus-smallrye-health\")\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/smallrye-health.adoc:72
#, fuzzy, no-wrap
msgid "Running the health check"
msgstr "运行健康检查"

#. type: Plain text
#: upstream/_guides/smallrye-health.adoc:75
#, fuzzy
msgid "Importing the `smallrye-health` extension directly exposes three REST endpoints:"
msgstr "导入 `smallrye-health` 扩展直接暴露了三个REST端点。"

#. type: Plain text
#: upstream/_guides/smallrye-health.adoc:77
#, fuzzy
msgid "`/q/health/live` - The application is up and running."
msgstr " `/q/health/live` - 该应用程序已经启动并运行。"

#. type: Plain text
#: upstream/_guides/smallrye-health.adoc:78
#, fuzzy
msgid "`/q/health/ready` - The application is ready to serve requests."
msgstr " `/q/health/ready` - 该应用程序已准备好为请求提供服务。"

#. type: Plain text
#: upstream/_guides/smallrye-health.adoc:79
#, fuzzy
msgid "`/q/health/started` - The application is started."
msgstr " `/q/health/started` - 应用程序已启动。"

#. type: Plain text
#: upstream/_guides/smallrye-health.adoc:80
#, fuzzy
msgid "`/q/health` - Accumulating all health check procedures in the application."
msgstr " `/q/health` - 在应用程序中积累所有健康检查程序。"

#. type: Plain text
#: upstream/_guides/smallrye-health.adoc:82
#, fuzzy
msgid "To check that the `smallrye-health` extension is working as expected:"
msgstr "要检查 `smallrye-health` 扩展是否按预期工作。"

#. type: Plain text
#: upstream/_guides/smallrye-health.adoc:86
#, fuzzy
msgid "start your Quarkus application with:"
msgstr "用来启动你的Quarkus应用程序。"

#. type: Plain text
#: upstream/_guides/smallrye-health.adoc:90
#, fuzzy
msgid "access the `http://localhost:8080/q/health/live` endpoint using your browser or `curl http://localhost:8080/q/health/live`"
msgstr "访问该 `<a href=\"http://localhost:8080/q/health/live\" class=\"bare\">http://localhost:8080/q/health/live</a>` 使用你的浏览器或 `curl <a href=\"http://localhost:8080/q/health/live\" class=\"bare\">http://localhost:8080/q/health/live</a>` "

#. type: Plain text
#: upstream/_guides/smallrye-health.adoc:94
#, fuzzy
msgid "All of the health REST endpoints return a simple JSON object with two fields:"
msgstr "所有的健康REST端点都返回一个简单的JSON对象，有两个字段。"

#. type: Plain text
#: upstream/_guides/smallrye-health.adoc:96
#, fuzzy
msgid "`status` -- the overall result of all the health check procedures"
msgstr " `status` - 所有健康检查程序的总体结果"

#. type: Plain text
#: upstream/_guides/smallrye-health.adoc:97
#, fuzzy
msgid "`checks` -- an array of individual checks"
msgstr " `checks` - 一个单独的检查阵列"

#. type: Plain text
#: upstream/_guides/smallrye-health.adoc:101
#, fuzzy
msgid "The general `status` of the health check is computed as a logical AND of all the declared health check procedures. The `checks` array is empty as we have not specified any health check procedure yet so let's define some."
msgstr "健康检查的一般 `status` ，计算为所有声明的健康检查程序的逻辑和。 `checks` 数组是空的，因为我们还没有指定任何健康检查程序，所以我们来定义一些。"

#. type: Title ==
#: upstream/_guides/smallrye-health.adoc:102
#, fuzzy, no-wrap
msgid "Creating your first health check"
msgstr "创建你的第一次健康检查"

#. type: Plain text
#: upstream/_guides/smallrye-health.adoc:105
#, fuzzy
msgid "In this section, we create our first simple health check procedure."
msgstr "在本节中，我们创建了第一个简单的健康检查程序。"

#. type: Plain text
#: upstream/_guides/smallrye-health.adoc:107
#, fuzzy
msgid "Create the `org.acme.microprofile.health.SimpleHealthCheck` class:"
msgstr "创建 `org.acme.microprofile.health.SimpleHealthCheck` 类。"

#. type: delimited block -
#: upstream/_guides/smallrye-health.adoc:111
#: upstream/_guides/smallrye-health.adoc:165
#: upstream/_guides/smallrye-health.adoc:210
#: upstream/_guides/smallrye-health.adoc:242
#: upstream/_guides/smallrye-health.adoc:313
#, no-wrap
msgid "package org.acme.microprofile.health;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-health.adoc:115
#, no-wrap
msgid ""
"import org.eclipse.microprofile.health.HealthCheck;\n"
"import org.eclipse.microprofile.health.HealthCheckResponse;\n"
"import org.eclipse.microprofile.health.Liveness;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-health.adoc:117
#: upstream/_guides/smallrye-health.adoc:171
#: upstream/_guides/smallrye-health.adoc:216
#: upstream/_guides/smallrye-health.adoc:250
#: upstream/_guides/smallrye-health.adoc:319
#: upstream/_guides/smallrye-health.adoc:377
#, no-wrap
msgid "import javax.enterprise.context.ApplicationScoped;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-health.adoc:121
#, no-wrap
msgid ""
"@Liveness\n"
"@ApplicationScoped <1> <2>\n"
"public class SimpleHealthCheck implements HealthCheck {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-health.adoc:127
#, no-wrap
msgid ""
"    @Override\n"
"    public HealthCheckResponse call() {\n"
"        return HealthCheckResponse.up(\"Simple health check\");\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/smallrye-health.adoc:129
#, fuzzy
msgid "It's recommended to annotate the health check class with `@ApplicationScoped` or the `@Singleton` scope so that a single bean instance is used for all health check requests."
msgstr "建议用 `@ApplicationScoped` 或 `@Singleton` 范围来注解健康检查类，以便所有健康检查请求都使用一个bean实例。"

#. type: Plain text
#: upstream/_guides/smallrye-health.adoc:130
#, fuzzy
msgid "If a bean class annotated with one of the health check annotations declares no scope then the `@Singleton` scope is used automatically."
msgstr "如果一个用健康检查注解之一注解的Bean类没有声明任何作用域，那么会自动使用 `@Singleton` 作用域。"

#. type: Plain text
#: upstream/_guides/smallrye-health.adoc:132
#, fuzzy
msgid "As you can see, the health check procedures are defined as CDI beans that implement the `HealthCheck` interface and are annotated with one of the health check qualifiers, such as:"
msgstr "正如你所看到的，健康检查程序被定义为CDI Bean，它实现了 `HealthCheck` 接口，并被注解为健康检查限定符之一，如：。"

#. type: Plain text
#: upstream/_guides/smallrye-health.adoc:134
#, fuzzy
msgid "`@Liveness` - the liveness check accessible at `/q/health/live`"
msgstr " `@Liveness` - 可访问的有效性检查在 `/q/health/live` "

#. type: Plain text
#: upstream/_guides/smallrye-health.adoc:135
#, fuzzy
msgid "`@Readiness` - the readiness check accessible at `/q/health/ready`"
msgstr " `@Readiness` - 可通过以下网址进行准备情况检查 `/q/health/ready` "

#. type: Plain text
#: upstream/_guides/smallrye-health.adoc:139
#, fuzzy
msgid "`HealthCheck` is a functional interface whose single method `call` returns a `HealthCheckResponse` object which can be easily constructed by the fluent builder API shown in the example."
msgstr " `HealthCheck` 是一个功能接口，其单一的方法 ，返回一个 对象，可以通过例子中所示的流畅构建器API轻松构建。 `call` `HealthCheckResponse` "

#. type: Plain text
#: upstream/_guides/smallrye-health.adoc:145
#, fuzzy
msgid "As we have started our Quarkus application in dev mode simply repeat the request to `http://localhost:8080/q/health/live` by refreshing your browser window or by using `curl http://localhost:8080/q/health/live`. Because we defined our health check to be a liveness procedure (with `@Liveness` qualifier) the new health check procedure is now present in the `checks` array."
msgstr "由于我们已经在开发模式下启动了我们的Quarkus应用程序，因此只需重复请求到 `<a href=\"http://localhost:8080/q/health/live\" class=\"bare\">http://localhost:8080/q/health/live</a>` 的请求，刷新你的浏览器窗口或使用 `curl <a href=\"http://localhost:8080/q/health/live\" class=\"bare\">http://localhost:8080/q/health/live</a>` .因为我们将健康检查定义为一个有效性过程（带有 `@Liveness` 修饰语），所以新的健康检查过程现在出现在 `checks` 数组中。"

#. type: Plain text
#: upstream/_guides/smallrye-health.adoc:148
#, fuzzy
msgid "Congratulations! You've created your first Quarkus health check procedure. Let's continue by exploring what else can be done with SmallRye Health."
msgstr "恭喜你！你已经创建了你的第一个Quarkus健康检查程序。你已经创建了你的第一个Quarkus健康检查程序。让我们继续探索用SmallRye Health还可以做什么。"

#. type: Title ==
#: upstream/_guides/smallrye-health.adoc:149
#, fuzzy, no-wrap
msgid "Adding a readiness health check procedure"
msgstr "增加一个准备就绪的健康检查程序"

#. type: Plain text
#: upstream/_guides/smallrye-health.adoc:155
#, fuzzy
msgid "In the previous section, we created a simple liveness health check procedure which states whether our application is running or not. In this section, we will create a readiness health check which will be able to state whether our application is able to process requests."
msgstr "在上一节中，我们创建了一个简单的有效性健康检查程序，它指出我们的应用程序是否正在运行。在这一节中，我们将创建一个就绪性健康检查，它将能够说明我们的应用程序是否能够处理请求。"

#. type: Plain text
#: upstream/_guides/smallrye-health.adoc:159
#, fuzzy
msgid "We will create another health check procedure that simulates a connection to an external service provider such as a database. For starters, we will always return the response indicating the application is ready."
msgstr "我们将创建另一个健康检查过程，模拟与外部服务提供者（如数据库）的连接。对于初学者来说，我们将总是返回表示应用程序已准备好的响应。"

#. type: Plain text
#: upstream/_guides/smallrye-health.adoc:161
#, fuzzy
msgid "Create `org.acme.microprofile.health.DatabaseConnectionHealthCheck` class:"
msgstr "创建 `org.acme.microprofile.health.DatabaseConnectionHealthCheck` 类。"

#. type: delimited block -
#: upstream/_guides/smallrye-health.adoc:169
#, no-wrap
msgid ""
"import org.eclipse.microprofile.health.HealthCheck;\n"
"import org.eclipse.microprofile.health.HealthCheckResponse;\n"
"import org.eclipse.microprofile.health.Readiness;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-health.adoc:175
#: upstream/_guides/smallrye-health.adoc:254
#, no-wrap
msgid ""
"@Readiness\n"
"@ApplicationScoped\n"
"public class DatabaseConnectionHealthCheck implements HealthCheck {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-health.adoc:181
#, no-wrap
msgid ""
"    @Override\n"
"    public HealthCheckResponse call() {\n"
"        return HealthCheckResponse.up(\"Database connection health check\");\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/smallrye-health.adoc:191
#, fuzzy
msgid "If you now rerun the health check at `http://localhost:8080/q/health/live` the `checks` array will contain only the previously defined `SimpleHealthCheck` as it is the only check defined with the `@Liveness` qualifier. However, if you access `http://localhost:8080/q/health/ready` (in the browser or with `curl http://localhost:8080/q/health/ready`) you will see only the `Database connection health check` as it is the only health check defined with the `@Readiness` qualifier as the readiness health check procedure."
msgstr "如果你现在重新运行健康检查，在 `<a href=\"http://localhost:8080/q/health/live\" class=\"bare\">http://localhost:8080/q/health/live</a>` `checks` 数组将只包含先前定义的 `SimpleHealthCheck` ，因为它是唯一一个用 `@Liveness` 修饰语定义的检查。然而，如果你访问 `<a href=\"http://localhost:8080/q/health/ready\" class=\"bare\">http://localhost:8080/q/health/ready</a>` (在浏览器中或用 `curl <a href=\"http://localhost:8080/q/health/ready\" class=\"bare\">http://localhost:8080/q/health/ready</a>` )，你将只看到 `Database connection health check` ，因为它是唯一一个用 `@Readiness` 修饰语定义的健康检查程序，是准备就绪的健康检查。"

#. type: Plain text
#: upstream/_guides/smallrye-health.adoc:193
#, fuzzy
msgid "If you access `http://localhost:8080/q/health` you will get back both checks."
msgstr "如果你访问 `<a href=\"http://localhost:8080/q/health\" class=\"bare\">http://localhost:8080/q/health</a>` 你会得到两张支票。"

#. type: Plain text
#: upstream/_guides/smallrye-health.adoc:198
#, fuzzy
msgid "More information about which health check procedures should be used in which situation is detailed in the MicroProfile Health specification. Generally, the liveness procedures determine whether the application should be restarted while readiness procedures determine whether it makes sense to contact the application with requests."
msgstr "关于在什么情况下应该使用哪种健康检查程序的更多信息，详见MicroProfile健康规范。一般来说，有效性程序决定是否应该重新启动应用程序，而准备就绪程序决定是否有必要联系应用程序的请求。"

#. type: Title ==
#: upstream/_guides/smallrye-health.adoc:199
#, fuzzy, no-wrap
msgid "Adding a startup health check procedure"
msgstr "添加一个启动健康检查程序"

#. type: Plain text
#: upstream/_guides/smallrye-health.adoc:202
#, fuzzy
msgid "The third and final type of health check procedures is startup. Startup procedures are defined as an option for slow starting containers (should not be needed in Quarkus) to delay the invocations of liveness probe which will take over from startup once the startup responds UP for the first time. Startup health checks are defined with the `@Startup` qualifier."
msgstr "第三种也是最后一种健康检查程序是启动。启动程序被定义为慢速启动容器的一个选项（在Quarkus中应该是不需要的），以延迟调用liveness probe，一旦启动响应UP第一次，它将从启动中接管。启动健康检查是用 `@Startup` 修饰语定义的。"

#. type: Plain text
#: upstream/_guides/smallrye-health.adoc:204
#, fuzzy
msgid "Please make sure that you import the microprofile `org.eclipse.microprofile.health.Startup` annotation since there is an unfortunate clash with `io.quarkus.runtime.Startup`."
msgstr "请确保你导入了微配置文件 `org.eclipse.microprofile.health.Startup` 注释，因为它与 `io.quarkus.runtime.Startup` 有一个不幸的冲突。"

#. type: Plain text
#: upstream/_guides/smallrye-health.adoc:206
#, fuzzy
msgid "Create `org.acme.microprofile.health.StartupHealthCheck` class:"
msgstr "创建 `org.acme.microprofile.health.StartupHealthCheck` 类。"

#. type: delimited block -
#: upstream/_guides/smallrye-health.adoc:214
#, no-wrap
msgid ""
"import org.eclipse.microprofile.health.HealthCheck;\n"
"import org.eclipse.microprofile.health.HealthCheckResponse;\n"
"import org.eclipse.microprofile.health.Startup;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-health.adoc:220
#, no-wrap
msgid ""
"@Startup\n"
"@ApplicationScoped\n"
"public class StartupHealthCheck implements HealthCheck {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-health.adoc:226
#, no-wrap
msgid ""
"    @Override\n"
"    public HealthCheckResponse call() {\n"
"        return HealthCheckResponse.up(\"Startup health check\");\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/smallrye-health.adoc:229
#, fuzzy
msgid "The startup health check will be available either at `http://localhost:8080/q/health/started` or together with other health check procedure at `http://localhost:8080/q/health`."
msgstr "启动健康检查将在以下网站提供 `<a href=\"http://localhost:8080/q/health/started\" class=\"bare\">http://localhost:8080/q/health/started</a>` 或与其他健康检查程序一起在 `<a href=\"http://localhost:8080/q/health\" class=\"bare\">http://localhost:8080/q/health</a>` ."

#. type: Title ==
#: upstream/_guides/smallrye-health.adoc:230
#, fuzzy, no-wrap
msgid "Negative health check procedures"
msgstr "消极的健康检查程序"

#. type: Plain text
#: upstream/_guides/smallrye-health.adoc:236
#, fuzzy
msgid "In this section, we extend our `Database connection health check` with the option of stating that our application is not ready to process requests as the underlying database connection cannot be established. For simplicity reasons, we only determine whether the database is accessible or not by a configuration property."
msgstr "在这一节中，我们扩展了我们的 `Database connection health check` ，可以说明我们的应用程序还没有准备好处理请求，因为底层的数据库连接无法建立。为了简单起见，我们只通过一个配置属性来确定数据库是否可以访问。"

#. type: Plain text
#: upstream/_guides/smallrye-health.adoc:238
#, fuzzy
msgid "Update the `org.acme.microprofile.health.DatabaseConnectionHealthCheck` class:"
msgstr "更新 `org.acme.microprofile.health.DatabaseConnectionHealthCheck` 类。"

#. type: delimited block -
#: upstream/_guides/smallrye-health.adoc:248
#, no-wrap
msgid ""
"import org.eclipse.microprofile.config.inject.ConfigProperty;\n"
"import org.eclipse.microprofile.health.HealthCheck;\n"
"import org.eclipse.microprofile.health.HealthCheckResponse;\n"
"import org.eclipse.microprofile.health.HealthCheckResponseBuilder;\n"
"import org.eclipse.microprofile.health.Readiness;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-health.adoc:257
#, no-wrap
msgid ""
"    @ConfigProperty(name = \"database.up\", defaultValue = \"false\")\n"
"    private boolean databaseUp;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-health.adoc:260
#, no-wrap
msgid ""
"    @Override\n"
"    public HealthCheckResponse call() {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-health.adoc:262
#, no-wrap
msgid "        HealthCheckResponseBuilder responseBuilder = HealthCheckResponse.named(\"Database connection health check\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-health.adoc:270
#, no-wrap
msgid ""
"        try {\n"
"            simulateDatabaseConnectionVerification();\n"
"            responseBuilder.up();\n"
"        } catch (IllegalStateException e) {\n"
"            // cannot access the database\n"
"            responseBuilder.down();\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-health.adoc:273
#, no-wrap
msgid ""
"        return responseBuilder.build();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-health.adoc:280
#, no-wrap
msgid ""
"    private void simulateDatabaseConnectionVerification() {\n"
"        if (!databaseUp) {\n"
"            throw new IllegalStateException(\"Cannot contact database\");\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/smallrye-health.adoc:287
#, fuzzy
msgid "Until now we used a simplified method of building a `HealthCheckResponse` through the `HealthCheckResponse#up(String)` (there is also `HealthCheckResponse#down(String)`) which will directly build the response object.  From now on, we utilize the full builder capabilities provided by the `HealthCheckResponseBuilder` class."
msgstr "到目前为止，我们使用了一种简化的方法，即通过 `HealthCheckResponse#up(String)` （也有 `HealthCheckResponse#down(String)` ）建立一个 `HealthCheckResponse` ，它将直接建立响应对象。从现在开始，我们利用 `HealthCheckResponseBuilder` 类提供的全部构建器功能。"

#. type: Plain text
#: upstream/_guides/smallrye-health.adoc:292
#, fuzzy
msgid "If you now rerun the readiness health check (at `http://localhost:8080/q/health/ready`)  the overall `status` should be DOWN. You can also check the liveness check at `http://localhost:8080/q/health/live` which will return the overall `status` UP because it isn't influenced by the readiness checks."
msgstr "如果你现在重新运行准备就绪健康检查（在 `<a href=\"http://localhost:8080/q/health/ready\" class=\"bare\">http://localhost:8080/q/health/ready</a>` )，整个 `status` ，应该是下降的。你也可以检查可用性检查，在 `<a href=\"http://localhost:8080/q/health/live\" class=\"bare\">http://localhost:8080/q/health/live</a>` 这将使整个 `status` ，因为它不受就绪状态检查的影响而上升。"

#. type: Plain text
#: upstream/_guides/smallrye-health.adoc:296
#, fuzzy
msgid "As we shouldn't leave this application with a readiness check in a DOWN state and because we are running Quarkus in dev mode you can add `database.up=true` in `src/main/resources/application.properties` and rerun the readiness health check again"
msgstr "因为我们不应该让这个应用程序的准备就绪检查处于下降状态，而且因为我们是在开发模式下运行Quarkus，你可以在 `src/main/resources/application.properties` ，并再次运行准备就绪健康检查， `database.up=true` "

#. type: Plain text
#: upstream/_guides/smallrye-health.adoc:297
#, fuzzy
msgid "it should be up again."
msgstr "它应该会再次出现。"

#. type: Title ==
#: upstream/_guides/smallrye-health.adoc:299
#, fuzzy, no-wrap
msgid "Adding user-specific data to the health check response"
msgstr "将用户特定的数据添加到健康检查响应中"

#. type: Plain text
#: upstream/_guides/smallrye-health.adoc:307
#, fuzzy
msgid "In previous sections, we saw how to create simple health checks with only the minimal attributes, namely, the health check name and its status (UP or DOWN). However, the MicroProfile Health specification also provides a way for the applications to supply arbitrary data in the form of key-value pairs sent to the consuming end. This can be done by using the `withData(key, value)` method of the health check response builder API."
msgstr "在前面的章节中，我们看到了如何创建简单的健康检查，只有最小的属性，即健康检查名称和它的状态（向上或向下）。然而，MicroProfile健康规范也为应用程序提供了一种方法，即以键值对的形式向消费端提供任意的数据。这可以通过使用健康检查响应生成器API的 `withData(key, value)` 方法来实现。"

#. type: Plain text
#: upstream/_guides/smallrye-health.adoc:309
#, fuzzy
msgid "Let's create a new health check procedure `org.acme.microprofile.health.DataHealthCheck`:"
msgstr "让我们创建一个新的健康检查程序 `org.acme.microprofile.health.DataHealthCheck` 。"

#. type: delimited block -
#: upstream/_guides/smallrye-health.adoc:317
#, no-wrap
msgid ""
"import org.eclipse.microprofile.health.Liveness;\n"
"import org.eclipse.microprofile.health.HealthCheck;\n"
"import org.eclipse.microprofile.health.HealthCheckResponse;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-health.adoc:323
#, no-wrap
msgid ""
"@Liveness\n"
"@ApplicationScoped\n"
"public class DataHealthCheck implements HealthCheck {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-health.adoc:333
#, no-wrap
msgid ""
"    @Override\n"
"    public HealthCheckResponse call() {\n"
"        return HealthCheckResponse.named(\"Health check with data\")\n"
"                .up()\n"
"                .withData(\"foo\", \"fooValue\")\n"
"                .withData(\"bar\", \"barValue\")\n"
"                .build();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/smallrye-health.adoc:339
#, fuzzy
msgid "If you rerun the liveness health check procedure by accessing the `/q/health/live` endpoint you can see that the new health check `Health check with data` is present in the `checks` array. This check contains a new attribute called `data` which is a JSON object consisting of the properties we have defined in our health check procedure."
msgstr "如果你通过访问 `/q/health/live` 端点来重新运行有效性健康检查程序，你可以看到新的健康检查 `Health check with data` 出现在 `checks` 数组中。这个检查包含一个名为 `data` 的新属性，这是一个JSON对象，由我们在健康检查程序中定义的属性组成。"

#. type: Plain text
#: upstream/_guides/smallrye-health.adoc:342
#, fuzzy
msgid "This functionality is specifically useful in failure scenarios where you can pass the error along with the health check response."
msgstr "这个功能在失败的情况下特别有用，你可以把错误和健康检查响应一起传递。"

#. type: delimited block -
#: upstream/_guides/smallrye-health.adoc:354
#, no-wrap
msgid ""
"        try {\n"
"            simulateDatabaseConnectionVerification();\n"
"            responseBuilder.up();\n"
"        } catch (IllegalStateException e) {\n"
"            // cannot access the database\n"
"            responseBuilder.down()\n"
"                    .withData(\"error\", e.getMessage()); // pass the exception message\n"
"        }\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/smallrye-health.adoc:356
#, fuzzy, no-wrap
msgid "Context propagation into the health check invocations"
msgstr "语境传播到健康检查调用中"

#. type: Plain text
#: upstream/_guides/smallrye-health.adoc:359
#, fuzzy
msgid "For the perfomance reasons the context (e.g., CDI or security context) is not propagated into each health check invocation. However, if you need to enable this functionality you can set the config property `quarkus.smallrye-health.context-propagation=true` to allow the context propagation into every health check call."
msgstr "由于性能原因，上下文（如CDI或安全上下文）不会被传播到每个健康检查调用中。但是，如果你需要启用这个功能，你可以设置配置属性 `quarkus.smallrye-health.context-propagation=true` ，允许将上下文传播到每个健康检查调用中。"

#. type: Title ==
#: upstream/_guides/smallrye-health.adoc:360
#, fuzzy, no-wrap
msgid "Reactive health checks"
msgstr "反应性健康检查"

#. type: Plain text
#: upstream/_guides/smallrye-health.adoc:363
#, fuzzy
msgid "MicroProfile Health currently doesn't support returning reactive types, but SmallRye Health does."
msgstr "MicroProfile Health目前不支持返回反应性类型，但SmallRye Health支持。"

#. type: Plain text
#: upstream/_guides/smallrye-health.adoc:366
#, fuzzy
msgid "If you want to provide a reactive health check, you can implement the `io.smallrye.health.api.AsyncHealthCheck` interface instead of the `org.eclipse.microprofile.health.HealthCheck` one.  The `io.smallrye.health.api.AsyncHealthCheck` interface allows you to return a `Uni<HealthCheckResponse>`."
msgstr "如果你想提供一个反应式的健康检查，你可以实现 `io.smallrye.health.api.AsyncHealthCheck` 接口，而不是 `org.eclipse.microprofile.health.HealthCheck` 。 `io.smallrye.health.api.AsyncHealthCheck` 接口允许你返回一个 `Uni<HealthCheckResponse>` 。"

#. type: Plain text
#: upstream/_guides/smallrye-health.adoc:368
#, fuzzy
msgid "The following example shows a reactive liveness check:"
msgstr "下面的例子显示了一个反应式的有效性检查。"

#. type: delimited block -
#: upstream/_guides/smallrye-health.adoc:372
#, no-wrap
msgid "import io.smallrye.health.api.AsyncHealthCheck;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-health.adoc:375
#, no-wrap
msgid ""
"import org.eclipse.microprofile.health.Liveness;\n"
"import org.eclipse.microprofile.health.HealthCheckResponse;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-health.adoc:381
#, no-wrap
msgid ""
"@Liveness\n"
"@ApplicationScoped\n"
"public class LivenessAsync implements AsyncHealthCheck {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-health.adoc:388
#, no-wrap
msgid ""
"    @Override\n"
"    public Uni<HealthCheckResponse> call() {\n"
"        return Uni.createFrom().item(HealthCheckResponse.up(\"liveness-reactive\"))\n"
"                .onItem().delayIt().by(Duration.ofMillis(10));\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/smallrye-health.adoc:390
#, fuzzy, no-wrap
msgid "Extension health checks"
msgstr "延期健康检查"

#. type: Plain text
#: upstream/_guides/smallrye-health.adoc:393
#, fuzzy
msgid "Some extension may provide default health checks, including the extension will automatically register its health checks."
msgstr "一些扩展可能提供默认的健康检查，包括扩展将自动注册其健康检查。"

#. type: Plain text
#: upstream/_guides/smallrye-health.adoc:396
#, fuzzy
msgid "For example, `quarkus-agroal` that is used to manage Quarkus datasource(s) automatically register a readiness health check that will validate each datasources: xref:datasource.adoc#datasource-health-check[Datasource Health Check]."
msgstr "例如，用于管理Quarkus数据源的 `quarkus-agroal` ，会自动注册一个准备就绪的健康检查，对每个数据源进行验证。 link:datasource.html#datasource-health-check[数据源健康检查] 。"

#. type: Plain text
#: upstream/_guides/smallrye-health.adoc:398
#, fuzzy
msgid "You can disable extension health check via the property `quarkus.health.extensions.enabled` so none will be automatically registered."
msgstr "你可以通过属性 `quarkus.health.extensions.enabled` ，禁用扩展的健康检查，这样就没有人会自动注册。"

#. type: Title ==
#: upstream/_guides/smallrye-health.adoc:400
#, fuzzy, no-wrap
msgid "Health UI "
msgstr "健康用户界面"

#. type: Plain text
#: upstream/_guides/smallrye-health.adoc:403
#, fuzzy
msgid "Experimental - not included in the MicroProfile specification"
msgstr "实验性的--不包括在MicroProfile规范中"

#. type: Plain text
#: upstream/_guides/smallrye-health.adoc:405
#, fuzzy
msgid "`health-ui` allows you to see your Health Checks in a Web GUI."
msgstr " `health-ui` 允许你在Web GUI中查看你的健康检查。"

#. type: Plain text
#: upstream/_guides/smallrye-health.adoc:407
#, fuzzy
msgid "The Quarkus `smallrye-health` extension ships with `health-ui` and enables it by default in dev and test modes, but it can also be explicitly configured for production mode as well."
msgstr "Quarkus `smallrye-health` 扩展与 `health-ui` ，并在开发和测试模式下默认启用，但也可以明确配置为生产模式。"

#. type: Plain text
#: upstream/_guides/smallrye-health.adoc:409
#, fuzzy
msgid "`health-ui` can be accessed from http://localhost:8080/q/health-ui/ ."
msgstr " `health-ui` 可以从 http://localhost:8080/q/health-ui/ 。"

#. type: Plain text
#: upstream/_guides/smallrye-health.adoc:411
#, fuzzy
msgid "image:health-ui-screenshot01.png[alt=Health UI]"
msgstr "image:health-ui-screenshot01.png[alt=\"Health UI\"]"

#. type: Title ==
#: upstream/_guides/smallrye-health.adoc:412
#, fuzzy, no-wrap
msgid "Conclusion"
msgstr "总结"

#. type: Plain text
#: upstream/_guides/smallrye-health.adoc:418
msgid "SmallRye Health provides a way for your application to distribute information about its healthiness state to state whether or not it is able to function properly.  Liveness checks are utilized to tell whether the application should be restarted and readiness checks are used to tell whether the application is able to process requests."
msgstr ""

#. type: Plain text
#: upstream/_guides/smallrye-health.adoc:420
msgid "All that is needed to enable the SmallRye Health features in Quarkus is:"
msgstr ""

#. type: Plain text
#: upstream/_guides/smallrye-health.adoc:424
msgid "adding the `smallrye-health` Quarkus extension to your project using the `quarkus-maven-plugin`:"
msgstr ""

#. type: Plain text
#: upstream/_guides/smallrye-health.adoc:429
msgid "or simply adding the following Maven dependency:"
msgstr ""

#. type: Title ==
#: upstream/_guides/smallrye-health.adoc:445
#, no-wrap
msgid "Configuration Reference"
msgstr "配置参考"
