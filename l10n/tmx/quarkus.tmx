<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE tmx SYSTEM "tmx14.dtd">
<tmx version="1.4">
  <header creationtool="Translate Toolkit" creationtoolversion="3.6.2" segtype="sentence" o-tmf="UTF-8" adminlang="en" srclang="en" datatype="PlainText"/>
  <body>
    <tu>
      <tuv xml:lang="en">
        <seg>Video podcast hosted by Quarkus Developers about things moving in and around Quarkus ecosystem.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>由Quarkus开发者主办的关于在Quarkus生态系统内和周边事物的视频播客。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>World Tour 2021 - Abstracts and Support materials.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>2021年世界巡演-摘要和支持材料。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Quarkus 2.0 continues the mission of making Java the preferred framework for Kubernetes-native development with new developer tools and improved performance.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>Quarkus 2.0继续致力于通过新的开发工具和改进的性能，使Java成为kubernetes原生开发的首选框架。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Proven Java for the Cloud</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>经过验证的云计算Java</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>What we mean by "Supersonic Subatomic Java".</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>"超音速亚原子Java"是什么意思。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>What is Quarkus?</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>Quarkus是什么？</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Components</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>组件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Articles, blogs, podcast and other tidbits published online around Quarkus.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>围绕Quarkus在线发布的文章、博客、播客和其他花絮。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Publications</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>发表</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Reduction in Reflection Usage</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>减少反射的使用</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>You can use any of the Quarkus features in your function and benefit from the fast startup and low memory utilization. With Quarkus, you can embrace this new world without having to change your programming language.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>您可以在函数中使用任何Quarkus特性，并受益于快速启动和低内存利用率。使用Quarkus，您无需改变编程语言就可以拥抱这个新世界。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>What's next?</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>下一步做什么？</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>pom.xml</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>pom.xml</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>build.gradle</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>build.gradle</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Creating Your First Application</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>创建你的第一个应用程序</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Learn how to create a Hello World Quarkus app.  This guide covers:</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>学习如何创建一个Hello World Quarkus应用程序。本指南包括：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Bootstrapping an application</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>创建一个应用程序</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Creating a JAX-RS endpoint</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>创建一个JAX-RS端点</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Injecting beans</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>注入beans</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Functional tests</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>功能测试</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Packaging of the application</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>应用程序打包</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Prerequisites</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>先决条件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Verify Maven is using the Java you expect</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>验证Maven是否使用了你期望的Java版本</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>If you have multiple JDK's installed it is not certain Maven will pick up the expected java and you could end up with unexpected results.  You can verify which JDK Maven uses by running `mvn --version`.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>如果你安装了多个JDK，那么Maven不一定能找到预期的java，你可能会得到意想不到的结果。你可以通过运行 `mvn --version` ，验证Maven使用哪个JDK。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Architecture</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>应用结构</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>In this guide, we create a straightforward application serving a `hello` endpoint. To demonstrate dependency injection, this endpoint uses a `greeting` bean.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>在本指南中，我们创建了一个简单的应用程序，为 `hello` 端点提供服务。为了演示依赖性注入，这个端点使用了一个 `greeting` bean。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Architecture,</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>应用结构，</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This guide also covers the testing of the endpoint.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>本指南还包括对终端的测试。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Solution</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>解决方案</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>We recommend that you follow the instructions from &lt;&lt;bootstrapping-the-project,Bootstrapping project&gt;&gt; and onwards to create the application step by step.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>我们建议你按照从 link:#bootstrapping-the-project[构建项目] 开始的指示，一步一步地创建应用程序。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>However, you can go right to the completed example.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>然而，你可以直接进入完成的例子。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Download an {quickstarts-archive-url}[archive] or clone the git repository:</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>下载一个 {quickstarts-archive-url}[存档] 或克隆git仓库：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The solution is located in the `getting-started` {quickstarts-tree-url}/getting-started[directory].</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>该解决方案位于 `getting-started` {quickstarts-tree-url}/getting-started[目录] 中。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Bootstrapping the project</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>创建项目</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The easiest way to create a new Quarkus project is to open a terminal and run the following command:</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>创建一个新的Quarkus项目最简单的方法是打开终端并运行以下命令：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>For Linux &amp; MacOS users</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>针对Linux和MacOS用户</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>For Windows users</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>对于Windows用户</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>If using cmd , (don't use backward slash `\` and put everything on the same line)</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>如果使用cmd ，（不要使用反斜线 `\` ，并将所有内容放在同一行）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>If using Powershell , wrap `-D` parameters in double quotes e.g. `"-DprojectArtifactId=getting-started"`</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>如果使用Powershell，用双引号包住 `-D` 参数，例如： `"-DprojectArtifactId=getting-started"` </seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>It generates the following in `./getting-started`:</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>它在 `./getting-started` 中产生了以下内容：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>the Maven structure</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>Maven的结构</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>example `Dockerfile` files for both `native` and `jvm` modes in `src/main/docker`</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>示例 `Dockerfile` 文件，用于 `native` 和 `jvm` 两种模式，在 `src/main/docker` </seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Once generated, look at the `pom.xml`.  You will find the import of the Quarkus BOM, allowing you to omit the version of the different Quarkus dependencies.  In addition, you can see the `quarkus-maven-plugin` responsible of the packaging of the application and also providing the development mode.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>一旦生成，请看 `pom.xml` 。你会发现Quarkus BOM的导入，允许你省略不同Quarkus依赖的版本。此外，你可以看到 `quarkus-maven-plugin` ，负责应用程序的打包，也提供开发模式。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>In a Gradle project, you would find a similar setup:</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>在Gradle项目中，你会发现一个类似的设置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>the Quarkus Gradle plugin</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>Quarkus Gradle插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>an `enforcedPlatform` directive for the Quarkus BOM</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>`enforcedPlatform` ，用于指示Quarkus BOM</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>If we focus on the dependencies section, you can see the extension allowing the development of REST applications:</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>如果我们把重点放在依赖关系部分，你可以看到允许开发REST应用程序的扩展：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>During the project creation, the `src/main/java/org/acme/GreetingResource.java` file has been created with the following content:</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>在项目创建过程中， `src/main/java/org/acme/GreetingResource.java` 文件已被创建，其内容如下：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>It's a very simple REST endpoint, returning "Hello from RESTEasy Reactive" to requests on "/hello".</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>这是一个非常简单的REST端点，对"/hello "上的请求返回 "Hello from RESTEasy Reactive"。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Differences with vanilla JAX-RS</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>与vanilla JAX-RS的区别</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>With Quarkus, there is no need to create an `Application` class. It's supported, but not required. In addition, only one instance of the resource is created and not one per request. You can configure this using the different `*Scoped` annotations (`ApplicationScoped`, `RequestScoped`, etc).</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>使用Quarkus，不需要创建一个 `Application` 类。它支持这么做，但不是必须的。此外，只有一个资源的实例被创建，而不是每个请求一个。你可以使用不同的 `*Scoped` 注解（ `ApplicationScoped` , `RequestScoped` , 等等）来配置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Running the application</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>运行应用程序</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Now we are ready to run our application:</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>现在我们已经准备好运行我们的应用程序：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Once started, you can request the provided endpoint:</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>一旦启动，你可以发送请求到提供服务的端点。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Hit `CTRL+C` to stop the application, or keep it running and enjoy the blazing fast hot-reload.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>点击 `CTRL+C` ，停止应用程序，或保持运行，享受极快的热重载。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Automatically add newline with `curl -w "\n"`</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>自动添加换行符 `curl -w "\n"` </seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>We are using `curl -w "\n"` in this example to avoid your terminal printing a '%' or put both result and next command prompt on the same line.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>我们在这个例子中使用 `curl -w "\n"` ，以避免你的终端打印出'%'或把结果和下一个命令提示符放在同一行。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Using injection</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>使用注入法</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Dependency injection in Quarkus is based on ArC which is a CDI-based dependency injection solution tailored for Quarkus' architecture.  If you're new to CDI then we recommend you to read the xref:cdi.adoc[Introduction to CDI] guide.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>Quarkus中的依赖注入是基于ArC的，ArC是一个基于CDI的依赖注入解决方案，。如果你是CDI的新手，那么我们推荐你阅读 link:cdi.html[CDI简介] 指南。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Quarkus only implements a subset of the CDI features and comes with non-standard features and specific APIS, you can learn more about it in the xref:cdi-reference.adoc[Contexts and Dependency Injection guide].</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>Quarkus只实现了CDI功能的一个子集，并且带有非标准的功能和特定的APIS，你可以在 link:cdi-reference.html[Contexts和依赖注入指南] 中了解更多。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>ArC comes as a dependency of `quarkus-resteasy-reactive` so you already have it handy.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>ArC作为 `quarkus-resteasy-reactive` 的一个依赖项，所以你已经有了。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Let's modify the application and add a companion bean.  Create the `src/main/java/org/acme/GreetingService.java` file with the following content:</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>让我们修改应用程序并添加一个bean。创建 `src/main/java/org/acme/GreetingService.java` 文件，内容如下。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Edit the `GreetingResource` class to inject the `GreetingService` and create a new endpoint using it:</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>编辑 `GreetingResource` 类，注入 `GreetingService` ，并使用它创建一个新的端点:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>If you stopped the application (keep in mind you don't have to do it, changes will be automatically deployed by our live reload feature), restart the application with:</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>如果你停止了应用程序（请记住，你不必这样做，变化将由我们的实时重载功能自动部署），用以下方法重新启动应用程序:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Then check that the endpoint returns `hello quarkus` as expected:</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>然后检查端点是否按预期返回 `hello quarkus` :</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Development Mode</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>开发模式</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`quarkus:dev` runs Quarkus in development mode. This enables live reload with background compilation, which means that when you modify your Java files and/or your resource files and refresh your browser, these changes will automatically take effect.  This works too for resource files like the configuration property file.  Refreshing the browser triggers a scan of the workspace, and if any changes are detected, the Java files are recompiled and the application is redeployed; your request is then serviced by the redeployed application. If there are any issues with compilation or deployment an error page will let you know.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>`quarkus:dev` 在开发模式下运行Quarkus。这使得后台编译的实时重载成为可能，这意味着当你修改你的Java文件或者资源文件并刷新你的浏览器时，这些变化将自动生效。这也适用于资源文件，如配置属性文件。刷新浏览器会触发对工作区的扫描，如果检测到任何变化，Java文件会被重新编译，应用程序会被重新部署；然后你的请求会被重新部署的应用程序提供服务。如果编译或部署有任何问题，错误页面会让你知道。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This will also listen for a debugger on port `5005`. If you want to wait for the debugger to attach before running you can pass `-Dsuspend` on the command line. If you don't want the debugger at all you can use `-Ddebug=false`.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>这也将在端口 `5005` 上监听调试器。如果你想在运行前等待调试器的连接，你可以在命令行中传递 `-Dsuspend` 。如果你根本不想要调试器，你可以使用 `-Ddebug=false` 。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Testing</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>测试</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>All right, so far so good, but wouldn't it be better with a few tests, just in case.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>好吧，到目前为止还不错。为了以防万一， 我们需要再做一些测试。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>In the generated build file, you can see 2 test dependencies:</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>在生成的构建文件中，你可以看到2个测试依赖项：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Quarkus supports https://junit.org/junit5/[JUnit 5] tests.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>Quarkus支持 link:https://junit.org/junit5/[JUnit 5] 测试。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Because of this, in the case of Maven, the version of the https://maven.apache.org/surefire/maven-surefire-plugin/[Surefire Maven Plugin] must be set, as the default version does not support JUnit 5:</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>正因为如此，就Maven而言，必须设置 link:https://maven.apache.org/surefire/maven-surefire-plugin/[Surefire Maven Plugin] 的版本，因为默认版本不支持JUnit 5：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>We also set the `java.util.logging` system property to make sure tests will use the correct log manager and `maven.home` to ensure that custom configuration from `${maven.home}/conf/settings.xml` is applied (if any).</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>我们还设置了 `java.util.logging` 系统属性，以确保测试将使用正确的日志管理器和 `maven.home` ，以确保应用 `${maven.home}/conf/settings.xml` 的自定义配置（如果有的话）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The generated project contains a simple test.  Edit the `src/test/java/org/acme/GreetingResourceTest.java` to match the following content:</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>生成的项目包含一个简单的测试。编辑 `src/test/java/org/acme/GreetingResourceTest.java` ，以匹配以下内容：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>By using the `QuarkusTest` runner, you instruct JUnit to start the application before the tests.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>通过使用 `QuarkusTest` runner，你指示JUnit在测试前启动应用程序。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Check the HTTP response status code and content</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>检查HTTP回应状态代码和内容</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>These tests use http://rest-assured.io/[RestAssured], but feel free to use your favorite library.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>这些测试使用 link:http://rest-assured.io/[RestAssured] ，但也可以随意使用你最喜欢的库。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>You can run these using Maven:</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>你可以用Maven来运行这些：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>You can also run the test from your IDE directly (be sure you stopped the application first).</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>你也可以直接从你的IDE中运行测试（要确保你先停止了应用程序）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>By default, tests will run on port `8081` so as not to conflict with the running application. We automatically configure RestAssured to use this port. If you want to use a different client you should use the `@TestHTTPResource` annotation to directly inject the URL of the tested application into a field on the test class. This field can be of the type `String`, `URL` or `URI`. This annotation can also be given a value for the test path. For example, if I want to test a Servlet mapped to `/myservlet` I would just add the following to my test:</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>默认情况下，测试将在端口 `8081` 上运行，以便不与正在运行的应用程序冲突。我们自动将RestAssured配置为使用该端口。如果你想使用不同的客户端，你应该使用 `@TestHTTPResource` 注释，直接将测试应用程序的URL注入到测试类的一个字段中。这个字段的类型可以是 `String` , `URL` 或 `URI` 。这个注解也可以给测试路径一个值。例如，如果我想测试一个映射到 `/myservlet` 的Servlet，只需在测试中添加以下内容：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The test port can be controlled via the `quarkus.http.test-port` config property. Quarkus also creates a system property called `test.url` that is set to the base test URL for situations where you cannot use injection.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>测试端口可以通过 `quarkus.http.test-port` 配置属性来控制。Quarkus还创建了一个名为 `test.url` 的系统属性，在不能使用注入的情况下被设置为基本测试URL。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Working with multi-module project or external modules</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>与多模块项目或外部模块一起工作</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Quarkus heavily utilizes https://github.com/wildfly/jandex[Jandex] at build time, to discover various classes or annotations. One immediately recognizable application of this, is CDI bean discovery.  As a result, most of the Quarkus extensions will not work properly if this build time discovery isn't properly setup.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>Quarkus在构建时大量使用 link:https://github.com/wildfly/jandex[Jandex] ，以发现各种类或注解。其中一个应用就是可以发现并识别CDI Bean。因此，如果没有在构建时正确设置，大多数Quarkus扩展将无法正常工作。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This index is created by default on the project on which Quarkus is configured for, thanks to our Maven and Gradle plugins.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>通过使用Maven和Gradle插件，这个索引在Quarkus的项目上的默认配置是自动创建。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>However, when working with a multi-module project, be sure to read the `Working with multi-module projects` section of the xref:maven-tooling.adoc#multi-module-maven[Maven] or xref:gradle-tooling.adoc#multi-module-maven[Gradle] guides.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>不过，在处理多模块项目时，请务必阅读 link:maven-tooling.html#multi-module-maven[Maven] 或 link:gradle-tooling.html#multi-module-maven[Gradle] 指南中的 `多模块项目` 部分。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>If you plan to use external modules (for example, an external library for all your domain objects), you will need to make these modules known to the indexing process either by adding the Jandex plugin (if you can modify them)  or via the `quarkus.index-dependency` property inside your `application.properties` (useful in cases where you can't modify the module).</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>如果你计划使用外部模块（例如，一个用于你所有领域对象的外部库），你将需要通过添加Jandex插件（如果你能修改它们）或通过 `application.properties` 里的属性`quarkus.index-dependency` （在你不能修改模块的情况下很有用）使这些模块为索引过程所知。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Be sure to read the xref:cdi-reference.adoc#bean_discovery[Bean Discovery] section of the CDI guide for more information.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>请务必阅读CDI指南中的 link:cdi-reference.html#bean_discovery[Bean发现] 部分以了解更多信息。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Packaging and run the application</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>应用程序打包和运行</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The application is packaged using:</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>该应用程序是用以下方式打包的：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>It produces several outputs in `/target`:</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>它在 `/target` ，产生几个输出：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`getting-started-1.0.0-SNAPSHOT.jar` - containing just the classes and resources of the projects, it's the regular artifact produced by the Maven build - it is *not* the runnable jar;</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>`getting-started-1.0.0-SNAPSHOT.jar` - 它只包含项目的类和资源，是Maven构建时产生的常规组件——它是不可运行的jar。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>the `quarkus-app` directory which contains the `quarkus-run.jar` jar file - being an executable _jar_. Be aware that it's not an _über-jar_ as the dependencies are copied into subdirectories of `quarkus-app/lib/`.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>`quarkus-app` 目录，其中包含 `quarkus-run.jar` jar文件--是一个可执行的 _jar_ 。请注意，它不是 _über-jar_ ，因为依赖项目被复制到 `quarkus-app/lib/` 的子目录中。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>You can run the application using: `java -jar target/quarkus-app/quarkus-run.jar`</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>你可以用以下方式运行该应用程序。 `java -jar target/quarkus-app/quarkus-run.jar`</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>If you want to deploy your application somewhere (typically in a container), you need to deploy the whole `quarkus-app` directory.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>如果你想把你的应用程序部署到某个地方（通常是在一个容器中），你需要部署整个 `quarkus-app` 目录。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Before running the application, don't forget to stop the hot reload mode (hit `CTRL+C`), or you will have a port conflict.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>在运行应用程序之前，不要忘记停止热重载模式（使用 `CTRL+C` ），否则你会有一个端口冲突。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Configuring the banner</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>配置banner</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>By default when a Quarkus application starts (in regular or dev mode), it will display an ASCII art banner. The banner can be disabled by setting `quarkus.banner.enabled=false` in `application.properties`, by setting the `-Dquarkus.banner.enabled=false` Java System Property, or by setting the `QUARKUS_BANNER_ENABLED` environment variable to `false`.  Furthermore, users can supply a custom banner by placing the banner file in `src/main/resources` and configuring `quarkus.banner.path=name-of-file` in `application.properties`.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>默认情况下，当Quarkus应用程序启动时（在常规或开发模式下），它将显示一个ASCII。通过在 `application.properties` 中设置 `quarkus.banner.enabled=false` ，通过设置 `-Dquarkus.banner.enabled=false` Java系统属性，或者通过将 `QUARKUS_BANNER_ENABLED` 环境变量设置为 `false` ，可以禁用该横幅。此外，用户可以通过将横幅文件放在 `src/main/resources` ，并在 `application.properties` 中配置 `quarkus.banner.path=name-of-file` ，从而提供一个自定义的横幅。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This guide covered the creation of an application using Quarkus.  However, there is much more.  We recommend continuing the journey with the xref:building-native-image.adoc[building a native executable guide], where you learn about creating a native executable and packaging it in a container.  If you are interested in reactive, we recommend the xref:getting-started-reactive.adoc[Getting Started with Reactive guide], where you can see how to implement reactive applications with Quarkus.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>本指南涵盖了使用 Quarkus 创建应用程序的内容。 然而，下面还有更多内容。 我们建议您继续学习 xref:building-native-image.adoc[构建本地可执行文件指南]，您可以在其中了解如何创建本地可执行文件并将其打包到容器中。 如果您对响应式感兴趣，我们推荐 xref:getting-started-reactive.adoc[响应式入门指南]，您可以在其中了解如何使用 Quarkus 实现响应式应用程序。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>In addition, the xref:tooling.adoc[tooling guide] document explains how to:</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>此外，xref:tooling.adoc[工具指南] 文档解释了如何做到：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>import the project in your favorite IDE</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>在你喜欢的编辑器里面导入项目</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Quarkus has been honored to receive multiple awards and recognition. We feel these are an affirmation of the great work being done by our dedicated community. We’ve started a trophy case to share the kudos with everyone.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>Quarkus有幸获得多个奖项和认可。我们认为这些都是对我们的社区所做的伟大工作的肯定。我们设立了奖杯陈列柜，与大家分享荣誉。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Awards and Recognition</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>奖项及表彰</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Getting Started</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>入门指南</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>These instructions will get you a copy of the Quarkus.io website up and running on your local machine for development and testing purposes.
</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>这些指令会给你一份Quarkus.io网站的副本，启动并运行在本地机器上，用于开发和测试。
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Installation</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>安装</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Install a full [Ruby development environment](https://jekyllrb.com/docs/installation/). If you use `rvm`, run: `rvm use 2.7.1`.
</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>安装完整的 [Ruby开发环境](https://jekyllrb.com/docs/installation/)。如果你使用 `rvm`, 运行: `rvm use 2.7.1`.
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Install [bundler](https://jekyllrb.com/docs/ruby-101/#bundler)  [gems](https://jekyllrb.com/docs/ruby-101/#gems)
</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>安装 [bundler](https://jekyllrb.com/docs/ruby-101/#bundler)  [gems](https://jekyllrb.com/docs/ruby-101/#gems)
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Fork the [project repository](https://github.com/quarkusio/quarkusio.github.io), then clone your fork.
</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>将 [项目 repository](https://github.com/quarkusio/quarkusio.github.io)打分支，然后克隆您的 fork.
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Change into the project directory:
</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>切换到工程目录：
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Use bundler to fetch all required gems in their respective versions
</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>使用bundler获取各自版本中所需的所有gems
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Build the site and make it available on a local server
</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>构建站点并使其在本地服务器上可用
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Now browse to http://localhost:4000
</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>现在用浏览器访问 http://localhost:4000
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>&gt; If you encounter any unexpected errors during the above, please refer to the [troubleshooting](https://jekyllrb.com/docs/troubleshooting/#configuration-problems) page or the [requirements](https://jekyllrb.com/docs/installation/#requirements) page, as you might be missing development headers or other prerequisites.
</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>&gt; 如果您在上述过程中遇到任何意外错误，请参阅 [排错](https://jekyllrb.com/docs/troubleshooting/#configuration-problems) 页面或者 [需求](https://jekyllrb.com/docs/installation/#requirements) 页面，因为您可能会错过开发headers或其他先决条件。
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>**For more regarding the use of Jekyll, please refer to the [Jekyll Step by Step Tutorial](https://jekyllrb.com/docs/step-by-step/01-setup/).**
</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>**更多关于使用Jekyll，请参考 [Jekyll循序渐进教程](https://jekyllrb.com/docs/step-by-step/01-setup/).**
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Deploying to GitHub Pages</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>部署到GitHub页面</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The website deployment is automatically performed by GitHub Actions (when commits are pushed to the `develop` branch).
If for some reason you need to deploy from your local machine, follow these instructions:
</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>网站部署由GitHub Actions自动执行(当提交被推送到 `develop` 分支时)。
如果由于某些原因需要从本地机器进行部署，请遵循以下说明：

</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Install the [act](https://github.com/nektos/act#installation) executable to run GitHub Actions locally
</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>安装 [act](https://github.com/nektos/act#installation) 可执行文件本地运行GitHub Actions
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Run `act -s GITHUB_TOKEN=&lt;GITHUB_TOKEN&gt;`, where *&lt;GITHUB_TOKEN&gt;* needs to be replaced with a token that allows you to push to the https://github.com/quarkusio/quarkusio.github.io repository.
</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>运行 `act -s GITHUB_TOKEN=&lt;GITHUB_TOKEN&gt;`，其中 *&lt;GITHUB_TOKEN&gt;* 需要替换为允许您推送到 https://github.com/quarkusio/quarkusio.github.io repository 的令牌。
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Writing a blog</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>写博客</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>To write a blog:
</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>写博客：
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`emailhash` you can get by running `echo -n your@email.org | md5sum` on Linux or `echo -n your@email.org | md5` on macOS using an email you have registered from the [Gravatar service](https://gravatar.com),
</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>你可以使用您已经在 [Gravatar service](https://gravatar.com) 注册的电子邮件，在Linux运行 `echo -n your@email.org | md5sum` 或在macOS运行 `echo -n your@email.org | md5` 获得`emailhash` 。
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`tags` should be used with some care as an archive page is created for of them. Below are some basic rules to try follow:
</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>`tags` 应该谨慎使用，因为存档页面是为它们创建的。以下是一些你可以尝试遵循的基本规则：
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`announcement` used for general announcement with some impact.
</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>`announcement` 用于具有一定影响的一般公告。
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`extension` used for blogs related to a specific extension.
</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>`extension` 用于与特定扩展相关的博客。
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`user-story` used for stories from users/companies adopting Quarkus.
</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>`user-story` 用于用户/公司采用Quarkus的故事。
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`development-tips` used for blogs with tips to develop using Quarkus or Quarkus itself. 
</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>`development-tips` 用于带有使用Quarkus或Quarkus本身开发提示的博客。 
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>add a tech specific, like `kafka`, if your post has a significant mention/relevance to that technology.
</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>如果你的帖子与该技术有显著的相关性，可以添加一个技术细节，比如 `kafka`。
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Be aware that the `date` attribute in the asciidoc preamble defines when the article will be published. Use a present date while writing your article to test locally, then switch to the actual target date before submitting. 
</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>请注意，asciidoc序言中的 `date` 属性定义了文章将于何时发布。在写文章时使用当前日期进行本地测试，然后在提交之前切换到实际的目标日期。 
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Contributing</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>贡献</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Please read [CONTRIBUTING.md](https://github.com/quarkusio/quarkusio.github.io/blob/master/CONTRIBUTING.md) for details on our code of conduct, and the process for submitting pull requests to us.
</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>请参考 [CONTRIBUTING.md](https://github.com/quarkusio/quarkusio.github.io/blob/master/CONTRIBUTING.md) 关于我们的行为准则的细节，以及提交合并请求给我们的过程。
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>**Important:** the guides are maintained in the main Quarkus repository and pull requests should be submitted there:
https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc.
</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>**重要：** 指南保存在主Quarkus仓库中，合并请求应该提交到那里：
https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc.
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>License</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>许可证</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This website is licensed under the [Creative Commons Attribution 3.0](https://creativecommons.org/licenses/by/3.0/).
</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>本网站是根据 [知识共享署名许可协议 3.0](https://creativecommons.org/licenses/by/3.0/) 维护。
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Multiple ways to connect with others via forum, stack, chat, or email groups.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>通过论坛、Stack、聊天或电子邮件组多种方式同我们保持联系。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Discussion about Quarkus</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>讨论Quarkus</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>World Tour - Sound Check... Getting Started with Quarkus.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>世界巡回-试音…从Quarkus开始。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>It’s a snap to be up and running with Quarkus.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>和Quarkus一起工作很容易。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Get Started</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>开始体验</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Get answers to some of your common Quarkus questions.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>找到一些常见Quarkus问题的答案。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>What is your license?</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>使用什么许可证？</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Quarkus is an Open Source project licensed under the https://www.apache.org/licenses/LICENSE-2.0[Apache License version 2.0].</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>Quarkus是一个使用https://www.apache.org/licenses/LICENSE-2.0[Apache License 2.0版]授权的开源项目。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Where can I get it?</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>我在哪儿能获得到?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Quarkus is published in Maven Central, check out link:/extensions[which extensions] you need and just import them in your `pom.xml` to get Quarkus. We recommend you start your Quarkus experience via our link:/get-started[Getting Started guides].</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>Quarkus发布在Maven Central中，请查看 link:/extensions[扩展]，只需将它们导入到 `pom.xml`中就可以获得Quarkus。我们建议您通过我们的 link:/get-started[入门指南]开始您的Quarkus体验。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Yes, we consider Quarkus stable. Remember 95% of the features Quarkus apps use are provided by the ecosystem like Hibernate ORM, Eclipse Vert.x, Netty, RESTEasy, etc. These libraries are rock solid :)</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>是的，我们认为Quarkus是稳定的。请记住，Quarkus应用程序使用的95%的特性都是由Hibernate ORM, Eclipse Vert.x, Netty, RESTEasy等生态系统提供的。这些库是坚如磐石的 :)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>You can go to https://code.quarkus.io/[code.quarkus.io] to see if a particular extension is _stable_ (default) or _preview_.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>您可以访问 https://code.quarkus.io/[code.quarkus.io] 查看特定扩展是否为 _stable_ (默认) or _preview_。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>One of the main goals of Quarkus is ease of extensibility and to build a vibrant ecosystem.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>Quarkus的主要目标之一是易于扩展和构建一个充满活力的生态系统。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Think of Quarkus extensions as your project dependencies. Extensions configure, boot and integrate a framework or technology into your Quarkus application. They also do all of the heavy lifting of providing the right information to GraalVM for your application to compile natively. This will allow 3rd party projects to easily take advantage of the work we have done to make it easier to target GraalVM.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>可以将Quarkus扩展视为您的项目依赖项。扩展可以配置、引导并将框架或技术集成到您的Quarkus应用程序中。它们还做了所有繁重的工作，为GraalVM提供正确的信息，以便应用程序本地编译。这将允许第三方项目轻松地利用我们所做的工作，使其更容易瞄准GraalVM。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>What are the extension statuses?</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>什么是扩展状态?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Extensions have a various degree of maturity when they enter the Quarkus ecosystem. A status offers the expectations you can rely on.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>扩展在进入Quarkus生态系统时具有不同程度的成熟度。状态提供了你可以依赖的期望。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>*Stable*: backward compatibility and presence in the ecosystem are taken very seriously. An application can safely rely on these extensions. Extensions not marked as preview or experimental (the majority) are stable.
</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>*Stable*: 向后兼容性和在生态系统中的存在被非常重视。应用程序可以安全地依赖于这些扩展。没有标记为预览或实验的扩展(大多数)是稳定的。
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>*Preview*: backward compatibility and presence in the ecosystem is not guaranteed. Specific improvements might require to change configuration or APIs and plans to become _stable_ are under way. Such extensions are in the middle of their maturation process.
</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>*Preview*: 不能保证向后兼容性和在生态系统中的存在。具体的改进可能需要改变配置、API和计划，使之变得 _stable_ 。这些扩展还处于成熟过程的中间阶段。
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>*Experimental*: early feedback is requested to mature the idea. There is no guarantee of stability nor long term presence in the platform until the solution matures. Such extensions are at the beginning of their maturation process.
</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>*Experimental*: 尽早反馈，以使想法更加成熟。在解决方案成熟之前，无法保证平台的稳定性或长期存在。这些扩展正处于其成熟过程的开始阶段。
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>You can find the extension status on https://code.quarkus.io[code.quarkus.io] or in the extension link:/guides/[guides].</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>您可以在 https://code.quarkus.io[code.quarkus.io] 或在扩展 link:/guides/[手册]中找到扩展状态。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Can I write an extension?</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>我可以写一个扩展吗?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Will the Quarkus team accept my extension?</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>Quarkus团队会接受我的扩展吗？</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Oh yeah! We had quite a few extensions written outside the Quarkus "initial" team.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>噢，是的！我们在Quarkus "初始" 团队之外编写了相当多的扩展。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Quarkus is an open ecosystem and we hope to see all the extensions people need to write their apps. We are working as we speak to allow an extension to be published in separate repos and separate GAVs and thus published in Maven repos independently of Quarkus core. This will greatly simplify the publication process. Expect news soon.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>Quarkus是一个开放的生态系统，我们希望看到人们编写应用程序所需的所有扩展。我们正在工作，正如我们所说，允许一个扩展在单独的repo和单独的GAV中发布，从而在Maven repo中独立于Quarkus核心发布。这将大大简化发布过程，期待很快有新消息。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The one current restriction is that extensions should work in both OpenJDK and GraalVM native executables. That is the guarantee we give Quarkus users (a cross compilation for their app). We have a maturity model to improve an extension to be fully "Quarked" and benefit from Quarkus, all done in incremental steps. Just hop on our https://quarkus.io/community/#discussions[mailing list] to discuss your ideas and get help. And you can start reading our https://quarkus.io/guides/writing-extensions[Writing extensions guide] as well or more simply get inspiration from the https://github.com/quarkusio/quarkus/tree/main/extensions[existing ones].</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>当前的一个限制是，扩展必须同时在OpenJDK和GraalVM本机可执行文件中工作。这是我们给Quarkus用户的保证(他们应用程序的交叉编译)。我们有一个成熟度模型来改进扩展，使其完全 "Quarked" ，并从Quarkus中受益，所有这些都是在增量步骤中完成的。请登录我们的 https://quarkus.io/community/#discussions[邮件列表] 讨论您的想法并获得帮助。你也可以开始阅读我们的 https://quarkus.io/guides/writing-extensions[编写扩展指南]，或者更简单地从 https://github.com/quarkusio/quarkus/tree/main/extensions[现有的扩展] 中获得灵感。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>## What is GraalVM?</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>## 什么是GraalVM？</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>https://www.graalvm.org[GraalVM] is a universal virtual machine for running applications written in various different languages, as well as providing the ability to compile JVM bytecode to a native executable (this native executable runs a special virtual machine called SubstrateVM). These native executables start much faster and can use a lot less memory than a traditional JVM, however not every JVM feature is supported, and some are more limited than normal.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>https://www.graalvm.org[GraalVM] 是一个通用的虚拟机，用于运行用各种不同语言编写的应用程序，并提供将JVM字节码编译为原生可执行文件的能力(这个原生可执行文件运行一个名为SubstrateVM的特殊虚拟机)。与传统JVM相比，这些原生可执行文件启动速度更快，使用的内存也少得多，但是并不是所有JVM特性都得到支持，有些特性的限制比一般的要多。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>For example by default reflection in GraalVM will not work, unless a class/member has been explicitly registered for reflection. This is normally achieved by listing every class, method, field and constructor in a JSON file, and passing this as a parameter into the native image build. This obviously gets quite cumbersome for all but the most trivial projects. Quarkus provides a framework that makes it easy to work around these annotations, and programmatically determine what should be registered.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>例如，默认情况下，GraalVM中的反射将不能工作，除非类/成员已显式地为反射注册。这通常是通过列出JSON文件中的每个类、方法、字段和构造函数，并将其作为参数传递到原生镜像构建中实现的。显然，除了最简易的项目外，这对于所有项目来说都是相当麻烦的。Quarkus提供了一个框架，可以轻松地处理这些注解，并以编程的方式确定应该注册哪些内容。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>## How do you unify imperative and reactive programming?</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>## 如何统一指令式编程和响应式编程?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>link:/vision/continuum[Learn more].</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>link:/vision/continuum[了解更多].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>link:/vision/container-first[Learn more].</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>link:/vision/container-first[了解更多].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>## What is your view on standards?</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>## 对标准有什么考虑?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>link:/vision/standards[Learn more].</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>link:/vision/standards[了解更多].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>## What are you doing to improve developer joy?</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>## 项目会做些什么来提高开发者的乐趣?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>link:/vision/developer-joy[Learn more].</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>link:/vision/developer-joy[了解更多].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Support When You Need It.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>在你需要的时候给予支持。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Browse through these selections of new Quarkus related books and resources to expand your knowledge and hone your coding skills to step up your Quarkus game.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>浏览这些与Quarkus相关的新书籍和资源，扩展您的知识，磨练您的编码技能，从而提升您的Quarkus游戏水平。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Books</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>书籍</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Our monthly newsletters bring together articles, videos and perspectives from across the Quarkus community.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>我们的每月通讯汇集了来自整个Quarkus社区的文章、视频和观点。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Blog</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>博客</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>World Tour 2021 - Sound Check... Getting Started with Quarkus.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>2021年世界巡演-试音…从Quarkus开始。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Contributing to the Quarkus.io website</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>为Quarkus.io网站贡献力量</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Contributions are welcome, please submit pull requests for the `develop` branch.
</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>欢迎贡献，请为 `develop` 分支提交pull requests。
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Continuum</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>连续统一体</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Let’s go to the quark of things.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>我们来看看quark的事情。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Standards</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>标准</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>In-Person and online events which feature Quarkus tracks, discussion and topics.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>以Quarkus为特色的现场和在线活动、讨论和话题。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Events</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>活动</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>World Tour - Abstracts and Support materials.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>世界巡回-摘要和支持材料。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Short informative videos that highlight unique technical points and instructions on how to get the most out of Quarkus.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>简短的信息视频突出了独特的技术要点和关于如何最大限度地利用Quarkus的说明。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Type</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>类型</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Default</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>默认</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Quarkus applications are optimised for low memory usage and fast startup times.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>Quarkus应用程序针对低内存使用和快速启动时间进行了优化。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Container First</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>容器优先</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Dev Services</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>开发服务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Non-standard Features</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>非标准功能</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Reactive</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>响应式</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Imperative</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>指令式</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Developer Joy</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>开发者的乐趣</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Category</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>类别</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Name</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>名称</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Dev UI</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>开发用户界面</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Scheduler</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>调度器</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Platform</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>平台</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Continuous Testing</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>持续测试</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Documentation</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>文档</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Quarkus applications are designed to run in containers.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>Quarkus应用程序被设计为在容器中运行。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The Quarkus team and community take all security bugs very seriously. You can find our guidelines here regarding our policy and security disclosure.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>Quarkus团队和社区非常重视所有的安全漏洞。你可以在这里找到关于我们的政策和安全披露的指导方针。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Security</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>安全</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Reporting security issues</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>报告安全问题</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Please report any security issues you find in Quarkus to:</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>请将您在Quarkus中发现的任何安全问题报告给：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Anyone can post to this list. The subscribers are only trusted individuals from the Quarkus community who will handle the resolution of any reported security issues in confidence. In your report, please note how you would like to be credited for discovering the issue and the details of any embargo you would like to impose. Currently the security response teams for the following distributions are subscribed to this list and will respond to your report:</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>任何人都可以在这个列表上发帖。订阅者仅是来自Quarkus社区的受信任的个人，他们将在保密的情况下处理任何报告的安全问题的解决方案。请在你的报告中注明你希望因发现该问题而获得的荣誉，以及你希望实施的任何禁运措施的细节。目前，以下发行版的安全响应团队已经订阅了这个列表，并将对您的报告作出响应：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Ecosystem</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>生态系统</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Quarkus is an ecosystem made from many extensions and many libraries (like Eclipse Vert.x, Hibernate, Apache Camel and more), most of them not under the direct responsibility of the Quarkus team. If you find a security bug possibly rooted in one of these libraries, you can either disclose to them directly or disclose them to the Quarkus team (following this process) and we will responsibly disclose the issue to the respective extension or library maintainer.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>Quarkus是一个由许多扩展和许多库组成的生态系统（如Eclipse Vert.x, Hibernate, Apache Camel等），其中大多数都不是由Quarkus团队直接负责的。如果您发现一个安全漏洞可能根植于这些库中的一个，您可以直接向他们披露，也可以向Quarkus团队披露（遵循此过程），我们将负责地向相应的扩展或库维护人员披露问题。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Why follow this process</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>为什么要遵循这个过程</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Due to the sensitive nature of security bugs, the disclosure process is more constrained than a regular bug. We appreciate you following these industry accepted guidelines, which gives time for a proper fix and limit the time window of attack.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>由于安全性缺陷的敏感性，披露过程比普通缺陷更受限制。我们感谢您遵循这些业界公认的指导方针，这些方针为适当的修复提供了时间，并限制了攻击的时间窗口。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Supported Versions</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>受支持版本</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The community will fix security bugs for the latest major.minor version published at https://quarkus.io/get-started/.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>社区将修复最新的major.minor版本安全漏洞，发布于 https://quarkus.io/get-started/。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>We may fix the vulnerability to older versions depending on the severity of the issue and the age of the release, but we are only committing to the latest version released.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>根据问题的严重程度和发布的时间，我们可能会修复旧版本的漏洞，但我们只承诺发布的最新版本。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Handling security issues</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>处理安全问题</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>If you represent a Quarkus extension or a Quarkus platform, you are welcome to subscribe to the security at quarkus.io mailing list. Your subscription will only be approved if you can demonstrate that you will handle issues in confidence and properly credit reporters for discovering issues (e.g. experience with embargoe process).</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>如果您代表一个Quarkus扩展或Quarkus平台，欢迎您订阅quarkus.io的安全性邮件列表。只有当你能证明你会保密地处理问题，并正确地信任问题发现者时，你的订阅才会被批准（例如，禁运流程的经验）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Beyond simply working, we’re aiming for Joy.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>除了工作，我们的目标是充满乐趣。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Newsletter</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>新闻</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Quarkus tailors your application for GraalVM and HotSpot. Amazingly fast boot time, incredibly low RSS memory (not just heap size!) offering near instant scale up and high density memory utilization in container orchestration platforms like Kubernetes. We use a technique we call compile time boot.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>Quarkus为GraalVM和HotSpot定制你的应用程序。令人惊讶的快速启动时间，令人难以置信的低RSS内存（不仅仅是堆的大小！），在Kubernetes等容器协调平台中提供近乎即时的扩展和高密度的内存利用。我们使用一种我们称之为编译时启动的技术。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>&lt;a href="/continuum"&gt;Unifies imperative and reactive&lt;/a&gt;</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>&lt;a href="/continuum"&gt;统一指令式和响应式&lt;/a&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Combine both the familiar imperative code and the reactive style when developing applications.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>在开发应用程序时，将熟悉的指令式和响应式代码风格结合起来。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Quarkus provides a cohesive, fun to use, full-stack framework by leveraging a growing list of over fifty best-of-breed libraries that you love and use. All wired on a standard backbone.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>Quarkus提供了一个有凝聚力的、有趣的、全栈式的框架，它利用了各类不断增长的50多个你喜欢和使用的最好的库。所有这些都在一个标准的主干上。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The combination of Quarkus and Kubernetes provides an ideal environment for creating scalable, fast, and lightweight applications. Quarkus significantly increases developer productivity with tooling, pre-built integrations, application services, and more.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>Quarkus和Kubernetes的组合为创建可伸缩、快速和轻量级的应用程序提供了理想的环境。Quarkus通过工具、预构建集成、应用程序服务等显著提高了开发人员的生产率。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>A cohesive platform for optimized developer joy with unified configuration and no hassle native executable generation. Zero config, live reload in the blink of an eye and streamlined code for the 80% common usages, flexible for the remainder 20%.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>一个内聚的平台，优化开发人员的乐趣，统一的配置和没有麻烦的本地可执行文件生成。零配置，瞬间重新加载，简化80%的常用代码，灵活处理剩余的20%。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Quarkus is an Open Source project licensed under the &lt;a href="https://www.apache.org/licenses/LICENSE-2.0"&gt;Apache License version 2.0&lt;/a&gt;. First and foremost, it is an open community where contributions, ideas and discussions are done in the open and contributors are welcome. Let’s join forces in building the future of Java applications.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>Quarkus是一个在&lt;a href="https://www.apache.org/licenses/LICENSE-2.0"&gt;Apache许可证2.0版&lt;/a&gt;下许可的开源项目。首先，它是一个开放的社区，在这里，贡献、想法和讨论都是公开进行的，并且欢迎贡献者。让我们携手共建Java应用的未来。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Roadmap</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>路线图</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Read about the community plans for the future. Here is &lt;a href="https://github.com/orgs/quarkusio/projects/5"&gt;our current roadmap&lt;/a&gt;. This is driven by the community, come and tell us what &lt;i&gt;your&lt;/i&gt; needs are.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>阅读有关社区未来的计划。这里是&lt;a href="https://github.com/orgs/quarkusio/projects/5"&gt;我们目前的路线图&lt;/a&gt;。这是由社区推动的，来告诉我们&lt;i&gt;你&lt;/i&gt;的需求是什么。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Code and Issue Tracker</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>代码和问题跟踪</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The source code is hosted on &lt;a href="https://github.com/quarkusio/quarkus"&gt;GitHub&lt;/a&gt;. If you need to report a bug or request a new feature, look for a similar one on our &lt;a href="https://github.com/quarkusio/quarkus/issues"&gt;GitHub issue tracker&lt;/a&gt;. If you don’t find any, &lt;a href="https://github.com/quarkusio/quarkus/issues/new/choose"&gt;create a new issue&lt;/a&gt;.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>源代码被托管在&lt;a href="https://github.com/quarkusio/quarkus"&gt;GitHub&lt;/a&gt;。如果您需要报告一个错误或要求一个新功能，请在我们的&lt;a href="https://github.com/quarkusio/quarkus/issues"&gt;GitHub问题跟踪&lt;/a&gt;上寻找类似的问题。如果您没有找到，&lt;a href="https://github.com/quarkusio/quarkus/issues/new/choose"&gt;创建一个新问题&lt;/a&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Write QuickStart Guides</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>编写快速入门指南</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>There are always new users trying to get started quickly. Share your experience with everyone by writing a Quickstart and submitting it for peer review.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>总有一些新用户试图快速入门。通过撰写 "快速入门 "并提交给同行评审，与大家分享你的经验。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Write New Extensions</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>编写新的扩展程序</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>If you are an extension developer or want to contribute to Quarkus development, join our mailing list either &lt;a href="mailto:quarkus-dev+subscribe@googlegroups.com"&gt;emailing us&lt;/a&gt; or by visiting our &lt;a href="https://groups.google.com/d/forum/quarkus-dev"&gt;Google Groups page&lt;/a&gt;. Make sure you visit our extensive &lt;a href="{{site.baseurl}}/guides/writing-extensions"&gt;Writing extensions guide&lt;/a&gt;.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>如果你是一个扩展程序的开发者，或者想为Quarkus的发展做出贡献，请加入我们的邮件列表，可以&lt;a href="mailto:quarkus-dev+subscribe@googlegroups.com"&gt;给我们写信&lt;/a&gt;，或者访问我们的&lt;a href="https://groups.google.com/d/forum/quarkus-dev"&gt;Google Groups页面&lt;/a&gt;。请务必访问我们广泛的&lt;a href="{{site.baseurl}}/guides/writing-extensions"&gt;写作扩展指南&lt;/a&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>A periodical video podcast hosted by Quarkus Developers about things moving in and around Quarkus ecosystem. View the &lt;a href="{{site.baseurl}}/insights"&gt;live podcasts&lt;/a&gt; and check out older episodes on the Podcasts.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>由Quarkus开发者主持的定期视频播客，讲述Quarkus生态系统内和周边事物。查看&lt;a href="{{site.baseurl}}/insights"&gt;实时播客&lt;/a&gt;，并在播客中查看先前的内容。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Follow Quarkus on Twitter</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>在Twitter上关注Quarkus</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Most of our updates go out on &lt;a href="https://twitter.com/quarkusio"&gt;Twitter&lt;/a&gt;. Sometimes our project team speaks at industry events, and sometimes they post cool ways people use Quarkus. Wash, rinse, and retweet.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>我们的大部分更新都是在&lt;a href="https://twitter.com/quarkusio"&gt;Twitter&lt;/a&gt;上发布的。有时我们的项目团队会在行业活动中发言，有时他们会发布人们使用Quarkus的很酷的方法。欢迎一键三连，多多转发。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The Quarkus community publishes thoughtful how-to videos to help you get started. Check them out on &lt;a href="https://www.youtube.com/playlist?list=PLsM3ZE5tGAVbMz1LJqc8L5LpnfxPPKloO"&gt;YouTube&lt;/a&gt;.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>Quarkus社区发布了周到的操作视频，以帮助您开始使用。请在&lt;a href="https://www.youtube.com/playlist?list=PLsM3ZE5tGAVbMz1LJqc8L5LpnfxPPKloO"&gt;YouTube&lt;/a&gt;上查看它们。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>There are heaps of helpful &lt;a href="{{site.baseurl}}/publications"&gt;articles and blog posts&lt;/a&gt; out there presenting interesting use-cases and examples of Quarkus in action.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>有很多有用的&lt;a href="{{site.baseurl}}/publications"&gt;文章和博文&lt;/a&gt;，介绍了Quarkus的有趣用例和实际应用的例子。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Subscribe to the &lt;a href="{{site.baseurl}}/newsletter"&gt;monthly newsletter&lt;/a&gt; to have choice Quarkus content from across our community delivered to your inbox.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>订阅&lt;a href="{{site.baseurl}}/newsletter"&gt;每月通讯&lt;/a&gt;，将来自我们整个社区的Quarkus精选内容发送到您的收件箱。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Awards</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>获奖</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Share in our excitement when the project receives &lt;a href="{{site.baseurl}}/awards"&gt;awards and recognition&lt;/a&gt; for all of the hard work done by the community.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>因为社区所做的所有辛勤工作，当项目获得&lt;a href="{{site.baseurl}}/awards"&gt;奖项和认可&lt;/a&gt;时，分享我们的兴奋之情。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Report a Vulnerability</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>报告漏洞</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Found a security vulnerability in Quarkus, its extensions or the dependencies they use? See the &lt;a href="{{site.baseurl}}/security"&gt;security policy page&lt;/a&gt; to learn to report it.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>在Quarkus、其扩展或其使用的依赖项中发现了安全漏洞？请参阅&lt;a href="{{site.baseurl}}/security"&gt;安全策略页面&lt;/a&gt;，了解如何报告它。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Get new and deeper views into Quarkus from the community through &lt;a href="{{site.baseurl}}/books"&gt;these great books&lt;/a&gt;.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>通过 &lt;a href="{{site.baseurl}}/books"&gt;这些很棒的书&lt;/a&gt;，从社区获得对Quarkus新的、更深入的看法。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>QUARKUS 2.0 IS HERE!</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>QUARKUS 2.0来了！</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>You need &lt;a href="https://en.wikipedia.org/wiki/Comparison_of_integrated_development_environments#Java" target="_blank"&gt;an IDE&lt;/a&gt; like &lt;a href="https://www.jetbrains.com/idea/download/"&gt;IntelliJ IDEA&lt;/a&gt;, &lt;a href="https://www.eclipse.org/downloads/"&gt;Eclipse&lt;/a&gt;, &lt;a href="https://code.visualstudio.com/Download"&gt;VSCode&lt;/a&gt; or even &lt;a href="https://spacevim.org/use-vim-as-a-java-ide/"&gt;Vim&lt;/a&gt; or &lt;a href="http://spacemacs.org"&gt;Emacs&lt;/a&gt;!</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>您需要&lt;a href="https://en.wikipedia.org/wiki/Comparison_of_integrated_development_environments#Java" target="_blank"&gt;一个IDE&lt;/a&gt;，比如&lt;a href="https://www.jetbrains.com/idea/download/"&gt;IntelliJ IDEA&lt;/a&gt;，&lt;a href="https://www.eclipse.org/downloads/"&gt;Eclipse&lt;/a&gt;、&lt;a href="https://code.visualstudio.com/Download"&gt;VSCode&lt;/a&gt;或者至少有一个&lt;a href="https://spacevim.org/use-vim-as-a-java-ide/"&gt;Vim&lt;/a&gt;、&lt;a href="http://spacemacs.org"&gt;Emacs&lt;/a&gt;文本编辑器！</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>You need a &lt;a href="https://adoptopenjdk.net" target="_blank"&gt;a JDK {{ site.data.versions.jdk }}&lt;/a&gt; (any distribution)</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>您需要一个&lt;a href="https://adoptopenjdk.net" target="_blank"&gt;JDK {{ site.data.version.jdk }}&lt;/a&gt;（任意发行版）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Optionally get &lt;a href="https://www.graalvm.org/" target="_blank"&gt;GraalVM&lt;/a&gt; {{ site.data.versions.graalvm }} for native compilation</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>可选择获取&lt;a href="https://www.graalvm.org/" target="_blank"&gt;GraalVM&lt;/a&gt; {{ site.data.version.graalvm }}进行原生编译</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>You need &lt;a href="https://maven.apache.org/" target="_blank"&gt;Apache Maven {{ site.data.versions.maven }}&lt;/a&gt; or &lt;a href="https://gradle.org/" target="_blank"&gt;Gradle&lt;/a&gt;</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>您需要&lt;a href="https://maven.apache.org/" target="_blank"&gt;Apache Maven {{ site.data.version.maven }}&lt;/a&gt;或&lt;a href="https://gradle.org/" target="_blank"&gt;Gradle&lt;/a&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>&lt;a href="https://code.quarkus.io"&gt;Start Coding&lt;/a&gt; with Quarkus {{ site.data.versions.quarkus.version }} [&lt;a href="{{ site.data.versions.quarkus.announce }}"&gt;announce&lt;/a&gt;|&lt;a href="https://github.com/quarkusio/quarkus/releases/tag/{{ site.data.versions.quarkus.version }}"&gt;changelog&lt;/a&gt;]</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>运用Quarkus {{ site.data.versions.quarkus.version }} [&lt;a href="{{ site.data.versions.quarkus.announce }}"&gt;通告&lt;/a&gt;|&lt;a href="https://github.com/quarkusio/quarkus/releases/tag/{{ site.data.versions.quarkus.version }}"&gt;变更日志&lt;/a&gt;]&lt;a href="https://code.quarkus.io"&gt;开始写代码&lt;/a&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Supersonic Subatomic Java</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>超音速 亚原子 Java</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>A Kubernetes Native Java stack tailored for OpenJDK HotSpot and GraalVM, crafted from the best of breed Java libraries and standards.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>Kubernetes Native Java栈为OpenJDK HotSpot和GraalVM量身定制，从Java库和标准中精心打造。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Now Available</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>现已可用</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>We don’t want you to spend hours learning new technologies. Instead, the Quarkus programming model builds on top of proven standards. Be it official standards such as Eclipse MicroProfile or leading frameworks in a specific domain such as Eclipse Vert.x.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>我们不希望你花时间学习新技术。相反，Quarkus编程模型构建在经过验证的标准之上。无论是官方标准(如Eclipse MicroProfile)还是特定领域的领先框架(如Eclipse Vert.x)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Our dependency injection solution is based on CDI. You can use JAX-RS annotations to define the REST endpoints. You can use JPA annotations to map your persistent entities and JTA annotations to declare the transaction boundaries. You can use Eclipse MicroProfile to configure and monitor your application. You can use Vert.x, Apache Camel and we support much more.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>我们的依赖注入方案是基于CDI的。可以使用JAX-RS注解定义REST端点。您可以使用JPA注解来映射持久实体，使用JTA注解来声明事务边界。可以使用Eclipse MicroProfile配置和监视应用程序。你可以使用Vert.x, Apache Camel，我们还支持更多。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Since we’re not limited to standards we can go beyond and extend your possibilities. Of course, Quarkus is not a passive consumer. Our goal is to improve and innovate the technologies we use and contribute back to the open source projects and standards we rely on.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>由于我们不受标准的限制，我们可以超越并扩展您的可能性。当然，Quarkus不是一个被动的消费者。我们的目标是改进和创新我们所使用的技术，并为我们所依赖的开源项目和标准做出贡献。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Selected Filters</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>选定的筛选</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Filter the Extensions</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>筛选扩展程序</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Compatibility</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>兼容</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Want to have your extension added to the Quarkiverse?</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>想让您的扩展功能加入到Quarkiverse中吗？</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>&lt;a href="{{site.baseurl}}/catalog/catalog-detail"&gt;&lt;/a&gt;</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>&lt;a href="{{site.baseurl}}/catalog/catalog-detail"&gt;&lt;/a&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Provided by JBeret project</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>由JBeret项目组提供</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The Quarkus JBeret Extension adds support for JSR-352 Batch Applications for the Java Platform. JBeret is an implementation of the JSR-352.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>Quarkus JBeret Extension增加了对Java平台的JSR-352批处理应用的支持。JBeret是JSR-352的一个实现。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Category: Web</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>类别：Web</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Extension Version: 1.1.1</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>扩展版本: 1.1.1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Works with Quarkus 1.1.1</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>适用于 Quarkus 1.1.1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Don't see and extension you need? &lt;a href="{{site.baseurl}}/createextensions"&gt;Request a new extension&lt;/a&gt;</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>没有看到您需要的扩展吗? &lt;a href="{{site.baseurl}}/createextensions"&gt;申请新的扩展&lt;/a&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Traditional Java stacks were engineered for monolithic applications with long startup times and large memory requirements in a world where the cloud, containers, and Kubernetes did not exist. Java frameworks needed to evolve to meet the needs of this new world.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>传统的Java堆栈是为单体应用设计的，启动时间长，内存需求大，而当时还没有云、容器和Kubernetes的存在。Java框架需要发展以满足这个新世界的需求。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Quarkus was created to enable Java developers to create applications for a modern, cloud-native world. Quarkus is a Kubernetes-native Java framework tailored for GraalVM and HotSpot, crafted from best-of-breed Java libraries and standards. The goal is to make Java the leading platform in Kubernetes and serverless environments while offering developers a framework to address a wider range of distributed application architectures.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>Quarkus的创建是为了使Java开发人员能够为现代的、云原生的世界创建应用程序。Quarkus是一个为GraalVM和HotSpot定制的Kubernetes原生Java框架，由最佳的Java库和标准精心打造。其目标是使Java成为Kubernetes和无服务器环境的领先平台，同时为开发者提供一个框架，以解决更广泛的分布式应用架构问题。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Open Source Utterly and Absolutely</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>完全和绝对地开放源代码</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>What Makes Quarkus Different?</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>是什么让Quarkus与众不同？</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Developers are critical to the success of almost every organization and they need the tools to build cloud-native applications quickly and efficiently. Quarkus provides a frictionless development experience through a combination of tools, libraries, extensions, and more. Quarkus makes developers more efficient with tools to improve the inner loop development cycle while in dev mode.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>开发人员对几乎每个组织的成功都至关重要，他们需要工具来快速、高效地构建云原生应用程序。Quarkus通过工具、库、扩展等的组合提供了无摩擦的开发体验。Quarkus通过工具使开发人员在开发模式下更有效率地改善内循环开发周期。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Quarkus was built from the ground up for Kubernetes making it easy to deploy applications without having to understand all of the complexities of the platform. Quarkus allows developers to automatically generate Kubernetes resources including building and deploying container images without having to manually create YAML files.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>Quarkus是为Kubernetes建立的，使其能够轻松部署应用程序，而无需了解该平台的所有复杂性。Quarkus允许开发者自动生成Kubernetes资源，包括构建和部署容器镜像，而无需手动创建YAML文件。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Best of Breed Libraries and Standards</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>最好的类库和标准</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Quarkus provides a cohesive, fun to use, full-stack framework by leveraging a growing list of hundreds of best-of-breed libraries that you love and use. All wired on a standard backbone.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>Quarkus提供了一个内聚的、使用起来有趣的全栈框架，它利用了您所喜爱和使用的数百个最佳组合库，都将其连接在一个标准主干上。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Imperative and reactive code</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>指令式和响应式代码</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Quarkus is designed to seamlessly combine the familiar imperative style code and the non-blocking, reactive style when developing applications.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>Quarkus的设计是为了在开发应用程序时将熟悉的指令式和非阻塞的响应式代码无缝结合起来。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This is helpful for both Java developers who are used to working with the imperative model and don’t want to switch things up, and those working with a cloud-native/reactive approach. The Quarkus development model can adapt itself to whatever app you’re developing.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>这对于那些习惯于使用指令式模型并且不想改变的Java开发人员，以及那些使用原生云/响应式方法的开发人员都是有帮助的。Quarkus开发模型可以适应您正在开发的任何应用程序。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>&lt;a href="{{site.baseurl}}/catalog"&gt;Extension Catalog&lt;/a&gt; &lt;i class="fas fa-chevron-right"&gt;&lt;/i&gt; {{ page.title }}</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>&lt;a href="{site.baseurl}}/catalog"&gt;扩展目录&lt;/a&gt; &lt;i class="fas fa-chevron-right"&gt;&lt;/i&gt; {{ page.title }}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Extension Title Quarkiverse-JBeret</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>扩展标题Quarkiverse-JBeret</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Provided by the JBeret Project Team</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>由JBeret项目组提供</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>DOCUMENTATION</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>文档</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Make sure use the documentation to have your questions answered.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>请确保使用文档来寻求问题答案。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>QUARKUS GUIDES</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>QUARKUS指南</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>You can get a better understanding on how to use this extension in the Quarkus Guides.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>你可以在Quarkus指南中更好地了解如何使用这个扩展。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Check out these applicable guides:</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>请查看这些适用的指南：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>USAGE</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>使用方法</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>To use the extension, add the dependency to the target project:</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>要使用该扩展，请将该依赖性添加到目标项目中：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The Batch API and Runtime will be available out of the box. Please refer to the &lt;a href="#"&gt;Batch documentation&lt;/a&gt;, or the &lt;a href="#"&gt;JBeret documentation&lt;/a&gt; to learn about Batch Applications.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>批处理API和运行时将是开箱即用的。请参考&lt;a href=""&gt;批处理文档&lt;/a&gt;，或&lt;a href=""&gt;JBeret文档&lt;/a&gt;以了解批处理应用程序。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>CONFIGURATION</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>配置</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The JBeret Quarkus extension supports the following configuration:</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>JBeret Quarkus扩展支持以下配置：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The repository type to store JBeret and Job data. A jdbc type requires a JDBC datasource.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>存储JBeret和Job数据的存储库类型。jdbc类型需要JDBC数据源。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>NON-STANDARD FEATURES</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>非标准功能</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The Batch API requires the @BatchProperty annotation to inject the specific configuration from the batch definition file. Instead, you can use the @ConfigProperty annotation, which is used to inject configuration properties in Quarkus using the MicroProfile Config API and keep consistency:</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>批处理API需要@BatchProperty注解来注入批处理定义文件中的特定配置。或者，你可以使用@ConfigProperty注解，它被用来在Quarkus中使用MicroProfile配置API注入配置属性，并保持一致性：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Although, there is a slight limitation: since job configuration is mostly dynamic and only injected on job execution, Quarkus may fail to start due to invalid configuration (can’t find the Job configuration values). In this case, configuration injection points with the @ConfigProperty annotation need to set a default value or use an Optional.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>虽然，有一个小小的限制：由于作业配置大多是动态的，并且只在作业执行时注入，Quarkus可能会因为无效的配置（找不到作业配置值）而启动失败。在这种情况下，带有@ConfigProperty注解的配置注入点需要设置一个默认值或使用一个Optional。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The Batch APIs JobOperator and JobRepository are available as CDI beans, so they can be injected directly into any code:</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>批处理API的JobOperator和JobRepository可以作为CDI Bean使用，所以它们可以直接注入到任何代码中：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The JBeret Scheduler is integrated out of the box in this extension.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>在这个扩展中，JBeret Scheduler是开箱即用的。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>To schedule a Job execution, please refer to the quarkus.jberet.job.”job-name”.cron and quarkus.jberet.job.”job-name”.params.”param-key” configurations.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>要安排工作的执行，请参考quarkus.jberet.job.”job-name”.cron和quarkus.jberet.job.”job-name”.params.”param-key”配置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>A Job can also be scheduled programmatically, using the JobScheduler API and the Quarkus startup event:</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>作业也可以通过程序安排，使用JobScheduler API和Quarkus的启动事件：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The JobScheduler does not support persistent schedules.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>JobScheduler不支持持久化调度。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The JBeret REST is integrated as separate extension that can be easily added to the target project with the following dependency:</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>JBeret REST被集成为独立的扩展，可以通过以下依赖关系轻松地添加到目标项目中：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The JBeret REST API, provides REST resources to several operations around the Batch API: starting and stopping jobs, querying the status of a job, schedule a job, and many more. The extension includes a REST client to simplify the REST API calls:</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>JBeret REST API，为围绕Batch API的几个操作提供REST资源：启动和停止作业、查询作业状态、安排作业等等。该扩展包括一个REST客户端来简化REST API的调用：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>EXAMPLE APPLICATIONS</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>示例应用</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>&lt;code&gt;chunk&lt;/code&gt; - A simple Job that reads, processes, and stores data from a file.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>&lt;code&gt;chunk&lt;/code&gt; - 一个简单的作业，从文件中读取、处理和存储数据。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>&lt;code&gt;jdbc-repository&lt;/code&gt; - A Job that uses a jdbc datasource to store JBeret and Job metadata.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>&lt;code&gt;jdbc-repository&lt;/code&gt; - 一个使用jdbc数据源来存储JBeret和作业元数据的作业。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Or take a look into the World of Warcraft Auctions - Batch Application. It downloads the World of Warcraft Auction House data and provides statistics about items prices.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>或者看看《魔兽世界》的拍卖 - 批处理应用。它下载魔兽世界拍卖行的数据并提供物品价格的统计数据。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>CONTRIBUTORS</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>贡献者</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Thanks goes to these wonderful people:</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>感谢这些优秀的人：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This project follows the &lt;a href="#"&gt;all-contributors&lt;/a&gt; specification. Contributions of any kind welcome!</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>本项目遵循&lt;a href="#"&gt;所有贡献者&lt;/a&gt;规范。欢迎任何形式的贡献!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>LICENSE</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>许可证</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Extension Version</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>扩展版本</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Compatible with Quarkus</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>与Quarkus兼容</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Native</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>原生</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Build</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>构建</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>&lt;a href="#"&gt;Passing&lt;/a&gt;</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>&lt;a href="#"&gt;通过&lt;/a&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Extension Repository</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>扩展版本库</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Extension Documentation</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>扩展文档</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>&lt;a href="#"&gt;Documentation&lt;/a&gt;</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>&lt;a href="#"&gt;文档&lt;/a&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Maintainer</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>维护者</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Project Homepage</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>项目主页</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Issues</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>缺陷</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Pull Requests</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>合并请求</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Size</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>大小</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Last Publish Date</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>最后发布日期</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Jan 01, 2021</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>2021年1月1日</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Weekly Builds</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>每周构建</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Total Builds</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>总构建</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Created on</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>创建于</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Jan 01, 2016</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>2016年1月1日</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Contributors</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>贡献者</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>&lt;a href="#"&gt;62 Contributors&lt;/a&gt;</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>&lt;a href="#"&gt;62位贡献者&lt;/a&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>What does it mean to be a Kubernetes-native framework?</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>作为一个Kubernetes原生框架意味着什么？</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Single-step Deployments</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>单步执行部署</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Quarkus makes it easy to deploy microservice applications to Kubernetes without having to understand the intricacies of the underlying Kubernetes framework. Extensions are available for Kubernetes, and Kubernetes distributions, to facilitate this process with only a minimal amount of configuration variables needed.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>Quarkus使得在Kubernetes上部署微服务应用变得容易，而不需要了解Kubernetes底层框架的复杂性。Kubernetes和Kubernetes发行版都有相应的扩展，以促进这个过程，只需要最小的配置变量。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Using the Quarkus Kubernetes extension, developers can perform or automate a single-step deployment using Jib, Docker, and Source-to-Image (S2i) including the creation of DeploymentConfig to trigger automatic redeployments. &lt;a href="{{site.baseurl}}/guides/deploying-to-kubernetes"&gt;Read the guide for more details.&lt;/a&gt;</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>使用Quarkus Kubernetes扩展，开发人员可以使用Jib、Docker和Source-to-Image（S2i）执行或自动进行单步部署，包括创建DeploymentConfig以触发自动重新部署。 &lt;a href="{{site.baseurl}}/guides/deploying-to-kubernetes"&gt;阅读指南了解更多细节&lt;/a&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Additionally, Quarkus includes extensions that make it easy to deploy serverless microservices to cloud providers including AWS Lambda, Azure Functions, and Google Cloud Functions as well as Knative to take advantage of Quarkus application’s fast startup times. &lt;a href="{{site.baseurl}}/guides/deploying-to-kubernetes"&gt;Read the guide for more details.&lt;/a&gt;</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>此外，Quarkus还包括一些扩展，使其能够轻松地将无服务器微服务部署到云提供商，包括AWS Lambda、Azure Functions和Google Cloud Functions以及Knative，以获得Quarkus应用程序的快速启动时间方面优势。&lt;a href="{{site.baseurl}}/guides/deploying-to-kubernetes"&gt;阅读该指南以了解更多细节&lt;/a&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Tracing &amp; Debugging</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>追踪和调试</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Quarkus provides developers the tools and capabilities to troubleshoot distributed microservices applications in Kubernetes including tracing and debugging.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>Quarkus为开发者提供了工具和能力，以解决Kubernetes中分布式微服务应用程序的故障，包括跟踪和调试。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Quarkus utilizes &lt;a href="https://opentracing.io/" target="_blank"&gt;OpenTracing&lt;/a&gt; which is a vendor-agnostic API to help developers easily instrument tracing into their codebase. Distributed tracing helps pinpoint where failures occur and what causes poor performance. &lt;a href="{{site.baseurl}}/guides/opentracing"&gt;Read the guide for more details.&lt;/a&gt;</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>Quarkus 利用&lt;a href="https://opentracing.io/" target="_blank"&gt;OpenTracing&lt;/a&gt;，这是一个与供应商无关的 API，可帮助开发人员轻松地将跟踪功能纳入其代码库。分布式跟踪有助于确定故障发生的位置以及导致性能不佳的原因。 &lt;a href="{{site.baseurl}}/guides/opentracing"&gt;阅读该指南以了解更多详情&lt;/a&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Application Health &amp; Metrics</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>应用健康和指标</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Quarkus leverages SmallRye Health, an implementation of the MicroProfile Health specification. This allows applications to provide information about their state to external viewers in a Kubernetes environment where automated processes must be able to determine whether the application should be discarded or restarted. &lt;a href="{{site.baseurl}}/guides/microprofile-health"&gt;Read the guide for more details.&lt;/a&gt;</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>Quarkus利用SmallRye Health，这是MicroProfile Health规范的一个实现。这允许应用程序在Kubernetes环境中向外部查看者提供有关其状态的信息，在这种环境中，自动化流程必须能够确定应用程序是否应该被丢弃或重新启动。 &lt;a href="{site.baseurl}}/guides/microprofile-health"&gt;阅读该指南以了解更多细节&lt;/a&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Quarkus utilizes the &lt;a href="https://micrometer.io/" target="_blank"&gt;Micrometer&lt;/a&gt; metrics library for runtime and application metrics. It provides a simple facade for the most popular monitoring systems to instrument your JVM-based application code without vendor lock-in. Application-specific and built-in metrics can be exposed using Micrometer. &lt;a href="{{site.baseurl}}/guides/micrometer#support-for-the-microprofile-metrics-api"&gt;Read the guide for more details.&lt;/a&gt;</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>Quarkus利用&lt;a href="https://micrometer.io/" target="_blank"&gt;Micrometer&lt;/a&gt;度量库来实现运行时和应用程序的度量。它为最流行的监控系统提供了一个简单的接口，以便在不锁定供应商的情况下对基于JVM的应用程序代码进行检测。&lt;a href="{{site.baseurl}}/guides/micrometer#support-for-the-microprofile-metrics-api"&gt;阅读该指南以了解更多细节&lt;/a&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Application Configuration</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>应用配置</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Quarkus includes an extension that allows developers to use Kubernetes ConfigMaps and Secrets as a configuration source, without having to mount them into the Pod running the Quarkus application or make any other modifications to their Kubernetes Deployment (or Openshift DeploymentConfig) &lt;a href="{{site.baseurl}}/guides/kubernetes-config"&gt;Read the guide for more details.&lt;/a&gt;</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>Quarkus包含一个扩展，允许开发者使用Kubernetes ConfigMaps和Secrets作为配置源，而无需将它们挂载到运行Quarkus应用的Pod中，也无需对Kubernetes的部署(或Openshift DeploymentConfig)进行任何修改。&lt;a href="{{site.baseurl}}/guides/kubernetes-config"&gt;阅读指南了解更多细节&lt;/a&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Remote Development</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>远程开发</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Create and debug applications in the same environment where applications run. Live coding in development mode where any changes made locally will be immediately visible in a clustered Kubernetes environment. &lt;a href="https://developers.redhat.com/blog/2021/02/11/enhancing-the-development-loop-with-quarkus-remote-development"&gt;Read this blog post for greater insight.&lt;/a&gt;</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>在应用程序运行的同一环境中创建和调试应用程序。在开发模式下的实时编码，在集群化的Kubernetes环境中，本地做出的任何更改都将立即可见。&lt;a href="https://developers.redhat.com/blog/2021/02/11/enhancing-the-development-loop-with-quarkus-remote-development"&gt;阅读这篇博客可以获得更深刻的见解&lt;/a&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>You need &lt;a href="https://maven.apache.org/" target="_blank"&gt;Apache Maven {{ site.data.versions.maven }}&lt;/a&gt;</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>您需要&lt;a href="https://maven.apache.org/" target="_blank"&gt;Apache Maven {{ site.data.version.maven }}&lt;/a&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Quarkus is not just about being great for writing Web Applications or Micro-Services. We’re focusing on more than the feature set: we make sure that every feature works well, simply, with little to no configuration, in the most intuitive way possible. It should be trivial to develop simple things, and easy to develop the more complex ones.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>Quarkus不仅仅是为编写网络应用程序或微服务提供良好的条件。我们关注的不仅仅是功能集：我们要确保每个功能都能很好地工作，简单地工作，几乎不需要配置，以最直观的方式进行。开发简单的东西应该是微不足道的，而开发更复杂的东西应该是容易的。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Live Coding</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>实时编码</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Improve and expedite the inner loop development process with live coding where code changes are automatically reflected in your running application. code -&gt; refresh browser -&gt; repeat</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>通过实时编码改善和加快内循环开发过程，代码的变化会自动反映在你运行的应用程序中。 代码 -&gt; 刷新浏览器 -&gt; 重复</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>&lt;a href="{{site.baseurl}}/guides/maven-tooling#dev-mode/"&gt;Read the Dev Mode guide&lt;/a&gt;</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>&lt;a href="{site.baseurl}}/guides/maven-tooling#dev-mode/"&gt;阅读开发模式指南&lt;/a&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Unified Config</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>统一配置</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Gone are the days of a thousand configuration files and formats. A single configuration file is all it takes for Quarkus applications to configure every single extension.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>千篇一律的配置文件和格式的时代已经过去了。Quarkus应用程序只需要一个配置文件就可以配置每一个扩展。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Opinionated</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>有态度的</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Quarkus focuses on the simplest and most useful way to use a given feature, trimming it to its most useful essence. This includes upfront analysis on how to best use a feature and guiding you in what we think is the best way to do things.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>Quarkus专注于使用给定特性最简单和最有用的方法，将其裁剪到最有用的本质。这包括关于如何最好地使用一个功能的前期分析，以及指导您我们认为最好的做事方式。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Visualize and configure extensions as well as access to application logs and testing components</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>可视化和配置扩展，以及访问应用程序日志和测试组件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>&lt;a href="{{site.baseurl}}/guides/dev-ui"&gt;Read the Dev UI guide&lt;/a&gt;</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>&lt;a href="{site.baseurl}}/guides/dev-ui"&gt;阅读开发用户界面指南&lt;/a&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Automatic provisioning and application wiring of supporting services such as databases, identity servers, and more.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>支持服务(如数据库、标识服务器等)的自动配置和应用程序连接。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>&lt;a href="{{site.baseurl}}/guides/dev-services"&gt;Read the Dev Services guide&lt;/a&gt;</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>&lt;a href="{site.baseurl}}/guides/dev-services"&gt;阅读开发服务指南&lt;/a&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Get instant feedback on code changes as tests run in the background on impacted code.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>当测试在后台对受影响的代码运行时，获得对代码变化的即时反馈。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>&lt;a href="{{site.baseurl}}/guides/continuous-testing"&gt;Read the Continuous Testing guide&lt;/a&gt;</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>&lt;a href="{site.baseurl}}/guides/continuous-testing"&gt;阅读持续测试指南&lt;/a&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Command Line Interface</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>命令行界面</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Create projects, manage extensions, and execute essential build and dev commands.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>创建项目，管理扩展，并执行基本的构建和开发命令。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Run &lt;a href="{{site.baseurl}}/guides/maven-tooling#dev-mode"&gt;dev mode&lt;/a&gt; remotely with changes to local files immediately available in a containerize environment.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>运行远程 &lt;a href="{{site.baseurl}}/guides/maven-tooling#dev-mode"&gt;开发者模式&lt;/a&gt; 可以在容器化环境中立即对本地文件进行更改。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Quickly Bootstrap Your Application</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>快速引导您的应用程序</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>With &lt;a href="https://code.quarkus.io/"&gt;code.quarkus.io&lt;/a&gt;, in a few clicks, you can bootstrap your Quarkus application and discover its extension ecosystem.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>点击 &lt;a href="https://code.quarkus.io/"&gt;code.quarkus.io&lt;/a&gt;链接, 只需几次单击就可以引导您的Quarkus应用程序并发现其扩展生态系统。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Explore the wide breadth of technologies Quarkus with which applications can be made.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>探索Quarkus可以应用的广泛的技术。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>A virtual (and in person where possible) tour of Java User Groups creating a unique hands-on experience with access to Quarkus experts designed to help you get started with Java in a Kubernetes world.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>一个Java用户组的虚拟之旅(如果可能的话还可以亲自去)，创建一个独特的亲身体验，造访旨在帮助您在Kubernetes世界中开始使用Java的Quarkus专家。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Unifies Imperative and Reactive</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>统一指令式和响应式</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Combine both the familiar imperative code and the reactive style when developing applications.  &lt;a href="/vision/continuum"&gt;Learn more&lt;/a&gt;.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>在开发应用程序时，将熟悉的命令式代码和响应式风格结合起来。&lt;a href="/vision/continuum"&gt;了解更多&lt;/a&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Need More Than Community Support?</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>需要超出社区范围的支持?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>If you require a higher level of support, you have options.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>如果您需要更高级别的支持，您可以选择。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Red Hat Build of Quarkus</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>红帽的Quarkus构建</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Enterprise support provided by Red Hat for the product.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>该产品由红帽公司提供企业级支持。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Quarkus provides a cohesive, fun to use, full-stack framework by leveraging a growing list of hundreds of best-of-breed libraries that you love and use. All wired on a standard backbone. &lt;a href="/vision/standards"&gt;Learn more about Quarkus Extensions&lt;/a&gt;.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>Quarkus提供了一个内聚的、使用起来有趣的全栈框架，它利用了您所喜爱和使用的数百个最佳组合库，都将其连接在一个标准主干上。&lt;a href="/vision/standards"&gt;了解更多关于Quarkus扩展的信息&lt;/a&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>From the outset, Quarkus has been designed around a container-first philosophy. What this means in concrete terms is that Quarkus applications are optimised for low memory usage and fast startup times in the following ways:</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>从一开始，Quarkus的设计就围绕着容器优先的理念。这意味着Quarkus应用程序在以下方面进行了优化，以达到低内存使用和快速启动的目的：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Build Time Processing</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>构建时处理</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The central idea behind Quarkus is to do at build-time what traditional frameworks do at runtime: configuration parsing, classpath scanning, feature toggle based on classloading, and so on.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>Quarkus的中心思想是在构建时做传统框架在运行时做的事情：配置解析、classpath扫描、基于classloading的功能切换，等等。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>As much processing as possible is done at build time; thus, your application only contains the classes used at runtime. In traditional frameworks, all the classes required to perform the initial application deployment hang around for the application’s life, even though they are only used once. With Quarkus, they are not even loaded into the production JVM! Quarkus does not stop here. During the build-time processing, it prepares the initialization of all components used by your application. It results in less memory usage and faster startup time as all metadata processing has already been done.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>尽可能将更多的处理在构建时完成；因此，你的应用程序只包含在运行时使用的类。在传统的框架中，所有执行初始应用部署所需的类都在应用的生命周期中存在，尽管它们只被使用一次。在Quarkus中，它们甚至不会被加载到生产用的JVM中。Quarkus并没有到此为止。在构建时的处理过程中，它为你的应用程序使用的所有组件的初始化做准备。由于所有的元数据处理都已经完成，这带来了更少的内存使用和更快的启动时间。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>As much as possible Quarkus tries to avoid reflection, reducing startup time and memory usage. During the built-time processing, extensions can analyze the application code and the classes available on the classpath and replace reflection calls with regular invocations. The usage of dynamic proxies is also prevented by using generating custom proxy at build time.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>Quarkus尽可能地避免反射，减少启动时间和内存使用。在构建时的处理过程中，扩展可以分析应用程序代码和classpath上可用的类，并以常规调用取代反射调用。通过在构建时使用生成的自定义代理，也可以防止使用动态代理。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Arc, the dependency injection framework used by Quarkus, eliminates all the reflection calls and deduces the injection graph at build time. So, when the application starts, no expensive lookups; it’s done already!</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>Arc是Quarkus使用的依赖注入框架，它消除了所有的反射调用，并在构建时推断出注入图。因此，当应用程序启动时，不需要昂贵的查找，它已经完成了!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>First-Class Support for GraalVM Native Images</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>优秀的对GraalVM原生镜像支持</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>GraalVM Native Executable support has been an essential part of the design for Quarkus from the beginning. When an application is compiled down to a native executable, it starts much faster and can run with a much smaller heap than a standard JVM. The native compiler uses aggressive dead-code elimination techniques to only embed the parts of the JVM and classes that are absolutely required by your application. Quarkus makes building optimized native executables plain easy. The build-time approach allows Quarkus to collect enough metadata on your application to fine-tune the compilation. No &lt;code&gt;-H:+ReportUnsupportedElementsAtRuntime&lt;/code&gt; flag, no fallback, no compromise!</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>GraalVM原生可执行文件支持从一开始就是Quarkus设计的重要组成部分。当一个应用程序被编译成一个原生可执行文件时，它的启动速度要快得多，并且可以在比标准JVM小得多的堆中运行。原生编译器使用积极的死代码消除技术，只嵌入JVM的部分和应用程序绝对需要的类。Quarkus使构建优化的原生可执行文件变得非常容易。构建时的方法允许Quarkus在你的应用程序上收集足够的元数据，以便对编译进行微调。没有&lt;code&gt;-H:+ReportUnsupportedElementsAtRuntime&lt;/code&gt;标志，没有回退，没有妥协！</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Native Image Pre-Boot</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>原生镜像预启动</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>We pre-boot as many of the frameworks as possible during the native compilation of a Quarkus application. It means that the resulting native executable has already run most of the startup code and serialized the result into the executable: even faster startup!</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>在Quarkus应用程序的原生编译过程中，我们尽可能多地对框架进行预启动。这意味着产生的原生可执行文件已经运行了大部分的启动代码，并将结果序列化到可执行文件中：启动速度更快！</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>All the techniques allowing reducing the memory usage and provide faster startup times are not only advantageous in containers. Even on bare metal, it would reduce your memory pressure, and it’s always pleasant to not have to wait 10 seconds to see your application running.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>所有允许减少内存使用和提供更快的启动时间的技术，不仅在容器中是有利的。即使在裸金属环境上，它也会减少你的内存压力，而且不必等待10秒就能看到你的应用程序运行，这总是令人愉快的。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>When Quarkus was designed, we didn’t focus only on containers but also on deploying Quarkus applications on container orchestrators such as Kubernetes. Quarkus build-time processing also generates the Kubernetes metadata, so your application is ready to be deployed on Kubernetes. Runtime capabilities such as health checks and metrics are exposed out of the box. Quarkus collects all the required metadata at build time to create the Kubernetes deployment descriptor and produce a container image. A single command line can deploy your application onto your Kubernetes cluster.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>在设计Quarkus时，我们不仅关注容器，还关注将Quarkus应用程序部署到容器协调器(如Kubernetes)上。Quarkus构建时处理还会生成Kubernetes元数据，这样就可以将应用程序部署到Kubernetes上了。运行时功能(如健康检查和指标)是开箱即用的。Quarkus在构建时收集所有必需的元数据，以创建Kubernetes部署描述符并生成容器镜像。一个命令行就可以将应用程序部署到Kubernetes集群上。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Step &lt;span class="step-no"&gt;1&lt;/span&gt;</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>步骤&lt;span class="step-no"&gt;1&lt;/span&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Install via Command Line Interface</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>通过命令行界面安装</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Open your favorite terminal and use JBang to install the Quarkus CLI. You do not need to have Java installed first.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>打开您喜欢的终端并使用JBang安装Quarkus CLI。您不需要首先安装Java。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>For Linux, macOS, and Windows (using WSL or bash compatible shell like Cygwin or MinGW)</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>对于Linux、macOS和Windows（使用WSL或bash兼容的shell，如Cygwin或MinGW）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>For Windows using Powershell</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>面向Windows使用Powershell</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>If it's your first time to install, you'll need ot restart your shell.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>如果第一次安装，需要重新启动您的shell。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Or, you can also install the CLI with SDKMAN!</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>或者，您也可以用SDKMAN安装CLI！</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>For more options, such as Homebrew or Chocolatey, see &lt;a href="/guides/cli-tooling"&gt;the Quarkus CLI guide&lt;/a&gt;.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>更多的选项，如Homebrew或Chocolatey，请参见&lt;a href="/guides/cli-tooling"&gt;Quarkus CLI指南&lt;/a&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Step &lt;span class="step-no"&gt;2&lt;/span&gt;</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>步骤&lt;span class="step-no"&gt;2&lt;/span&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Create the Getting Started Application</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>创建 "入门 "应用程序</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Run this script in your CLI:</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>在你的CLI中运行这个脚本：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Step &lt;span class="step-no"&gt;3&lt;/span&gt;</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>步骤&lt;span class="step-no"&gt;3&lt;/span&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Run the Getting Started Application</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>运行 "入门 "应用程序</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Boom! Your Quarkus app is now running at &lt;code&gt;localhost:8080&lt;/code&gt;</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>当当当！您的Quarkus应用已经在&lt;code&gt;localhost:8080&lt;/code&gt;运行了</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Step &lt;span class="step-no"&gt;4&lt;/span&gt;</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>步骤&lt;span class="step-no"&gt;4&lt;/span&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Live Coding with Quarkus</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>使用Quarkus进行实时编码</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Quarkus makes it easy to change your code on the fly. Let's modify the &lt;a href="localhost:8080/hello"&gt;RESTful endpoint&lt;/a&gt;</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>Quarkus使您可以轻松地动态更改代码。让我们修改 &lt;a href="localhost:8080/hello"&gt;RESTful 端点&lt;/a&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Open &lt;code&gt;src/main/java/GreetingsResource.java&lt;/code&gt; in a text editor or your &lt;a href="https://quarkus.io/guides/ide-tooling"&gt;favorite IDE&lt;/a&gt; and change "hello RESTEasy" to "hola RESTEasy". Then refresh the browser and see the changes.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>用文本编辑器或您惯用的 &lt;a href="https://quarkus.io/guides/ide-tooling"&gt;IDE&lt;/a&gt; 打开&lt;code&gt;src/main/java/GreetingsResource.java&lt;/code&gt; ，把 ”hello RESTEasy“ 改为 ”你好 RESTEasy“。然后刷新浏览器并查看更改。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Cool stuff right? &lt;a href="https://quarkus.io/guides/maven-tooling#dev-mode"&gt;Learn more about Quarkus's dev mode&lt;/a&gt;.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>很Cool的东东对吧？&lt;a href="https://quarkus.io/guides/maven-tooling#dev-mode"&gt;了解更多Quarkus的开发模式&lt;/a&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The core foundation of every good open source project is open discussion and collaboration. Quarkus is committed to this belief. We've enabled GitHub Discussions so the community can have open communication. This gives a focal point for the community to ask and answer questions regarding the project. This means all of that great knowledge can be shared and is discoverable. Additionally, other conversations about the Quarkus Community can be had there as well. Come collaborate with us.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>每个好的开源项目的核心基础是公开讨论和合作。Quarkus致力于这一信念。我们已经启用了GitHub讨论，以便社区能够进行公开交流。这为社区提供了一个焦点，以提出和回答关于项目的问题。这意味着所有这些伟大的知识都可以被分享和发现。此外，关于Quarkus社区的其他对话也可以在这里进行。来与我们合作吧。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>For usage questions, we recommend to:</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>对于使用问题，我们建议到：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Ask on &lt;a href="https://stackoverflow.com/questions/tagged/quarkus"&gt;Stack Overflow with the &lt;code&gt;quarkus&lt;/code&gt; tag&lt;/a&gt;</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>在&lt;a href="https://stackoverflow.com/questions/tagged/quarkus"&gt;Stack Overflow的&lt;code&gt;quarkus&lt;/code&gt;标签&lt;/a&gt;下提问题。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>For questions related to the development of Quarkus:</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>对于与Quarkus自身开发相关的问题：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The &lt;a href="https://groups.google.com/d/forum/quarkus-dev" target="_blank"&gt;quarkus-dev Google Groups&lt;/a&gt;</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>可以访问 &lt;a href="https://groups.google.com/d/forum/quarkus-dev" target="_blank"&gt;quarkus-dev Google Groups&lt;/a&gt;讨论组。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Chat using &lt;a href="https://quarkusio.zulipchat.com/#narrow/stream/187038-dev" target="_blank"&gt;Zulip&lt;/a&gt; (&lt;code&gt;#dev&lt;/code&gt; stream)</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>或在 &lt;a href="https://quarkusio.zulipchat.com/#narrow/stream/187038-dev" target="_blank"&gt;Zulip&lt;/a&gt; (&lt;code&gt;#dev&lt;/code&gt; stream) 聊天室发问。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>&lt;span href="{{site.baseurl}}/about/"&gt;About &lt;i class="fas fa-chevron-down"&gt;&lt;/i&gt;&lt;/span&gt;</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>&lt;span href="{{site.baseurl}}/about/"&gt;关于&lt;i class="fas fa-chevron-down"&gt; &lt;/i&gt;&lt;/span&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>&lt;a href="{{site.baseurl}}/about" class="{% if page.url contains '/about/' %}active{% endif %}"&gt;WHAT IS QUARKUS?&lt;/a&gt;</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>&lt;a href="{{site.baseurl}}/about" class="{% if page.url contains '/about/' %}active{% endif %}"&gt;QUARKUS是什么？&lt;/a&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>&lt;a href="{{site.baseurl}}/container-first" class="{% if page.url contains '/container-first/' %}active{% endif %}"&gt;CONTAINER FIRST&lt;/a&gt;</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>&lt;a href="{{site.baseurl}}/container-first" class="{% if page.url contains '/container-first/' %}active{% endif %}"&gt;容器优先 &lt;/a&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>&lt;a href="{{site.baseurl}}/developer-joy" class="{% if page.url contains '/developer-joy/' %}active{% endif %}"&gt;DEVELOPER JOY&lt;/a&gt;</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>&lt;a href="{{site.baseurl}}/developer-joy" class="{% if page.url contains '/developer-joy/' %}active{% endif %}"&gt;开发者的乐趣 &lt;/a&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>&lt;span href="{{site.baseurl}}/learn/"&gt;Learn &lt;i class="fas fa-chevron-down"&gt;&lt;/i&gt;&lt;/span&gt;</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>&lt;span href="{{site.baseurl}}/learn/"&gt;学习 &lt;i class="fas fa-chevron-down"&gt;&lt;/i&gt;&lt;/span&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>&lt;a href="{{site.baseurl}}/get-started" class="{% if page.url contains '/get-started/' %}active{% endif %}"&gt;GET STARTED&lt;/a&gt;</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>&lt;a href="{{site.baseurl}}/get-started" class="{% if page.url contains '/get-started/' %}active{% endif %}"&gt;入门&lt;/a&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>&lt;a href="{{site.baseurl}}/guides" class="{% if page.url contains '/guides/' %}active{% endif %}"&gt;GUIDES&lt;/a&gt;</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>&lt;a href="{{site.baseurl}}/guides" class="{% if page.url contains '/guides/' %}active{% endif %}" &gt;指南&lt;/a&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>&lt;span href="{{site.baseurl}}/community/"&gt;Community &lt;i class="fas fa-chevron-down"&gt;&lt;/i&gt;&lt;/span&gt;</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>&lt;span href="{{site.baseurl}}/community/"&gt;社区 &lt;i class="fas fa-chevron-down"&gt;&lt;/i&gt;&lt;/span&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>&lt;a href="{{site.baseurl}}/blog" class="{% if page.url contains '/blog/' %}active{% endif %}"&gt;BLOG&lt;/a&gt;</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>&lt;a href="{{site.baseurl}}/blog" class="{% if page.url contains '/blog/' %}active{% endif %}" &gt;博客&lt;/a&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>&lt;a href="{{site.baseurl}}/insights" class="{% if page.url contains '/insights/' %}active{% endif %}"&gt;PODCAST&lt;/a&gt;</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>&lt;a href="{{site.baseurl}}/insights" class="{% if page.url contains '/insights/' %}active{% endif %}" &gt;播客&lt;/a&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>SUPERSONIC&lt;span class="light-blue"&gt;/&lt;/span&gt;</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>超音速&lt;span class="light-blue"&gt;/&lt;/span&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>SUBATOMIC&lt;span class="light-blue"&gt;/&lt;/span&gt;</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>亚原子&lt;span class="light-blue"&gt;/&lt;/span&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>&lt;a href="{{ site.data.versions.quarkus.announce }}"&gt;Read the release notes&lt;/a&gt;</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>&lt;a href="{{ site.data.versions.quarkus.announce }}"&gt;阅读发布说明&lt;/a&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>A cohesive platform for optimized developer joy:</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>一个优化开发者乐趣的有凝聚力的平台：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Unified configuration</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>统一配置</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Zero config, live reload in the blink of an eye</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>零配置，瞬间重新加载</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Streamlined code for the 80% common usages, flexible for the 20%</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>简化80%的常用代码，灵活处理剩余的20%</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>No hassle native executable generation</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>轻松生成本机可执行文件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>&lt;a href="/vision/developer-joy"&gt;Learn more&lt;/a&gt;</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>&lt;a href="/vision/developer-joy"&gt;了解更多&lt;/a&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>For years, the client-server architecture has been the de-facto standard to build applications. But a significant shift happened. The &lt;em&gt;one model rules them all&lt;/em&gt; age is over. A new range of applications and architectural styles have emerged and transformed how code is written and how applications are deployed and executed. HTTP microservices, reactive applications, event-driven architecture, and serverless are now central players in modern systems.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>多年来，客户端服务器（CS）架构一直是构建应用程序的事实标准。但是，一个重大的转变发生了。&lt;em&gt;一种模式统治一切&lt;/em&gt;的时代已经过去。一系列新的应用程序和架构风格已经出现，并改变了代码的编写方式以及应用程序的部署和执行方式。HTTP微服务、响应式应用、事件驱动架构和无服务器现在是现代系统的核心角色。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Quarkus has been designed with this new world in mind and provides first-class support for these different paradigms. That does not mean you cannot build monoliths with Quarkus; you can do it smoothly. On the contrary, it means that the Quarkus development model morphs to adapt itself to the type of application you are developing, monolith, microservice, reactive, event-driven, functions…</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>Quarkus的设计考虑到了这个新的世界，并为这些不同的范式提供了一流的支持。这并不意味着你不能用Quarkus建立单体；你可以顺利地做到这一点。反而这意味着Quarkus的开发模型会变化，来适应您正在开发的应用程序的类型，单片机、微服务、响应式、事件驱动、无服务......</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Let’s start with the basics: HTTP microservices. In this context, you need to develop an HTTP endpoint, often called REST or CRUD. You process incoming HTTP requests, and to do so you often need to rely on other services, such as databases, or another HTTP service.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>让我们从最基本的开始：HTTP微服务。在这种情况下，你需要开发一个HTTP端点，通常称为REST或CRUD。你处理传入的HTTP请求，而要做到这一点，你往往需要依靠其他服务，如数据库，或另一个HTTP服务。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>For this type of application, Quarkus relies on well-known standards such as JAX-RS, JPA and MicroProfile Rest Client, but also Hibernate with Panache to simplify interactions with databases.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>对于这种类型的应用，Quarkus依赖于众所周知的标准，如JAX-RS、JPA和MicroProfile Rest Client，但也有Hibernate与Panache来简化与数据库的交互。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Let’s take a very simple application handling &lt;em&gt;elements&lt;/em&gt; from the periodic table. The code would be something like:</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>让我们来看看一个非常简单的处理周期表中&lt;em&gt;元素&lt;/em&gt;的应用程序。代码将是这样的：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>If you are a Java EE or Spring user, this development model should look familiar.  You expose a resource containing methods annotated with &lt;code&gt;@GET&lt;/code&gt;, &lt;code&gt;@POST&lt;/code&gt;…&amp;ZeroWidthSpace;&amp;ZeroWidthSpace; to handle the different requests.  The path is specified using the &lt;code&gt;@Path&lt;/code&gt; annotation.  Quarkus also supports &lt;a href="https://quarkus.io/guides/spring-web"&gt;Spring controller&lt;/a&gt; annotations such as &lt;code&gt;@GetMapping&lt;/code&gt; or &lt;code&gt;@RestController&lt;/code&gt;.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>如果你是一个Java EE或Spring的用户，这个开发模型应该看起来很熟悉。你暴露一个资源，其中包含有&lt;code&gt;@GET&lt;/code&gt;, &lt;code&gt;@POST&lt;/code&gt;...&amp;ZeroWidthSpace;&amp;ZeroWidthSpace; 注释的方法来处理不同的请求。路径是使用&lt;code&gt;@Path&lt;/code&gt;注解指定的。Quarkus还支持&lt;a href="https://quarkus.io/guides/spring-web"&gt;Spring控制器&lt;/a&gt;注释，如&lt;code&gt;@GetMapping&lt;/code&gt;或&lt;code&gt;@RestController&lt;/code&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>You can use the JPA entity manager directly.  Panache proposes an alternative removing boilerplate and exposing an active record and repository models.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>你可以直接使用JPA实体管理器。Panache提出了一个替代方案，去掉了模板，暴露了一个活跃的记录和存储库模型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>With Panache, the &lt;code&gt;Element&lt;/code&gt; class would be as simple as:</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>有了Panache，&lt;code&gt;Element&lt;/code&gt;类就会像这样简单：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Microservices tend to come in systems.  Let’s now imagine you need to access another HTTP endpoint.  You can use an HTTP client directly; this is nothing more than repeating boilerplate code.  Quarkus provides a way to call HTTP endpoints easily using the &lt;a href="https://quarkus.io/guides/rest-client"&gt;MicroProfile Rest Client API&lt;/a&gt;.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>微服务往往是以系统的形式出现的。现在让我们想象一下，你需要访问另一个HTTP端点。你可以直接使用HTTP客户端；这不过是在重复模板代码。Quarkus提供了一种方法，可以使用&lt;a href="https://quarkus.io/guides/rest-client"&gt;MicroProfile Rest Client API&lt;/a&gt;轻松调用HTTP端点。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>First declare your service as follows:</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>首先声明你的服务如下：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>For each call you are intending to do, add a method and use annotations to describe the behavior.  You can combine the REST Client with the &lt;a href="https://quarkus.io/guides/smallrye-fault-tolerance"&gt;fault tolerance extension&lt;/a&gt; to handle failure gracefully.  Then, in your resource, just use the &lt;code&gt;ElementService&lt;/code&gt; interface:</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>对于你打算做的每个调用，添加一个方法并使用注解来描述行为。您可以将REST客户端与&lt;a href="https://quarkus.io/guides/smallrye-fault-tolerance"&gt;容错扩展&lt;/a&gt;结合起来，以优雅地处理失败。然后，在你的资源中，只需使用&lt;code&gt;ElementService&lt;/code&gt;接口：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>But you may be wondering where the URL is configured as it’s not in the code. Remember, it must not be hard-coded because the URL likely depends on the environment. The URL is configured in the application configuration:</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>但你可能想知道URL是在哪里配置的，因为它不在代码中。记住，它不能是硬编码的，因为URL很可能取决于环境。URL是在应用程序配置中设置的：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The URL can now be updated during the deployment or at launch time using system properties or environment variables.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>现在可以在部署期间或在启动时使用系统属性或环境变量更新URL。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Quarkus is not limited to HTTP.  You can use &lt;a href="https://quarkus.io/guides/grpc-getting-started"&gt;gRPC&lt;/a&gt; or &lt;a href="https://quarkus.io/guides/smallrye-graphql"&gt;GraphQL&lt;/a&gt;, two prominent alternatives in the microservice space.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>Quarkus并不局限于HTTP。您可以使用&lt;a href="https://quarkus.io/guides/grpc-getting-started"&gt;gRPC&lt;/a&gt;或&lt;a href="https://quarkus.io/guides/smallrye-graphql"&gt;GraphQL&lt;/a&gt;，这是微服务领域的两个突出的替代方案。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>&lt;a class="anchor" href="#being-reactive"&gt;&lt;/a&gt;Being reactive</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>&lt;a class="anchor" href="#being-reactive"&gt;&lt;/a&gt;响应式风格</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Application requirements have changed drastically over the last few years.  For any application to succeed in the era of cloud computing, Big Data, or IoT, going reactive is increasingly becoming the architecture style to follow.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>在过去的几年里，应用需求发生了巨大的变化。任何应用要想在云计算、大数据或物联网时代取得成功，采取响应式的做法正日益成为应遵循的架构风格。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Today’s users embrace applications with milliseconds of response time, 100% uptime, lower latency, push data instead of pull, higher throughput, and elasticity. However, these features are nearly impossible to achieve using yesterday’s software architecture without a considerable investment in resources, infrastructure, and tooling. The world changed, and having dozens of servers, long response times (&amp;gt; 500 ms), downtime due to maintenance or waterfalls of failures does not meet the expected user experience.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>今天的用户接受具有几毫秒响应时间、100%正常运行时间、更低延迟、推送数据而不是拉动、更高的吞吐量和弹性的应用程序。然而，如果不对资源、基础设施和工具进行大量投资，使用昨天的软件架构几乎不可能实现这些功能。世界变了，拥有几十台服务器、较长的响应时间（&gt;500毫秒）、因维护或瀑布式的故障而导致的停机时间，并不能满足预期的用户体验。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Quarkus aids you on your journey to reactive.  Quarkus is based on a &lt;a href="https://quarkus.io/version/main/guides/quarkus-reactive-architecture"&gt;reactive core&lt;/a&gt; allowing your application to mix reactive and imperative components.  As an example, you can implement reactive HTTP endpoint using the &lt;a href="https://quarkus.io/guides/resteasy-reactive"&gt;RESTEasy Reactive extension&lt;/a&gt; as follows:</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>Quarkus可以帮助您实现响应式的旅程。Quarkus基于&lt;a href="https://quarkus.io/version/main/guides/quarkus-reactive-architecture"&gt;响应式核心&lt;/a&gt;，允许您的应用程序混合响应式和指令式组件。例如，您可以使用&lt;a href="https://quarkus.io/guides/resteasy-reactive"&gt;RESTEasy 响应式扩展&lt;/a&gt;实现响应式HTTP端点，具体如下：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Thanks to the &lt;a href="https://quarkus.io/version/main/guides/mutiny-primer"&gt;Mutiny Reactive API&lt;/a&gt; , you can compose asynchronous operations and complete the result when everything is done without blocking the I/O threads.  This greatly improves resource consumption and elasticity.  Most Quarkus APIs are available in both imperative and reactive.  As example, you can use the reactive version of the REST Client:</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>运用&lt;a href="https://quarkus.io/version/main/guides/mutiny-primer"&gt;Mutiny 响应式API&lt;/a&gt;，你可以组成异步操作，并在不阻塞I/O线程的情况下达成一切结果。这大大改善了资源消耗和弹性。大多数Quarkus API都可以使用指令式和响应式两种方式。例如，你可以使用REST客户端的响应式版本。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>But, what about streams? Generating a &lt;em&gt;server-sent event&lt;/em&gt; response with Quarkus is just as simple:</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>还有，事件流怎么处理？用Quarkus生成一个&lt;em&gt;server-sent 事件&lt;/em&gt;响应也同样简单。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>However, HTTP characteristics prohibit implementing &lt;a href="https://www.reactivemanifesto.org/"&gt;reactive systems&lt;/a&gt;, where all the components interact using asynchronous messages passing.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>然而，HTTP的特性禁止实现&lt;a href="https://www.reactivemanifesto.org/"&gt;响应式系统&lt;/a&gt;，即所有组件都使用异步消息传递进行交互。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>First, you can consume messages from various brokers such as AMQP or Apache Kafka, and process these messages smoothly:</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>首先，你可以从AMQP或Apache Kafka等各种代理那里消费消息，并顺利地处理这些消息。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The &lt;code&gt;@Incoming&lt;/code&gt; and &lt;code&gt;@Outgoing&lt;/code&gt; annotations are part of &lt;a href="https://www.smallrye.io/smallrye-reactive-messaging"&gt;Reactive Messaging&lt;/a&gt;.  They are used to express from which &lt;em&gt;channel&lt;/em&gt; you are consuming and to which &lt;em&gt;channel&lt;/em&gt; you are sending.  Thanks to Reactive Messaging you can consume and send messages from and to different brokers and transports such as HTTP, Kafka, or &lt;a href="http://camel.apache.org"&gt;Apache Camel&lt;/a&gt;.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>&lt;code&gt;@Incoming&lt;/code&gt; 和 &lt;code&gt;@Outgoing&lt;/code&gt; 注解是&lt;a href="https://www.smallrye.io/smallrye-reactive-messaging"&gt;响应式消息&lt;/a&gt;的一部分。它们用于表达您从哪个&lt;em&gt;channel&lt;/em&gt;消费，以及向哪个&lt;em&gt;channel&lt;/em&gt;发送。由于响应式消息传递，您可以从不同的代理和传输工具（如HTTP、Kafka或&lt;a href="http://camel.apache.org"&gt;Apache Camel&lt;/a&gt;）消费和发送消息。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Sometimes you need more than just handling messages one by one.  You can also express your message processing logic using reactive programming as illustrated in the following snippet:</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>有时你需要的不仅仅是逐一处理消息。你也可以使用响应式编程来表达消息处理逻辑，如下面的片段所示：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>As for the reactive APIs exposed by Quarkus, stream manipulation uses the Mutiny API.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>那么Quarkus的采用Mutiny API作为响应式API来进行流操作。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Thanks to their stellar startup time and low memory usage, you can implement functions using Quarkus to be used in serverless environments.  Quarkus provides Funqy, an approach to writing functions that are deployable to various FaaS environments like AWS Lambda, Azure Functions, Knative, and Knative Events (Cloud Events). It is also usable as a standalone service.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>由于其出色的启动时间和较低的内存使用，您可以使用Quarkus实现在无服务器环境中使用的功能。Quarkus提供了Funqy，一种编写可部署到各种FaaS环境中的函数的方法，如AWS Lambda、Azure函数、Knative和Knative事件(云事件)。它也可以作为一个独立的服务使用。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>With Funqy, a function is just:</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>Funqy函数就像是这样：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Quarkus tailors your application for GraalVM and HotSpot. Amazingly fast boot time, incredibly low RSS memory (not just heap size!) offering near instant scale up and high density memory utilization in container orchestration platforms like Kubernetes. We use a technique we call compile time boot. &lt;a href="/vision/container-first"&gt;Learn more.&lt;/a&gt;</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>Quarkus为GraalVM和HotSpot定制您的应用程序。惊人的快速启动时间，令人难以置信的低RSS内存（不仅仅是堆大小！）提供近乎即时的扩展和在Kubernetes等容器编排平台中高密度内存利用率。我们使用一种称为编译时引导的技术。&lt;a href="/vision/container-first"&gt;了解更多信息。&lt;/a&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Kube-Native</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>Kube-Native</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>&lt;a href="/container-first"&gt;Learn more&lt;/a&gt;&gt;</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>&lt;a href="/container-first"&gt;了解更多&lt;/a&gt;&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Unifies imperative and reactive</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>统一指令式和响应式</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>&lt;a href="/continuum"&gt;Learn more&lt;/a&gt;&gt;</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>&lt;a href="/continuum"&gt;了解更多&lt;/a&gt;&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Community and Standards</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>社区和标准</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>&lt;a href="/standards"&gt;Learn more&lt;/a&gt;&gt;</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>&lt;a href="/standards"&gt;了解更多&lt;/a&gt;&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>&lt;a href="/developer-joy"&gt;Learn more&lt;/a&gt;&gt;</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>&lt;a href="/vision/developer-joy"&gt;了解更多&lt;/a&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Getting Help from the Community</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>从社区获得帮助</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>We have a lot of documentation. Be sure to check our &lt;a href="{{site.baseurl}}/get-started/"&gt;Getting started page&lt;/a&gt;, and all our &lt;a href="{{site.baseurl}}/guides/"&gt;guides&lt;/a&gt;. Also check out our &lt;a href="{{site.baseurl}}/faq/"&gt;FAQ section&lt;/a&gt; and &lt;a href="https://www.youtube.com/playlist?list=PLsM3ZE5tGAVbMz1LJqc8L5LpnfxPPKloO"&gt;Quarkus Tips Playlist&lt;/a&gt;</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>我们有大量的文档。请务必查看我们的&lt;a href="{{site.baseurl}}/get-started/"&gt;入门页面&lt;/a&gt;，以及我们所有的&lt;a href="{{site.baseurl}}/guides/"&gt;指南&lt;/a&gt;。还可以查看我们的&lt;a href="{{site.baseurl}}/faq/"&gt;FAQ部分&lt;/a&gt;和&lt;a href="https://www.youtube.com/playlist?list=PLsM3ZE5tGAVbMz1LJqc8L5LpnfxPPKloO"&gt;Quarkus Tips 播放列表&lt;/a&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Stack Overflow</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>Stack Overflow</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Ask your questions on &lt;a href="https://stackoverflow.com/questions/tagged/quarkus"&gt;Stack Overflow&lt;/a&gt;. After the documentation, it’s probably the best place to look for answers. We actively monitor the &lt;a href="https://stackoverflow.com/questions/tagged/quarkus"&gt;Quarkus tag&lt;/a&gt;.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>在&lt;a href="https://stackoverflow.com/questions/tagged/quarkus"&gt;Stack Overflow&lt;/a&gt;上提出您的问题。在文档化之后，它可能是寻找答案的最佳地方。我们积极跟踪&lt;a href="https://stackoverflow.com/questions/tagged/quarkus"&gt;Quarkus标签&lt;/a&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Discussions and Collaboration</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>讨论与合作</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Check out our &lt;a href="https://github.com/quarkusio/quarkus/discussions"&gt;GitHub Discussions&lt;/a&gt; collaboration area to interact with other Quarkus users and developers.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>请查看我们的&lt;a href="https://github.com/quarkusio/quarkus/discussions"&gt;GitHub讨论&lt;/a&gt;协作区，与其他Quarkus用户和开发人员进行互动。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Discuss the development of Quarkus with the team in the &lt;a href="mailto:quarkus-dev+subscribe@googlegroups.com"&gt;development mailing list &lt;/a&gt; or by &lt;a href="https://quarkusio.zulipchat.com/"&gt;Zulip Chat&lt;/a&gt;.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>与团队讨论Quarkus开发的地方是 &lt;a href="mailto:quarkus-dev+subscribe@googlegroups.com"&gt;开发邮件列表 &lt;/a&gt; 或通过 &lt;a href="https://quarkusio.zulipchat.com/"&gt;Zulip Chat&lt;/a&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>&lt;span href="{{site.baseurl}}/learn/"&gt;Extensions &lt;i class="fas fa-chevron-down"&gt;&lt;/i&gt;&lt;/span&gt;</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>&lt;span href="{{site.baseurl}}/learn/"&gt;扩展&lt;i class="fas fa-chevron-down"&gt;&lt;/i&gt;&lt;/span&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>&lt;a href="{{site.baseurl}}/catalog" class="{% if page.url contains '/catalog/' %}active{% endif %}"&gt;EXTENSION CATALOG&lt;/a&gt;</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>&lt;a href="{{site.baseurl}}/catalog" class="{% if page.url contains '/catalog/' %}active{% endif %}"&gt;扩展目录&lt;/a&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>&lt;a href="{{site.baseurl}}/useextensions" class="{% if page.url contains '/useextensions/' %}active{% endif %}"&gt;USE EXTENSIONS&lt;/a&gt;</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>&lt;a href="{{site.baseurl}}/useextensions" class="{% if page.url contains '/useextensions/' %}active{% endif %}"&gt;使用扩展&lt;/a&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>&lt;a href="{{site.baseurl}}/createextensions" class="{% if page.url contains '/createextensions/' %}active{% endif %}"&gt;CREATE EXTENSIONS&lt;/a&gt;</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>&lt;a href="{{site.baseurl}}/createextensions" class="{% if page.url contains '/createextensions/' %}active{% endif %}"&gt;创建扩展&lt;/a&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>&lt;span href="{{site.baseurl}}/learn/"&gt;Community &lt;i class="fas fa-chevron-down"&gt;&lt;/i&gt;&lt;/span&gt;</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>&lt;span href="{{site.baseurl}}/learn/"&gt;社区&lt;i class="fas fa-chevron-down"&gt;&lt;/i&gt;&lt;/span&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Feedback and Help</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>反馈和帮助</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Use the &lt;a href="https://github.com/quarkusio/quarkus/discussions"&gt;Discussions&lt;/a&gt; section on our GitHub project.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>使用我们GitHub项目上的&lt;a href="https://github.com/quarkusio/quarkus/discussions"&gt;讨论&lt;/a&gt;部分。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Chat using &lt;a href="https://quarkusio.zulipchat.com" target="_blank"&gt;Zulip&lt;/a&gt; (&lt;code&gt;#dev&lt;/code&gt; stream)</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>或在 &lt;a href="https://quarkusio.zulipchat.com/#narrow/stream/187038-dev" target="_blank"&gt;Zulip&lt;/a&gt; (&lt;code&gt;#dev&lt;/code&gt; stream) 聊天室发问。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Your help is more than welcome! Don’t hesitate to join the crowd.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>我们非常欢迎您的帮助！不要犹豫，加入我们大家吧。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Join the Quarkus Community</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>加入Quarkus社区</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Check out our &lt;a href="https://github.com/quarkusio/quarkus" target="_blank"&gt;GitHub&lt;/a&gt; for details on reporting issues and the process for submitting pull requests.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>请查看我们的&lt;a href="https://github.com/quarkusio/quarkus" target="_blank"&gt;GitHub&lt;/a&gt;，了解有关报告问题和提交合并请求流程的详细信息。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Every contribution is valuable. It can be a bug report, an example application, a feature request, a fix in the documentation or just feedback.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>每一份贡献都是有价值的。它可以是bug报告、示例应用程序、功能请求、文档中的修复或仅仅是反馈。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>&lt;a href="https://github.com/quarkusio/quarkus/discussions/categories/events"&gt;Check out the "Events" section of Quarkus Discussions&lt;/a&gt; for additional community related events.</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>&lt;a href="https://github.com/quarkusio/quarkus/discussions/categories/events"&gt;查看Quarkus讨论组的”活动“部分&lt;/a&gt; 参与其他社区相关活动。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>World Tour</seg>
      </tuv>
      <tuv xml:lang="zh_CN">
        <seg>世界巡演</seg>
      </tuv>
    </tu>
  </body>
</tmx>
